/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClientPortalWebApi.ContractApi();
  });

  describe('(package)', function() {
    describe('ContractApi', function() {
      describe('iserverContractConidInfoGet', function() {
        it('should call iserverContractConidInfoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverContractConidInfoGet call and complete the assertions
          /*
          var conid = "conid_example";

          instance.iserverContractConidInfoGet(conid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Contract);
            expect(data.rTH).to.be.a('boolean');
            expect(data.rTH).to.be(false);
            expect(data.conId).to.be.a('string');
            expect(data.conId).to.be("");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("");
            expect(data.exchange).to.be.a('string');
            expect(data.exchange).to.be("");
            expect(data.localSymbol).to.be.a('string');
            expect(data.localSymbol).to.be("");
            expect(data.instrumentType).to.be.a('string');
            expect(data.instrumentType).to.be("");
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.industry).to.be.a('string');
            expect(data.industry).to.be("");
            expect(data.rules).to.be.a(ClientPortalWebApi.ContractRules);
                  {
                let dataCtr = data.rules.orderTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.rules.orderTypesOutside;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.rules.defaultSize).to.be.a('number');
              expect(data.rules.defaultSize).to.be();
              expect(data.rules.sizeIncrement).to.be.a('number');
              expect(data.rules.sizeIncrement).to.be();
              {
                let dataCtr = data.rules.tifTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.rules.limitPrice).to.be.a('number');
              expect(data.rules.limitPrice).to.be();
              expect(data.rules.stopprice).to.be.a('number');
              expect(data.rules.stopprice).to.be();
              expect(data.rules.preview).to.be.a('boolean');
              expect(data.rules.preview).to.be(false);
              expect(data.rules.displaySize).to.be.a('string');
              expect(data.rules.displaySize).to.be("");
              expect(data.rules.increment).to.be.a('string');
              expect(data.rules.increment).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverSecdefSearchPost', function() {
        it('should call iserverSecdefSearchPost successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverSecdefSearchPost call and complete the assertions
          /*
          var symbol = new ClientPortalWebApi.Symbol();
          symbol.symbol = "";
          symbol.name = false;
          symbol.secType = "";

          instance.iserverSecdefSearchPost(symbol, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse2008);
              expect(data.conid).to.be.a('number');
              expect(data.conid).to.be(0);
              expect(data.companyHeader).to.be.a('string');
              expect(data.companyHeader).to.be("");
              expect(data.companyName).to.be.a('string');
              expect(data.companyName).to.be("");
              expect(data.symbol).to.be.a('string');
              expect(data.symbol).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.opt).to.be.a('string');
              expect(data.opt).to.be("");
              expect(data.war).to.be.a('string');
              expect(data.war).to.be("");
              {
                let dataCtr = data.sections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('trsrvFuturesGet', function() {
        it('should call trsrvFuturesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for trsrvFuturesGet call and complete the assertions
          /*
          var symbols = "symbols_example";

          instance.trsrvFuturesGet(symbols, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20016);
            expect(data.symbol).to.be.a(ClientPortalWebApi.Futures);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('trsrvSecdefPost', function() {
        it('should call trsrvSecdefPost successfully', function(done) {
          // TODO: uncomment, update parameter values for trsrvSecdefPost call and complete the assertions
          /*
          var body = new ClientPortalWebApi.Body5();
          body.conids = [0];

          instance.trsrvSecdefPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Secdef);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
