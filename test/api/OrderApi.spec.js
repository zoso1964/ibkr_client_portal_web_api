/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClientPortalWebApi.OrderApi();
  });

  describe('(package)', function() {
    describe('OrderApi', function() {
      describe('iserverAccountAccountIdOrderOrigCustomerOrderIdDelete', function() {
        it('should call iserverAccountAccountIdOrderOrigCustomerOrderIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverAccountAccountIdOrderOrigCustomerOrderIdDelete call and complete the assertions
          /*
          var accountId = "accountId_example";
          var origCustomerOrderId = "origCustomerOrderId_example";

          instance.iserverAccountAccountIdOrderOrigCustomerOrderIdDelete(accountId, origCustomerOrderId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse2006);
              expect(data.orderId).to.be.a('string');
              expect(data.orderId).to.be("");
              expect(data.localOrderId).to.be.a('string');
              expect(data.localOrderId).to.be("");
              expect(data.orderStatus).to.be.a('string');
              expect(data.orderStatus).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverAccountAccountIdOrderOrigCustomerOrderIdPost', function() {
        it('should call iserverAccountAccountIdOrderOrigCustomerOrderIdPost successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverAccountAccountIdOrderOrigCustomerOrderIdPost call and complete the assertions
          /*
          var accountId = "accountId_example";
          var origCustomerOrderId = "origCustomerOrderId_example";
          var body = new ClientPortalWebApi.ModifyOrder();
          body.acctId = "";
          body.conid = 0;
          body.orderId = 0;
          body.orderType = "";
          body.outsideRTH = false;
          body.price = ;
          body.auxPrice = ;
          body.side = "";
          body.listingExchange = "";
          body.ticker = "";
          body.tif = "";
          body.quantity = ;

          instance.iserverAccountAccountIdOrderOrigCustomerOrderIdPost(accountId, origCustomerOrderId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse2006);
              expect(data.orderId).to.be.a('string');
              expect(data.orderId).to.be("");
              expect(data.localOrderId).to.be.a('string');
              expect(data.localOrderId).to.be("");
              expect(data.orderStatus).to.be.a('string');
              expect(data.orderStatus).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverAccountAccountIdOrderPost', function() {
        it('should call iserverAccountAccountIdOrderPost successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverAccountAccountIdOrderPost call and complete the assertions
          /*
          var accountId = "accountId_example";
          var body = new ClientPortalWebApi.OrderRequest();
          body.acctId = "";
          body.conid = 0;
          body.secType = "";
          body.cOID = "";
          body.parentId = "";
          body.orderType = "";
          body.listingExchange = "";
          body.outsideRTH = false;
          body.price = ;
          body.side = "";
          body.ticker = "";
          body.tif = "";
          body.referrer = "";
          body.quantity = ;
          body.useAdaptive = false;

          instance.iserverAccountAccountIdOrderPost(accountId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse2003);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              {
                let dataCtr = data.message;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverAccountAccountIdOrderWhatifPost', function() {
        it('should call iserverAccountAccountIdOrderWhatifPost successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverAccountAccountIdOrderWhatifPost call and complete the assertions
          /*
          var accountId = "accountId_example";
          var body = new ClientPortalWebApi.OrderRequest();
          body.acctId = "";
          body.conid = 0;
          body.secType = "";
          body.cOID = "";
          body.parentId = "";
          body.orderType = "";
          body.listingExchange = "";
          body.outsideRTH = false;
          body.price = ;
          body.side = "";
          body.ticker = "";
          body.tif = "";
          body.referrer = "";
          body.quantity = ;
          body.useAdaptive = false;

          instance.iserverAccountAccountIdOrderWhatifPost(accountId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse2005);
            expect(data.amount).to.be.a(ClientPortalWebApi.InlineResponse2005Amount);
                  expect(data.amount.amount).to.be.a('string');
              expect(data.amount.amount).to.be("");
              expect(data.amount.commission).to.be.a('string');
              expect(data.amount.commission).to.be("");
              expect(data.amount.total).to.be.a('string');
              expect(data.amount.total).to.be("");
            expect(data.equity).to.be.a(ClientPortalWebApi.InlineResponse2005Equity);
                  expect(data.equity.current).to.be.a('string');
              expect(data.equity.current).to.be("");
              expect(data.equity.change).to.be.a('string');
              expect(data.equity.change).to.be("");
              expect(data.equity.after).to.be.a('string');
              expect(data.equity.after).to.be("");
            expect(data.initial).to.be.a(ClientPortalWebApi.InlineResponse2005Equity);
                  expect(data.initial.current).to.be.a('string');
              expect(data.initial.current).to.be("");
              expect(data.initial.change).to.be.a('string');
              expect(data.initial.change).to.be("");
              expect(data.initial.after).to.be.a('string');
              expect(data.initial.after).to.be("");
            expect(data.maintenance).to.be.a(ClientPortalWebApi.InlineResponse2005Equity);
                  expect(data.maintenance.current).to.be.a('string');
              expect(data.maintenance.current).to.be("");
              expect(data.maintenance.change).to.be.a('string');
              expect(data.maintenance.change).to.be("");
              expect(data.maintenance.after).to.be.a('string');
              expect(data.maintenance.after).to.be("");
            expect(data.warn).to.be.a('string');
            expect(data.warn).to.be("");
            expect(data.error).to.be.a('string');
            expect(data.error).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverAccountAccountIdOrdersPost', function() {
        it('should call iserverAccountAccountIdOrdersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverAccountAccountIdOrdersPost call and complete the assertions
          /*
          var accountId = "accountId_example";
          var body = new ClientPortalWebApi.Body();
          body.orders = [new ClientPortalWebApi.OrderRequest()];
          body.orders[0].acctId = "";
          body.orders[0].conid = 0;
          body.orders[0].secType = "";
          body.orders[0].cOID = "";
          body.orders[0].parentId = "";
          body.orders[0].orderType = "";
          body.orders[0].listingExchange = "";
          body.orders[0].outsideRTH = false;
          body.orders[0].price = ;
          body.orders[0].side = "";
          body.orders[0].ticker = "";
          body.orders[0].tif = "";
          body.orders[0].referrer = "";
          body.orders[0].quantity = ;
          body.orders[0].useAdaptive = false;

          instance.iserverAccountAccountIdOrdersPost(accountId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse2003);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              {
                let dataCtr = data.message;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverAccountOrdersGet', function() {
        it('should call iserverAccountOrdersGet successfully', function(done) {
          // TODO: uncomment iserverAccountOrdersGet call and complete the assertions
          /*

          instance.iserverAccountOrdersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse2002);
            {
              let dataCtr = data.orders;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ClientPortalWebApi.Order);
                expect(data.acct).to.be.a('string');
                expect(data.acct).to.be("");
                expect(data.conid).to.be.a('number');
                expect(data.conid).to.be(0);
                expect(data.orderDesc).to.be.a('string');
                expect(data.orderDesc).to.be("");
                expect(data.description1).to.be.a('string');
                expect(data.description1).to.be("");
                expect(data.ticker).to.be.a('string');
                expect(data.ticker).to.be("");
                expect(data.secType).to.be.a('string');
                expect(data.secType).to.be("");
                expect(data.listingExchange).to.be.a('string');
                expect(data.listingExchange).to.be("");
                expect(data.remainingQuantity).to.be.a('string');
                expect(data.remainingQuantity).to.be("");
                expect(data.filledQuantity).to.be.a('string');
                expect(data.filledQuantity).to.be("");
                expect(data.companyName).to.be.a('string');
                expect(data.companyName).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.origOrderType).to.be.a('string');
                expect(data.origOrderType).to.be("");
                expect(data.side).to.be.a('string');
                expect(data.side).to.be("");
                expect(data.price).to.be.a('number');
                expect(data.price).to.be();
                expect(data.bgColor).to.be.a('string');
                expect(data.bgColor).to.be("");
                expect(data.fgColor).to.be.a('string');
                expect(data.fgColor).to.be("");
                expect(data.orderId).to.be.a('number');
                expect(data.orderId).to.be(0);
                expect(data.parentId).to.be.a('number');
                expect(data.parentId).to.be(0);

                      }
            }
            {
              let dataCtr = data.notifications;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverReplyReplyidPost', function() {
        it('should call iserverReplyReplyidPost successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverReplyReplyidPost call and complete the assertions
          /*
          var replyid = "replyid_example";
          var body = new ClientPortalWebApi.Body1();
          body.confirmed = false;

          instance.iserverReplyReplyidPost(replyid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse2004);
              expect(data.orderId).to.be.a('string');
              expect(data.orderId).to.be("");
              expect(data.orderStatus).to.be.a('string');
              expect(data.orderStatus).to.be("");
              expect(data.localOrderId).to.be.a('string');
              expect(data.localOrderId).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
