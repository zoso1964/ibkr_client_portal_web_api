/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClientPortalWebApi.PortfolioApi();
  });

  describe('(package)', function() {
    describe('PortfolioApi', function() {
      describe('portfolioAccountIdAllocationGet', function() {
        it('should call portfolioAccountIdAllocationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioAccountIdAllocationGet call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.portfolioAccountIdAllocationGet(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Allocation);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioAccountIdLedgerGet', function() {
        it('should call portfolioAccountIdLedgerGet successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioAccountIdLedgerGet call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.portfolioAccountIdLedgerGet(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20013);
            expect(data.BASE).to.be.a(ClientPortalWebApi.Ledger);
                  expect(data.BASE.commoditymarketvalue).to.be.a('number');
              expect(data.BASE.commoditymarketvalue).to.be();
              expect(data.BASE.futuremarketvalue).to.be.a('number');
              expect(data.BASE.futuremarketvalue).to.be();
              expect(data.BASE.settledcash).to.be.a('number');
              expect(data.BASE.settledcash).to.be();
              expect(data.BASE.exchangerate).to.be.a('number');
              expect(data.BASE.exchangerate).to.be();
              expect(data.BASE.sessionid).to.be.a('number');
              expect(data.BASE.sessionid).to.be(0);
              expect(data.BASE.cashbalance).to.be.a('number');
              expect(data.BASE.cashbalance).to.be();
              expect(data.BASE.corporatebondsmarketvalue).to.be.a('number');
              expect(data.BASE.corporatebondsmarketvalue).to.be();
              expect(data.BASE.warrantsmarketvalue).to.be.a('number');
              expect(data.BASE.warrantsmarketvalue).to.be();
              expect(data.BASE.netliquidationvalue).to.be.a('number');
              expect(data.BASE.netliquidationvalue).to.be();
              expect(data.BASE.interest).to.be.a('number');
              expect(data.BASE.interest).to.be();
              expect(data.BASE.unrealizedpnl).to.be.a('number');
              expect(data.BASE.unrealizedpnl).to.be();
              expect(data.BASE.stockmarketvalue).to.be.a('number');
              expect(data.BASE.stockmarketvalue).to.be();
              expect(data.BASE.moneyfunds).to.be.a('number');
              expect(data.BASE.moneyfunds).to.be();
              expect(data.BASE.currency).to.be.a('string');
              expect(data.BASE.currency).to.be("");
              expect(data.BASE.realizedpnl).to.be.a('number');
              expect(data.BASE.realizedpnl).to.be();
              expect(data.BASE.funds).to.be.a('number');
              expect(data.BASE.funds).to.be();
              expect(data.BASE.acctcode).to.be.a('string');
              expect(data.BASE.acctcode).to.be("");
              expect(data.BASE.issueroptionsmarketvalue).to.be.a('number');
              expect(data.BASE.issueroptionsmarketvalue).to.be();
              expect(data.BASE.key).to.be.a('string');
              expect(data.BASE.key).to.be("");
              expect(data.BASE.timestamp).to.be.a('number');
              expect(data.BASE.timestamp).to.be(0);
              expect(data.BASE.severity).to.be.a('number');
              expect(data.BASE.severity).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioAccountIdMetaGet', function() {
        it('should call portfolioAccountIdMetaGet successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioAccountIdMetaGet call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.portfolioAccountIdMetaGet(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Accounts);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioAccountIdPositionConidGet', function() {
        it('should call portfolioAccountIdPositionConidGet successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioAccountIdPositionConidGet call and complete the assertions
          /*
          var accountId = "accountId_example";
          var conid = 56;

          instance.portfolioAccountIdPositionConidGet(accountId, conid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Position);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioAccountIdPositionsInvalidatePost', function() {
        it('should call portfolioAccountIdPositionsInvalidatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioAccountIdPositionsInvalidatePost call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.portfolioAccountIdPositionsInvalidatePost(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioAccountIdPositionsPageIdGet', function() {
        it('should call portfolioAccountIdPositionsPageIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioAccountIdPositionsPageIdGet call and complete the assertions
          /*
          var accountId = "accountId_example";
          var pageId = "pageId_example";
          var opts = {};
          opts.model = "model_example";
          opts.sort = "sort_example";
          opts.direction = "direction_example";
          opts.period = "period_example";

          instance.portfolioAccountIdPositionsPageIdGet(accountId, pageId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Position);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioAccountIdSummaryGet', function() {
        it('should call portfolioAccountIdSummaryGet successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioAccountIdSummaryGet call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.portfolioAccountIdSummaryGet(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20012);
            expect(data.accountready).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accountready.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accountready.total.chg).to.be.a('string');
                expect(data.accountready.total.chg).to.be("");
                expect(data.accountready.total.rtn).to.be.a('string');
                expect(data.accountready.total.rtn).to.be("");
                expect(data.accountready.total.incompleteData).to.be.a('boolean');
                expect(data.accountready.total.incompleteData).to.be(false);
                expect(data.accountready.total.endVal).to.be.a('string');
                expect(data.accountready.total.endVal).to.be("");
                expect(data.accountready.total.startVal).to.be.a('string');
                expect(data.accountready.total.startVal).to.be("");
              expect(data.accountready.startDate).to.be.a('string');
              expect(data.accountready.startDate).to.be("");
              {
                let dataCtr = data.accountready.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accountready.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accountready.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accountready.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accountready.endDate).to.be.a('string');
              expect(data.accountready.endDate).to.be("");
              expect(data.accountready.hasExternalAccounts).to.be.a('boolean');
              expect(data.accountready.hasExternalAccounts).to.be(false);
              expect(data.accountready.rc).to.be.a('number');
              expect(data.accountready.rc).to.be(0);
              expect(data.accountready.currency).to.be.a('string');
              expect(data.accountready.currency).to.be("");
              expect(data.accountready.userId).to.be.a('string');
              expect(data.accountready.userId).to.be("");
              expect(data.accountready.pm).to.be.a('string');
              expect(data.accountready.pm).to.be("");
              expect(data.accountready.view).to.be.a('string');
              expect(data.accountready.view).to.be("");
              expect(data.accountready.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accountready.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.accounttype).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accounttype.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accounttype.total.chg).to.be.a('string');
                expect(data.accounttype.total.chg).to.be("");
                expect(data.accounttype.total.rtn).to.be.a('string');
                expect(data.accounttype.total.rtn).to.be("");
                expect(data.accounttype.total.incompleteData).to.be.a('boolean');
                expect(data.accounttype.total.incompleteData).to.be(false);
                expect(data.accounttype.total.endVal).to.be.a('string');
                expect(data.accounttype.total.endVal).to.be("");
                expect(data.accounttype.total.startVal).to.be.a('string');
                expect(data.accounttype.total.startVal).to.be("");
              expect(data.accounttype.startDate).to.be.a('string');
              expect(data.accounttype.startDate).to.be("");
              {
                let dataCtr = data.accounttype.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accounttype.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accounttype.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accounttype.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accounttype.endDate).to.be.a('string');
              expect(data.accounttype.endDate).to.be("");
              expect(data.accounttype.hasExternalAccounts).to.be.a('boolean');
              expect(data.accounttype.hasExternalAccounts).to.be(false);
              expect(data.accounttype.rc).to.be.a('number');
              expect(data.accounttype.rc).to.be(0);
              expect(data.accounttype.currency).to.be.a('string');
              expect(data.accounttype.currency).to.be("");
              expect(data.accounttype.userId).to.be.a('string');
              expect(data.accounttype.userId).to.be("");
              expect(data.accounttype.pm).to.be.a('string');
              expect(data.accounttype.pm).to.be("");
              expect(data.accounttype.view).to.be.a('string');
              expect(data.accounttype.view).to.be("");
              expect(data.accounttype.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accounttype.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.accruedcash).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accruedcash.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accruedcash.total.chg).to.be.a('string');
                expect(data.accruedcash.total.chg).to.be("");
                expect(data.accruedcash.total.rtn).to.be.a('string');
                expect(data.accruedcash.total.rtn).to.be("");
                expect(data.accruedcash.total.incompleteData).to.be.a('boolean');
                expect(data.accruedcash.total.incompleteData).to.be(false);
                expect(data.accruedcash.total.endVal).to.be.a('string');
                expect(data.accruedcash.total.endVal).to.be("");
                expect(data.accruedcash.total.startVal).to.be.a('string');
                expect(data.accruedcash.total.startVal).to.be("");
              expect(data.accruedcash.startDate).to.be.a('string');
              expect(data.accruedcash.startDate).to.be("");
              {
                let dataCtr = data.accruedcash.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accruedcash.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accruedcash.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accruedcash.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accruedcash.endDate).to.be.a('string');
              expect(data.accruedcash.endDate).to.be("");
              expect(data.accruedcash.hasExternalAccounts).to.be.a('boolean');
              expect(data.accruedcash.hasExternalAccounts).to.be(false);
              expect(data.accruedcash.rc).to.be.a('number');
              expect(data.accruedcash.rc).to.be(0);
              expect(data.accruedcash.currency).to.be.a('string');
              expect(data.accruedcash.currency).to.be("");
              expect(data.accruedcash.userId).to.be.a('string');
              expect(data.accruedcash.userId).to.be("");
              expect(data.accruedcash.pm).to.be.a('string');
              expect(data.accruedcash.pm).to.be("");
              expect(data.accruedcash.view).to.be.a('string');
              expect(data.accruedcash.view).to.be("");
              expect(data.accruedcash.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accruedcash.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.accruedcashC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accruedcashC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accruedcashC.total.chg).to.be.a('string');
                expect(data.accruedcashC.total.chg).to.be("");
                expect(data.accruedcashC.total.rtn).to.be.a('string');
                expect(data.accruedcashC.total.rtn).to.be("");
                expect(data.accruedcashC.total.incompleteData).to.be.a('boolean');
                expect(data.accruedcashC.total.incompleteData).to.be(false);
                expect(data.accruedcashC.total.endVal).to.be.a('string');
                expect(data.accruedcashC.total.endVal).to.be("");
                expect(data.accruedcashC.total.startVal).to.be.a('string');
                expect(data.accruedcashC.total.startVal).to.be("");
              expect(data.accruedcashC.startDate).to.be.a('string');
              expect(data.accruedcashC.startDate).to.be("");
              {
                let dataCtr = data.accruedcashC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accruedcashC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accruedcashC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accruedcashC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accruedcashC.endDate).to.be.a('string');
              expect(data.accruedcashC.endDate).to.be("");
              expect(data.accruedcashC.hasExternalAccounts).to.be.a('boolean');
              expect(data.accruedcashC.hasExternalAccounts).to.be(false);
              expect(data.accruedcashC.rc).to.be.a('number');
              expect(data.accruedcashC.rc).to.be(0);
              expect(data.accruedcashC.currency).to.be.a('string');
              expect(data.accruedcashC.currency).to.be("");
              expect(data.accruedcashC.userId).to.be.a('string');
              expect(data.accruedcashC.userId).to.be("");
              expect(data.accruedcashC.pm).to.be.a('string');
              expect(data.accruedcashC.pm).to.be("");
              expect(data.accruedcashC.view).to.be.a('string');
              expect(data.accruedcashC.view).to.be("");
              expect(data.accruedcashC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accruedcashC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.accruedcashF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accruedcashF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accruedcashF.total.chg).to.be.a('string');
                expect(data.accruedcashF.total.chg).to.be("");
                expect(data.accruedcashF.total.rtn).to.be.a('string');
                expect(data.accruedcashF.total.rtn).to.be("");
                expect(data.accruedcashF.total.incompleteData).to.be.a('boolean');
                expect(data.accruedcashF.total.incompleteData).to.be(false);
                expect(data.accruedcashF.total.endVal).to.be.a('string');
                expect(data.accruedcashF.total.endVal).to.be("");
                expect(data.accruedcashF.total.startVal).to.be.a('string');
                expect(data.accruedcashF.total.startVal).to.be("");
              expect(data.accruedcashF.startDate).to.be.a('string');
              expect(data.accruedcashF.startDate).to.be("");
              {
                let dataCtr = data.accruedcashF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accruedcashF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accruedcashF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accruedcashF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accruedcashF.endDate).to.be.a('string');
              expect(data.accruedcashF.endDate).to.be("");
              expect(data.accruedcashF.hasExternalAccounts).to.be.a('boolean');
              expect(data.accruedcashF.hasExternalAccounts).to.be(false);
              expect(data.accruedcashF.rc).to.be.a('number');
              expect(data.accruedcashF.rc).to.be(0);
              expect(data.accruedcashF.currency).to.be.a('string');
              expect(data.accruedcashF.currency).to.be("");
              expect(data.accruedcashF.userId).to.be.a('string');
              expect(data.accruedcashF.userId).to.be("");
              expect(data.accruedcashF.pm).to.be.a('string');
              expect(data.accruedcashF.pm).to.be("");
              expect(data.accruedcashF.view).to.be.a('string');
              expect(data.accruedcashF.view).to.be("");
              expect(data.accruedcashF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accruedcashF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.accruedcashS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accruedcashS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accruedcashS.total.chg).to.be.a('string');
                expect(data.accruedcashS.total.chg).to.be("");
                expect(data.accruedcashS.total.rtn).to.be.a('string');
                expect(data.accruedcashS.total.rtn).to.be("");
                expect(data.accruedcashS.total.incompleteData).to.be.a('boolean');
                expect(data.accruedcashS.total.incompleteData).to.be(false);
                expect(data.accruedcashS.total.endVal).to.be.a('string');
                expect(data.accruedcashS.total.endVal).to.be("");
                expect(data.accruedcashS.total.startVal).to.be.a('string');
                expect(data.accruedcashS.total.startVal).to.be("");
              expect(data.accruedcashS.startDate).to.be.a('string');
              expect(data.accruedcashS.startDate).to.be("");
              {
                let dataCtr = data.accruedcashS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accruedcashS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accruedcashS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accruedcashS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accruedcashS.endDate).to.be.a('string');
              expect(data.accruedcashS.endDate).to.be("");
              expect(data.accruedcashS.hasExternalAccounts).to.be.a('boolean');
              expect(data.accruedcashS.hasExternalAccounts).to.be(false);
              expect(data.accruedcashS.rc).to.be.a('number');
              expect(data.accruedcashS.rc).to.be(0);
              expect(data.accruedcashS.currency).to.be.a('string');
              expect(data.accruedcashS.currency).to.be("");
              expect(data.accruedcashS.userId).to.be.a('string');
              expect(data.accruedcashS.userId).to.be("");
              expect(data.accruedcashS.pm).to.be.a('string');
              expect(data.accruedcashS.pm).to.be("");
              expect(data.accruedcashS.view).to.be.a('string');
              expect(data.accruedcashS.view).to.be("");
              expect(data.accruedcashS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accruedcashS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.accrueddividend).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accrueddividend.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accrueddividend.total.chg).to.be.a('string');
                expect(data.accrueddividend.total.chg).to.be("");
                expect(data.accrueddividend.total.rtn).to.be.a('string');
                expect(data.accrueddividend.total.rtn).to.be("");
                expect(data.accrueddividend.total.incompleteData).to.be.a('boolean');
                expect(data.accrueddividend.total.incompleteData).to.be(false);
                expect(data.accrueddividend.total.endVal).to.be.a('string');
                expect(data.accrueddividend.total.endVal).to.be("");
                expect(data.accrueddividend.total.startVal).to.be.a('string');
                expect(data.accrueddividend.total.startVal).to.be("");
              expect(data.accrueddividend.startDate).to.be.a('string');
              expect(data.accrueddividend.startDate).to.be("");
              {
                let dataCtr = data.accrueddividend.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accrueddividend.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accrueddividend.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accrueddividend.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accrueddividend.endDate).to.be.a('string');
              expect(data.accrueddividend.endDate).to.be("");
              expect(data.accrueddividend.hasExternalAccounts).to.be.a('boolean');
              expect(data.accrueddividend.hasExternalAccounts).to.be(false);
              expect(data.accrueddividend.rc).to.be.a('number');
              expect(data.accrueddividend.rc).to.be(0);
              expect(data.accrueddividend.currency).to.be.a('string');
              expect(data.accrueddividend.currency).to.be("");
              expect(data.accrueddividend.userId).to.be.a('string');
              expect(data.accrueddividend.userId).to.be("");
              expect(data.accrueddividend.pm).to.be.a('string');
              expect(data.accrueddividend.pm).to.be("");
              expect(data.accrueddividend.view).to.be.a('string');
              expect(data.accrueddividend.view).to.be("");
              expect(data.accrueddividend.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accrueddividend.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.accrueddividendC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accrueddividendC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accrueddividendC.total.chg).to.be.a('string');
                expect(data.accrueddividendC.total.chg).to.be("");
                expect(data.accrueddividendC.total.rtn).to.be.a('string');
                expect(data.accrueddividendC.total.rtn).to.be("");
                expect(data.accrueddividendC.total.incompleteData).to.be.a('boolean');
                expect(data.accrueddividendC.total.incompleteData).to.be(false);
                expect(data.accrueddividendC.total.endVal).to.be.a('string');
                expect(data.accrueddividendC.total.endVal).to.be("");
                expect(data.accrueddividendC.total.startVal).to.be.a('string');
                expect(data.accrueddividendC.total.startVal).to.be("");
              expect(data.accrueddividendC.startDate).to.be.a('string');
              expect(data.accrueddividendC.startDate).to.be("");
              {
                let dataCtr = data.accrueddividendC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accrueddividendC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accrueddividendC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accrueddividendC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accrueddividendC.endDate).to.be.a('string');
              expect(data.accrueddividendC.endDate).to.be("");
              expect(data.accrueddividendC.hasExternalAccounts).to.be.a('boolean');
              expect(data.accrueddividendC.hasExternalAccounts).to.be(false);
              expect(data.accrueddividendC.rc).to.be.a('number');
              expect(data.accrueddividendC.rc).to.be(0);
              expect(data.accrueddividendC.currency).to.be.a('string');
              expect(data.accrueddividendC.currency).to.be("");
              expect(data.accrueddividendC.userId).to.be.a('string');
              expect(data.accrueddividendC.userId).to.be("");
              expect(data.accrueddividendC.pm).to.be.a('string');
              expect(data.accrueddividendC.pm).to.be("");
              expect(data.accrueddividendC.view).to.be.a('string');
              expect(data.accrueddividendC.view).to.be("");
              expect(data.accrueddividendC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accrueddividendC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.accrueddividendF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accrueddividendF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accrueddividendF.total.chg).to.be.a('string');
                expect(data.accrueddividendF.total.chg).to.be("");
                expect(data.accrueddividendF.total.rtn).to.be.a('string');
                expect(data.accrueddividendF.total.rtn).to.be("");
                expect(data.accrueddividendF.total.incompleteData).to.be.a('boolean');
                expect(data.accrueddividendF.total.incompleteData).to.be(false);
                expect(data.accrueddividendF.total.endVal).to.be.a('string');
                expect(data.accrueddividendF.total.endVal).to.be("");
                expect(data.accrueddividendF.total.startVal).to.be.a('string');
                expect(data.accrueddividendF.total.startVal).to.be("");
              expect(data.accrueddividendF.startDate).to.be.a('string');
              expect(data.accrueddividendF.startDate).to.be("");
              {
                let dataCtr = data.accrueddividendF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accrueddividendF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accrueddividendF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accrueddividendF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accrueddividendF.endDate).to.be.a('string');
              expect(data.accrueddividendF.endDate).to.be("");
              expect(data.accrueddividendF.hasExternalAccounts).to.be.a('boolean');
              expect(data.accrueddividendF.hasExternalAccounts).to.be(false);
              expect(data.accrueddividendF.rc).to.be.a('number');
              expect(data.accrueddividendF.rc).to.be(0);
              expect(data.accrueddividendF.currency).to.be.a('string');
              expect(data.accrueddividendF.currency).to.be("");
              expect(data.accrueddividendF.userId).to.be.a('string');
              expect(data.accrueddividendF.userId).to.be("");
              expect(data.accrueddividendF.pm).to.be.a('string');
              expect(data.accrueddividendF.pm).to.be("");
              expect(data.accrueddividendF.view).to.be.a('string');
              expect(data.accrueddividendF.view).to.be("");
              expect(data.accrueddividendF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accrueddividendF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.accrueddividendS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.accrueddividendS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.accrueddividendS.total.chg).to.be.a('string');
                expect(data.accrueddividendS.total.chg).to.be("");
                expect(data.accrueddividendS.total.rtn).to.be.a('string');
                expect(data.accrueddividendS.total.rtn).to.be("");
                expect(data.accrueddividendS.total.incompleteData).to.be.a('boolean');
                expect(data.accrueddividendS.total.incompleteData).to.be(false);
                expect(data.accrueddividendS.total.endVal).to.be.a('string');
                expect(data.accrueddividendS.total.endVal).to.be("");
                expect(data.accrueddividendS.total.startVal).to.be.a('string');
                expect(data.accrueddividendS.total.startVal).to.be("");
              expect(data.accrueddividendS.startDate).to.be.a('string');
              expect(data.accrueddividendS.startDate).to.be("");
              {
                let dataCtr = data.accrueddividendS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.accrueddividendS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.accrueddividendS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.accrueddividendS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.accrueddividendS.endDate).to.be.a('string');
              expect(data.accrueddividendS.endDate).to.be("");
              expect(data.accrueddividendS.hasExternalAccounts).to.be.a('boolean');
              expect(data.accrueddividendS.hasExternalAccounts).to.be(false);
              expect(data.accrueddividendS.rc).to.be.a('number');
              expect(data.accrueddividendS.rc).to.be(0);
              expect(data.accrueddividendS.currency).to.be.a('string');
              expect(data.accrueddividendS.currency).to.be("");
              expect(data.accrueddividendS.userId).to.be.a('string');
              expect(data.accrueddividendS.userId).to.be("");
              expect(data.accrueddividendS.pm).to.be.a('string');
              expect(data.accrueddividendS.pm).to.be("");
              expect(data.accrueddividendS.view).to.be.a('string');
              expect(data.accrueddividendS.view).to.be("");
              expect(data.accrueddividendS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.accrueddividendS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.availablefunds).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.availablefunds.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.availablefunds.total.chg).to.be.a('string');
                expect(data.availablefunds.total.chg).to.be("");
                expect(data.availablefunds.total.rtn).to.be.a('string');
                expect(data.availablefunds.total.rtn).to.be("");
                expect(data.availablefunds.total.incompleteData).to.be.a('boolean');
                expect(data.availablefunds.total.incompleteData).to.be(false);
                expect(data.availablefunds.total.endVal).to.be.a('string');
                expect(data.availablefunds.total.endVal).to.be("");
                expect(data.availablefunds.total.startVal).to.be.a('string');
                expect(data.availablefunds.total.startVal).to.be("");
              expect(data.availablefunds.startDate).to.be.a('string');
              expect(data.availablefunds.startDate).to.be("");
              {
                let dataCtr = data.availablefunds.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.availablefunds.lastSuccessfulUpdate).to.be.a('string');
              expect(data.availablefunds.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.availablefunds.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.availablefunds.endDate).to.be.a('string');
              expect(data.availablefunds.endDate).to.be("");
              expect(data.availablefunds.hasExternalAccounts).to.be.a('boolean');
              expect(data.availablefunds.hasExternalAccounts).to.be(false);
              expect(data.availablefunds.rc).to.be.a('number');
              expect(data.availablefunds.rc).to.be(0);
              expect(data.availablefunds.currency).to.be.a('string');
              expect(data.availablefunds.currency).to.be("");
              expect(data.availablefunds.userId).to.be.a('string');
              expect(data.availablefunds.userId).to.be("");
              expect(data.availablefunds.pm).to.be.a('string');
              expect(data.availablefunds.pm).to.be("");
              expect(data.availablefunds.view).to.be.a('string');
              expect(data.availablefunds.view).to.be("");
              expect(data.availablefunds.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.availablefunds.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.availablefundsC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.availablefundsC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.availablefundsC.total.chg).to.be.a('string');
                expect(data.availablefundsC.total.chg).to.be("");
                expect(data.availablefundsC.total.rtn).to.be.a('string');
                expect(data.availablefundsC.total.rtn).to.be("");
                expect(data.availablefundsC.total.incompleteData).to.be.a('boolean');
                expect(data.availablefundsC.total.incompleteData).to.be(false);
                expect(data.availablefundsC.total.endVal).to.be.a('string');
                expect(data.availablefundsC.total.endVal).to.be("");
                expect(data.availablefundsC.total.startVal).to.be.a('string');
                expect(data.availablefundsC.total.startVal).to.be("");
              expect(data.availablefundsC.startDate).to.be.a('string');
              expect(data.availablefundsC.startDate).to.be("");
              {
                let dataCtr = data.availablefundsC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.availablefundsC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.availablefundsC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.availablefundsC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.availablefundsC.endDate).to.be.a('string');
              expect(data.availablefundsC.endDate).to.be("");
              expect(data.availablefundsC.hasExternalAccounts).to.be.a('boolean');
              expect(data.availablefundsC.hasExternalAccounts).to.be(false);
              expect(data.availablefundsC.rc).to.be.a('number');
              expect(data.availablefundsC.rc).to.be(0);
              expect(data.availablefundsC.currency).to.be.a('string');
              expect(data.availablefundsC.currency).to.be("");
              expect(data.availablefundsC.userId).to.be.a('string');
              expect(data.availablefundsC.userId).to.be("");
              expect(data.availablefundsC.pm).to.be.a('string');
              expect(data.availablefundsC.pm).to.be("");
              expect(data.availablefundsC.view).to.be.a('string');
              expect(data.availablefundsC.view).to.be("");
              expect(data.availablefundsC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.availablefundsC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.availablefundsF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.availablefundsF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.availablefundsF.total.chg).to.be.a('string');
                expect(data.availablefundsF.total.chg).to.be("");
                expect(data.availablefundsF.total.rtn).to.be.a('string');
                expect(data.availablefundsF.total.rtn).to.be("");
                expect(data.availablefundsF.total.incompleteData).to.be.a('boolean');
                expect(data.availablefundsF.total.incompleteData).to.be(false);
                expect(data.availablefundsF.total.endVal).to.be.a('string');
                expect(data.availablefundsF.total.endVal).to.be("");
                expect(data.availablefundsF.total.startVal).to.be.a('string');
                expect(data.availablefundsF.total.startVal).to.be("");
              expect(data.availablefundsF.startDate).to.be.a('string');
              expect(data.availablefundsF.startDate).to.be("");
              {
                let dataCtr = data.availablefundsF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.availablefundsF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.availablefundsF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.availablefundsF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.availablefundsF.endDate).to.be.a('string');
              expect(data.availablefundsF.endDate).to.be("");
              expect(data.availablefundsF.hasExternalAccounts).to.be.a('boolean');
              expect(data.availablefundsF.hasExternalAccounts).to.be(false);
              expect(data.availablefundsF.rc).to.be.a('number');
              expect(data.availablefundsF.rc).to.be(0);
              expect(data.availablefundsF.currency).to.be.a('string');
              expect(data.availablefundsF.currency).to.be("");
              expect(data.availablefundsF.userId).to.be.a('string');
              expect(data.availablefundsF.userId).to.be("");
              expect(data.availablefundsF.pm).to.be.a('string');
              expect(data.availablefundsF.pm).to.be("");
              expect(data.availablefundsF.view).to.be.a('string');
              expect(data.availablefundsF.view).to.be("");
              expect(data.availablefundsF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.availablefundsF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.availablefundsS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.availablefundsS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.availablefundsS.total.chg).to.be.a('string');
                expect(data.availablefundsS.total.chg).to.be("");
                expect(data.availablefundsS.total.rtn).to.be.a('string');
                expect(data.availablefundsS.total.rtn).to.be("");
                expect(data.availablefundsS.total.incompleteData).to.be.a('boolean');
                expect(data.availablefundsS.total.incompleteData).to.be(false);
                expect(data.availablefundsS.total.endVal).to.be.a('string');
                expect(data.availablefundsS.total.endVal).to.be("");
                expect(data.availablefundsS.total.startVal).to.be.a('string');
                expect(data.availablefundsS.total.startVal).to.be("");
              expect(data.availablefundsS.startDate).to.be.a('string');
              expect(data.availablefundsS.startDate).to.be("");
              {
                let dataCtr = data.availablefundsS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.availablefundsS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.availablefundsS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.availablefundsS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.availablefundsS.endDate).to.be.a('string');
              expect(data.availablefundsS.endDate).to.be("");
              expect(data.availablefundsS.hasExternalAccounts).to.be.a('boolean');
              expect(data.availablefundsS.hasExternalAccounts).to.be(false);
              expect(data.availablefundsS.rc).to.be.a('number');
              expect(data.availablefundsS.rc).to.be(0);
              expect(data.availablefundsS.currency).to.be.a('string');
              expect(data.availablefundsS.currency).to.be("");
              expect(data.availablefundsS.userId).to.be.a('string');
              expect(data.availablefundsS.userId).to.be("");
              expect(data.availablefundsS.pm).to.be.a('string');
              expect(data.availablefundsS.pm).to.be("");
              expect(data.availablefundsS.view).to.be.a('string');
              expect(data.availablefundsS.view).to.be("");
              expect(data.availablefundsS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.availablefundsS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.billable).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.billable.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.billable.total.chg).to.be.a('string');
                expect(data.billable.total.chg).to.be("");
                expect(data.billable.total.rtn).to.be.a('string');
                expect(data.billable.total.rtn).to.be("");
                expect(data.billable.total.incompleteData).to.be.a('boolean');
                expect(data.billable.total.incompleteData).to.be(false);
                expect(data.billable.total.endVal).to.be.a('string');
                expect(data.billable.total.endVal).to.be("");
                expect(data.billable.total.startVal).to.be.a('string');
                expect(data.billable.total.startVal).to.be("");
              expect(data.billable.startDate).to.be.a('string');
              expect(data.billable.startDate).to.be("");
              {
                let dataCtr = data.billable.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.billable.lastSuccessfulUpdate).to.be.a('string');
              expect(data.billable.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.billable.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.billable.endDate).to.be.a('string');
              expect(data.billable.endDate).to.be("");
              expect(data.billable.hasExternalAccounts).to.be.a('boolean');
              expect(data.billable.hasExternalAccounts).to.be(false);
              expect(data.billable.rc).to.be.a('number');
              expect(data.billable.rc).to.be(0);
              expect(data.billable.currency).to.be.a('string');
              expect(data.billable.currency).to.be("");
              expect(data.billable.userId).to.be.a('string');
              expect(data.billable.userId).to.be("");
              expect(data.billable.pm).to.be.a('string');
              expect(data.billable.pm).to.be("");
              expect(data.billable.view).to.be.a('string');
              expect(data.billable.view).to.be("");
              expect(data.billable.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.billable.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.billableC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.billableC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.billableC.total.chg).to.be.a('string');
                expect(data.billableC.total.chg).to.be("");
                expect(data.billableC.total.rtn).to.be.a('string');
                expect(data.billableC.total.rtn).to.be("");
                expect(data.billableC.total.incompleteData).to.be.a('boolean');
                expect(data.billableC.total.incompleteData).to.be(false);
                expect(data.billableC.total.endVal).to.be.a('string');
                expect(data.billableC.total.endVal).to.be("");
                expect(data.billableC.total.startVal).to.be.a('string');
                expect(data.billableC.total.startVal).to.be("");
              expect(data.billableC.startDate).to.be.a('string');
              expect(data.billableC.startDate).to.be("");
              {
                let dataCtr = data.billableC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.billableC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.billableC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.billableC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.billableC.endDate).to.be.a('string');
              expect(data.billableC.endDate).to.be("");
              expect(data.billableC.hasExternalAccounts).to.be.a('boolean');
              expect(data.billableC.hasExternalAccounts).to.be(false);
              expect(data.billableC.rc).to.be.a('number');
              expect(data.billableC.rc).to.be(0);
              expect(data.billableC.currency).to.be.a('string');
              expect(data.billableC.currency).to.be("");
              expect(data.billableC.userId).to.be.a('string');
              expect(data.billableC.userId).to.be("");
              expect(data.billableC.pm).to.be.a('string');
              expect(data.billableC.pm).to.be("");
              expect(data.billableC.view).to.be.a('string');
              expect(data.billableC.view).to.be("");
              expect(data.billableC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.billableC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.billableF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.billableF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.billableF.total.chg).to.be.a('string');
                expect(data.billableF.total.chg).to.be("");
                expect(data.billableF.total.rtn).to.be.a('string');
                expect(data.billableF.total.rtn).to.be("");
                expect(data.billableF.total.incompleteData).to.be.a('boolean');
                expect(data.billableF.total.incompleteData).to.be(false);
                expect(data.billableF.total.endVal).to.be.a('string');
                expect(data.billableF.total.endVal).to.be("");
                expect(data.billableF.total.startVal).to.be.a('string');
                expect(data.billableF.total.startVal).to.be("");
              expect(data.billableF.startDate).to.be.a('string');
              expect(data.billableF.startDate).to.be("");
              {
                let dataCtr = data.billableF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.billableF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.billableF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.billableF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.billableF.endDate).to.be.a('string');
              expect(data.billableF.endDate).to.be("");
              expect(data.billableF.hasExternalAccounts).to.be.a('boolean');
              expect(data.billableF.hasExternalAccounts).to.be(false);
              expect(data.billableF.rc).to.be.a('number');
              expect(data.billableF.rc).to.be(0);
              expect(data.billableF.currency).to.be.a('string');
              expect(data.billableF.currency).to.be("");
              expect(data.billableF.userId).to.be.a('string');
              expect(data.billableF.userId).to.be("");
              expect(data.billableF.pm).to.be.a('string');
              expect(data.billableF.pm).to.be("");
              expect(data.billableF.view).to.be.a('string');
              expect(data.billableF.view).to.be("");
              expect(data.billableF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.billableF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.billableS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.billableS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.billableS.total.chg).to.be.a('string');
                expect(data.billableS.total.chg).to.be("");
                expect(data.billableS.total.rtn).to.be.a('string');
                expect(data.billableS.total.rtn).to.be("");
                expect(data.billableS.total.incompleteData).to.be.a('boolean');
                expect(data.billableS.total.incompleteData).to.be(false);
                expect(data.billableS.total.endVal).to.be.a('string');
                expect(data.billableS.total.endVal).to.be("");
                expect(data.billableS.total.startVal).to.be.a('string');
                expect(data.billableS.total.startVal).to.be("");
              expect(data.billableS.startDate).to.be.a('string');
              expect(data.billableS.startDate).to.be("");
              {
                let dataCtr = data.billableS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.billableS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.billableS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.billableS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.billableS.endDate).to.be.a('string');
              expect(data.billableS.endDate).to.be("");
              expect(data.billableS.hasExternalAccounts).to.be.a('boolean');
              expect(data.billableS.hasExternalAccounts).to.be(false);
              expect(data.billableS.rc).to.be.a('number');
              expect(data.billableS.rc).to.be(0);
              expect(data.billableS.currency).to.be.a('string');
              expect(data.billableS.currency).to.be("");
              expect(data.billableS.userId).to.be.a('string');
              expect(data.billableS.userId).to.be("");
              expect(data.billableS.pm).to.be.a('string');
              expect(data.billableS.pm).to.be("");
              expect(data.billableS.view).to.be.a('string');
              expect(data.billableS.view).to.be("");
              expect(data.billableS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.billableS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.buyingpower).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.buyingpower.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.buyingpower.total.chg).to.be.a('string');
                expect(data.buyingpower.total.chg).to.be("");
                expect(data.buyingpower.total.rtn).to.be.a('string');
                expect(data.buyingpower.total.rtn).to.be("");
                expect(data.buyingpower.total.incompleteData).to.be.a('boolean');
                expect(data.buyingpower.total.incompleteData).to.be(false);
                expect(data.buyingpower.total.endVal).to.be.a('string');
                expect(data.buyingpower.total.endVal).to.be("");
                expect(data.buyingpower.total.startVal).to.be.a('string');
                expect(data.buyingpower.total.startVal).to.be("");
              expect(data.buyingpower.startDate).to.be.a('string');
              expect(data.buyingpower.startDate).to.be("");
              {
                let dataCtr = data.buyingpower.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.buyingpower.lastSuccessfulUpdate).to.be.a('string');
              expect(data.buyingpower.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.buyingpower.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.buyingpower.endDate).to.be.a('string');
              expect(data.buyingpower.endDate).to.be("");
              expect(data.buyingpower.hasExternalAccounts).to.be.a('boolean');
              expect(data.buyingpower.hasExternalAccounts).to.be(false);
              expect(data.buyingpower.rc).to.be.a('number');
              expect(data.buyingpower.rc).to.be(0);
              expect(data.buyingpower.currency).to.be.a('string');
              expect(data.buyingpower.currency).to.be("");
              expect(data.buyingpower.userId).to.be.a('string');
              expect(data.buyingpower.userId).to.be("");
              expect(data.buyingpower.pm).to.be.a('string');
              expect(data.buyingpower.pm).to.be("");
              expect(data.buyingpower.view).to.be.a('string');
              expect(data.buyingpower.view).to.be("");
              expect(data.buyingpower.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.buyingpower.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.cushion).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.cushion.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.cushion.total.chg).to.be.a('string');
                expect(data.cushion.total.chg).to.be("");
                expect(data.cushion.total.rtn).to.be.a('string');
                expect(data.cushion.total.rtn).to.be("");
                expect(data.cushion.total.incompleteData).to.be.a('boolean');
                expect(data.cushion.total.incompleteData).to.be(false);
                expect(data.cushion.total.endVal).to.be.a('string');
                expect(data.cushion.total.endVal).to.be("");
                expect(data.cushion.total.startVal).to.be.a('string');
                expect(data.cushion.total.startVal).to.be("");
              expect(data.cushion.startDate).to.be.a('string');
              expect(data.cushion.startDate).to.be("");
              {
                let dataCtr = data.cushion.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.cushion.lastSuccessfulUpdate).to.be.a('string');
              expect(data.cushion.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.cushion.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.cushion.endDate).to.be.a('string');
              expect(data.cushion.endDate).to.be("");
              expect(data.cushion.hasExternalAccounts).to.be.a('boolean');
              expect(data.cushion.hasExternalAccounts).to.be(false);
              expect(data.cushion.rc).to.be.a('number');
              expect(data.cushion.rc).to.be(0);
              expect(data.cushion.currency).to.be.a('string');
              expect(data.cushion.currency).to.be("");
              expect(data.cushion.userId).to.be.a('string');
              expect(data.cushion.userId).to.be("");
              expect(data.cushion.pm).to.be.a('string');
              expect(data.cushion.pm).to.be("");
              expect(data.cushion.view).to.be.a('string');
              expect(data.cushion.view).to.be("");
              expect(data.cushion.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.cushion.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.daytradesremaining).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.daytradesremaining.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.daytradesremaining.total.chg).to.be.a('string');
                expect(data.daytradesremaining.total.chg).to.be("");
                expect(data.daytradesremaining.total.rtn).to.be.a('string');
                expect(data.daytradesremaining.total.rtn).to.be("");
                expect(data.daytradesremaining.total.incompleteData).to.be.a('boolean');
                expect(data.daytradesremaining.total.incompleteData).to.be(false);
                expect(data.daytradesremaining.total.endVal).to.be.a('string');
                expect(data.daytradesremaining.total.endVal).to.be("");
                expect(data.daytradesremaining.total.startVal).to.be.a('string');
                expect(data.daytradesremaining.total.startVal).to.be("");
              expect(data.daytradesremaining.startDate).to.be.a('string');
              expect(data.daytradesremaining.startDate).to.be("");
              {
                let dataCtr = data.daytradesremaining.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.daytradesremaining.lastSuccessfulUpdate).to.be.a('string');
              expect(data.daytradesremaining.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.daytradesremaining.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.daytradesremaining.endDate).to.be.a('string');
              expect(data.daytradesremaining.endDate).to.be("");
              expect(data.daytradesremaining.hasExternalAccounts).to.be.a('boolean');
              expect(data.daytradesremaining.hasExternalAccounts).to.be(false);
              expect(data.daytradesremaining.rc).to.be.a('number');
              expect(data.daytradesremaining.rc).to.be(0);
              expect(data.daytradesremaining.currency).to.be.a('string');
              expect(data.daytradesremaining.currency).to.be("");
              expect(data.daytradesremaining.userId).to.be.a('string');
              expect(data.daytradesremaining.userId).to.be("");
              expect(data.daytradesremaining.pm).to.be.a('string');
              expect(data.daytradesremaining.pm).to.be("");
              expect(data.daytradesremaining.view).to.be.a('string');
              expect(data.daytradesremaining.view).to.be("");
              expect(data.daytradesremaining.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.daytradesremaining.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.daytradesremainingt1).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.daytradesremainingt1.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.daytradesremainingt1.total.chg).to.be.a('string');
                expect(data.daytradesremainingt1.total.chg).to.be("");
                expect(data.daytradesremainingt1.total.rtn).to.be.a('string');
                expect(data.daytradesremainingt1.total.rtn).to.be("");
                expect(data.daytradesremainingt1.total.incompleteData).to.be.a('boolean');
                expect(data.daytradesremainingt1.total.incompleteData).to.be(false);
                expect(data.daytradesremainingt1.total.endVal).to.be.a('string');
                expect(data.daytradesremainingt1.total.endVal).to.be("");
                expect(data.daytradesremainingt1.total.startVal).to.be.a('string');
                expect(data.daytradesremainingt1.total.startVal).to.be("");
              expect(data.daytradesremainingt1.startDate).to.be.a('string');
              expect(data.daytradesremainingt1.startDate).to.be("");
              {
                let dataCtr = data.daytradesremainingt1.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.daytradesremainingt1.lastSuccessfulUpdate).to.be.a('string');
              expect(data.daytradesremainingt1.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.daytradesremainingt1.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.daytradesremainingt1.endDate).to.be.a('string');
              expect(data.daytradesremainingt1.endDate).to.be("");
              expect(data.daytradesremainingt1.hasExternalAccounts).to.be.a('boolean');
              expect(data.daytradesremainingt1.hasExternalAccounts).to.be(false);
              expect(data.daytradesremainingt1.rc).to.be.a('number');
              expect(data.daytradesremainingt1.rc).to.be(0);
              expect(data.daytradesremainingt1.currency).to.be.a('string');
              expect(data.daytradesremainingt1.currency).to.be("");
              expect(data.daytradesremainingt1.userId).to.be.a('string');
              expect(data.daytradesremainingt1.userId).to.be("");
              expect(data.daytradesremainingt1.pm).to.be.a('string');
              expect(data.daytradesremainingt1.pm).to.be("");
              expect(data.daytradesremainingt1.view).to.be.a('string');
              expect(data.daytradesremainingt1.view).to.be("");
              expect(data.daytradesremainingt1.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.daytradesremainingt1.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.daytradesremainingt2).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.daytradesremainingt2.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.daytradesremainingt2.total.chg).to.be.a('string');
                expect(data.daytradesremainingt2.total.chg).to.be("");
                expect(data.daytradesremainingt2.total.rtn).to.be.a('string');
                expect(data.daytradesremainingt2.total.rtn).to.be("");
                expect(data.daytradesremainingt2.total.incompleteData).to.be.a('boolean');
                expect(data.daytradesremainingt2.total.incompleteData).to.be(false);
                expect(data.daytradesremainingt2.total.endVal).to.be.a('string');
                expect(data.daytradesremainingt2.total.endVal).to.be("");
                expect(data.daytradesremainingt2.total.startVal).to.be.a('string');
                expect(data.daytradesremainingt2.total.startVal).to.be("");
              expect(data.daytradesremainingt2.startDate).to.be.a('string');
              expect(data.daytradesremainingt2.startDate).to.be("");
              {
                let dataCtr = data.daytradesremainingt2.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.daytradesremainingt2.lastSuccessfulUpdate).to.be.a('string');
              expect(data.daytradesremainingt2.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.daytradesremainingt2.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.daytradesremainingt2.endDate).to.be.a('string');
              expect(data.daytradesremainingt2.endDate).to.be("");
              expect(data.daytradesremainingt2.hasExternalAccounts).to.be.a('boolean');
              expect(data.daytradesremainingt2.hasExternalAccounts).to.be(false);
              expect(data.daytradesremainingt2.rc).to.be.a('number');
              expect(data.daytradesremainingt2.rc).to.be(0);
              expect(data.daytradesremainingt2.currency).to.be.a('string');
              expect(data.daytradesremainingt2.currency).to.be("");
              expect(data.daytradesremainingt2.userId).to.be.a('string');
              expect(data.daytradesremainingt2.userId).to.be("");
              expect(data.daytradesremainingt2.pm).to.be.a('string');
              expect(data.daytradesremainingt2.pm).to.be("");
              expect(data.daytradesremainingt2.view).to.be.a('string');
              expect(data.daytradesremainingt2.view).to.be("");
              expect(data.daytradesremainingt2.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.daytradesremainingt2.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.daytradesremainingt3).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.daytradesremainingt3.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.daytradesremainingt3.total.chg).to.be.a('string');
                expect(data.daytradesremainingt3.total.chg).to.be("");
                expect(data.daytradesremainingt3.total.rtn).to.be.a('string');
                expect(data.daytradesremainingt3.total.rtn).to.be("");
                expect(data.daytradesremainingt3.total.incompleteData).to.be.a('boolean');
                expect(data.daytradesremainingt3.total.incompleteData).to.be(false);
                expect(data.daytradesremainingt3.total.endVal).to.be.a('string');
                expect(data.daytradesremainingt3.total.endVal).to.be("");
                expect(data.daytradesremainingt3.total.startVal).to.be.a('string');
                expect(data.daytradesremainingt3.total.startVal).to.be("");
              expect(data.daytradesremainingt3.startDate).to.be.a('string');
              expect(data.daytradesremainingt3.startDate).to.be("");
              {
                let dataCtr = data.daytradesremainingt3.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.daytradesremainingt3.lastSuccessfulUpdate).to.be.a('string');
              expect(data.daytradesremainingt3.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.daytradesremainingt3.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.daytradesremainingt3.endDate).to.be.a('string');
              expect(data.daytradesremainingt3.endDate).to.be("");
              expect(data.daytradesremainingt3.hasExternalAccounts).to.be.a('boolean');
              expect(data.daytradesremainingt3.hasExternalAccounts).to.be(false);
              expect(data.daytradesremainingt3.rc).to.be.a('number');
              expect(data.daytradesremainingt3.rc).to.be(0);
              expect(data.daytradesremainingt3.currency).to.be.a('string');
              expect(data.daytradesremainingt3.currency).to.be("");
              expect(data.daytradesremainingt3.userId).to.be.a('string');
              expect(data.daytradesremainingt3.userId).to.be("");
              expect(data.daytradesremainingt3.pm).to.be.a('string');
              expect(data.daytradesremainingt3.pm).to.be("");
              expect(data.daytradesremainingt3.view).to.be.a('string');
              expect(data.daytradesremainingt3.view).to.be("");
              expect(data.daytradesremainingt3.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.daytradesremainingt3.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.daytradesremainingt4).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.daytradesremainingt4.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.daytradesremainingt4.total.chg).to.be.a('string');
                expect(data.daytradesremainingt4.total.chg).to.be("");
                expect(data.daytradesremainingt4.total.rtn).to.be.a('string');
                expect(data.daytradesremainingt4.total.rtn).to.be("");
                expect(data.daytradesremainingt4.total.incompleteData).to.be.a('boolean');
                expect(data.daytradesremainingt4.total.incompleteData).to.be(false);
                expect(data.daytradesremainingt4.total.endVal).to.be.a('string');
                expect(data.daytradesremainingt4.total.endVal).to.be("");
                expect(data.daytradesremainingt4.total.startVal).to.be.a('string');
                expect(data.daytradesremainingt4.total.startVal).to.be("");
              expect(data.daytradesremainingt4.startDate).to.be.a('string');
              expect(data.daytradesremainingt4.startDate).to.be("");
              {
                let dataCtr = data.daytradesremainingt4.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.daytradesremainingt4.lastSuccessfulUpdate).to.be.a('string');
              expect(data.daytradesremainingt4.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.daytradesremainingt4.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.daytradesremainingt4.endDate).to.be.a('string');
              expect(data.daytradesremainingt4.endDate).to.be("");
              expect(data.daytradesremainingt4.hasExternalAccounts).to.be.a('boolean');
              expect(data.daytradesremainingt4.hasExternalAccounts).to.be(false);
              expect(data.daytradesremainingt4.rc).to.be.a('number');
              expect(data.daytradesremainingt4.rc).to.be(0);
              expect(data.daytradesremainingt4.currency).to.be.a('string');
              expect(data.daytradesremainingt4.currency).to.be("");
              expect(data.daytradesremainingt4.userId).to.be.a('string');
              expect(data.daytradesremainingt4.userId).to.be("");
              expect(data.daytradesremainingt4.pm).to.be.a('string');
              expect(data.daytradesremainingt4.pm).to.be("");
              expect(data.daytradesremainingt4.view).to.be.a('string');
              expect(data.daytradesremainingt4.view).to.be("");
              expect(data.daytradesremainingt4.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.daytradesremainingt4.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.equitywithloanvalue).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.equitywithloanvalue.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.equitywithloanvalue.total.chg).to.be.a('string');
                expect(data.equitywithloanvalue.total.chg).to.be("");
                expect(data.equitywithloanvalue.total.rtn).to.be.a('string');
                expect(data.equitywithloanvalue.total.rtn).to.be("");
                expect(data.equitywithloanvalue.total.incompleteData).to.be.a('boolean');
                expect(data.equitywithloanvalue.total.incompleteData).to.be(false);
                expect(data.equitywithloanvalue.total.endVal).to.be.a('string');
                expect(data.equitywithloanvalue.total.endVal).to.be("");
                expect(data.equitywithloanvalue.total.startVal).to.be.a('string');
                expect(data.equitywithloanvalue.total.startVal).to.be("");
              expect(data.equitywithloanvalue.startDate).to.be.a('string');
              expect(data.equitywithloanvalue.startDate).to.be("");
              {
                let dataCtr = data.equitywithloanvalue.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.equitywithloanvalue.lastSuccessfulUpdate).to.be.a('string');
              expect(data.equitywithloanvalue.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.equitywithloanvalue.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.equitywithloanvalue.endDate).to.be.a('string');
              expect(data.equitywithloanvalue.endDate).to.be("");
              expect(data.equitywithloanvalue.hasExternalAccounts).to.be.a('boolean');
              expect(data.equitywithloanvalue.hasExternalAccounts).to.be(false);
              expect(data.equitywithloanvalue.rc).to.be.a('number');
              expect(data.equitywithloanvalue.rc).to.be(0);
              expect(data.equitywithloanvalue.currency).to.be.a('string');
              expect(data.equitywithloanvalue.currency).to.be("");
              expect(data.equitywithloanvalue.userId).to.be.a('string');
              expect(data.equitywithloanvalue.userId).to.be("");
              expect(data.equitywithloanvalue.pm).to.be.a('string');
              expect(data.equitywithloanvalue.pm).to.be("");
              expect(data.equitywithloanvalue.view).to.be.a('string');
              expect(data.equitywithloanvalue.view).to.be("");
              expect(data.equitywithloanvalue.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.equitywithloanvalue.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.equitywithloanvalueC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.equitywithloanvalueC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.equitywithloanvalueC.total.chg).to.be.a('string');
                expect(data.equitywithloanvalueC.total.chg).to.be("");
                expect(data.equitywithloanvalueC.total.rtn).to.be.a('string');
                expect(data.equitywithloanvalueC.total.rtn).to.be("");
                expect(data.equitywithloanvalueC.total.incompleteData).to.be.a('boolean');
                expect(data.equitywithloanvalueC.total.incompleteData).to.be(false);
                expect(data.equitywithloanvalueC.total.endVal).to.be.a('string');
                expect(data.equitywithloanvalueC.total.endVal).to.be("");
                expect(data.equitywithloanvalueC.total.startVal).to.be.a('string');
                expect(data.equitywithloanvalueC.total.startVal).to.be("");
              expect(data.equitywithloanvalueC.startDate).to.be.a('string');
              expect(data.equitywithloanvalueC.startDate).to.be("");
              {
                let dataCtr = data.equitywithloanvalueC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.equitywithloanvalueC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.equitywithloanvalueC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.equitywithloanvalueC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.equitywithloanvalueC.endDate).to.be.a('string');
              expect(data.equitywithloanvalueC.endDate).to.be("");
              expect(data.equitywithloanvalueC.hasExternalAccounts).to.be.a('boolean');
              expect(data.equitywithloanvalueC.hasExternalAccounts).to.be(false);
              expect(data.equitywithloanvalueC.rc).to.be.a('number');
              expect(data.equitywithloanvalueC.rc).to.be(0);
              expect(data.equitywithloanvalueC.currency).to.be.a('string');
              expect(data.equitywithloanvalueC.currency).to.be("");
              expect(data.equitywithloanvalueC.userId).to.be.a('string');
              expect(data.equitywithloanvalueC.userId).to.be("");
              expect(data.equitywithloanvalueC.pm).to.be.a('string');
              expect(data.equitywithloanvalueC.pm).to.be("");
              expect(data.equitywithloanvalueC.view).to.be.a('string');
              expect(data.equitywithloanvalueC.view).to.be("");
              expect(data.equitywithloanvalueC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.equitywithloanvalueC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.equitywithloanvalueF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.equitywithloanvalueF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.equitywithloanvalueF.total.chg).to.be.a('string');
                expect(data.equitywithloanvalueF.total.chg).to.be("");
                expect(data.equitywithloanvalueF.total.rtn).to.be.a('string');
                expect(data.equitywithloanvalueF.total.rtn).to.be("");
                expect(data.equitywithloanvalueF.total.incompleteData).to.be.a('boolean');
                expect(data.equitywithloanvalueF.total.incompleteData).to.be(false);
                expect(data.equitywithloanvalueF.total.endVal).to.be.a('string');
                expect(data.equitywithloanvalueF.total.endVal).to.be("");
                expect(data.equitywithloanvalueF.total.startVal).to.be.a('string');
                expect(data.equitywithloanvalueF.total.startVal).to.be("");
              expect(data.equitywithloanvalueF.startDate).to.be.a('string');
              expect(data.equitywithloanvalueF.startDate).to.be("");
              {
                let dataCtr = data.equitywithloanvalueF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.equitywithloanvalueF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.equitywithloanvalueF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.equitywithloanvalueF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.equitywithloanvalueF.endDate).to.be.a('string');
              expect(data.equitywithloanvalueF.endDate).to.be("");
              expect(data.equitywithloanvalueF.hasExternalAccounts).to.be.a('boolean');
              expect(data.equitywithloanvalueF.hasExternalAccounts).to.be(false);
              expect(data.equitywithloanvalueF.rc).to.be.a('number');
              expect(data.equitywithloanvalueF.rc).to.be(0);
              expect(data.equitywithloanvalueF.currency).to.be.a('string');
              expect(data.equitywithloanvalueF.currency).to.be("");
              expect(data.equitywithloanvalueF.userId).to.be.a('string');
              expect(data.equitywithloanvalueF.userId).to.be("");
              expect(data.equitywithloanvalueF.pm).to.be.a('string');
              expect(data.equitywithloanvalueF.pm).to.be("");
              expect(data.equitywithloanvalueF.view).to.be.a('string');
              expect(data.equitywithloanvalueF.view).to.be("");
              expect(data.equitywithloanvalueF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.equitywithloanvalueF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.equitywithloanvalueS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.equitywithloanvalueS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.equitywithloanvalueS.total.chg).to.be.a('string');
                expect(data.equitywithloanvalueS.total.chg).to.be("");
                expect(data.equitywithloanvalueS.total.rtn).to.be.a('string');
                expect(data.equitywithloanvalueS.total.rtn).to.be("");
                expect(data.equitywithloanvalueS.total.incompleteData).to.be.a('boolean');
                expect(data.equitywithloanvalueS.total.incompleteData).to.be(false);
                expect(data.equitywithloanvalueS.total.endVal).to.be.a('string');
                expect(data.equitywithloanvalueS.total.endVal).to.be("");
                expect(data.equitywithloanvalueS.total.startVal).to.be.a('string');
                expect(data.equitywithloanvalueS.total.startVal).to.be("");
              expect(data.equitywithloanvalueS.startDate).to.be.a('string');
              expect(data.equitywithloanvalueS.startDate).to.be("");
              {
                let dataCtr = data.equitywithloanvalueS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.equitywithloanvalueS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.equitywithloanvalueS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.equitywithloanvalueS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.equitywithloanvalueS.endDate).to.be.a('string');
              expect(data.equitywithloanvalueS.endDate).to.be("");
              expect(data.equitywithloanvalueS.hasExternalAccounts).to.be.a('boolean');
              expect(data.equitywithloanvalueS.hasExternalAccounts).to.be(false);
              expect(data.equitywithloanvalueS.rc).to.be.a('number');
              expect(data.equitywithloanvalueS.rc).to.be(0);
              expect(data.equitywithloanvalueS.currency).to.be.a('string');
              expect(data.equitywithloanvalueS.currency).to.be("");
              expect(data.equitywithloanvalueS.userId).to.be.a('string');
              expect(data.equitywithloanvalueS.userId).to.be("");
              expect(data.equitywithloanvalueS.pm).to.be.a('string');
              expect(data.equitywithloanvalueS.pm).to.be("");
              expect(data.equitywithloanvalueS.view).to.be.a('string');
              expect(data.equitywithloanvalueS.view).to.be("");
              expect(data.equitywithloanvalueS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.equitywithloanvalueS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.excessliquidity).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.excessliquidity.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.excessliquidity.total.chg).to.be.a('string');
                expect(data.excessliquidity.total.chg).to.be("");
                expect(data.excessliquidity.total.rtn).to.be.a('string');
                expect(data.excessliquidity.total.rtn).to.be("");
                expect(data.excessliquidity.total.incompleteData).to.be.a('boolean');
                expect(data.excessliquidity.total.incompleteData).to.be(false);
                expect(data.excessliquidity.total.endVal).to.be.a('string');
                expect(data.excessliquidity.total.endVal).to.be("");
                expect(data.excessliquidity.total.startVal).to.be.a('string');
                expect(data.excessliquidity.total.startVal).to.be("");
              expect(data.excessliquidity.startDate).to.be.a('string');
              expect(data.excessliquidity.startDate).to.be("");
              {
                let dataCtr = data.excessliquidity.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.excessliquidity.lastSuccessfulUpdate).to.be.a('string');
              expect(data.excessliquidity.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.excessliquidity.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.excessliquidity.endDate).to.be.a('string');
              expect(data.excessliquidity.endDate).to.be("");
              expect(data.excessliquidity.hasExternalAccounts).to.be.a('boolean');
              expect(data.excessliquidity.hasExternalAccounts).to.be(false);
              expect(data.excessliquidity.rc).to.be.a('number');
              expect(data.excessliquidity.rc).to.be(0);
              expect(data.excessliquidity.currency).to.be.a('string');
              expect(data.excessliquidity.currency).to.be("");
              expect(data.excessliquidity.userId).to.be.a('string');
              expect(data.excessliquidity.userId).to.be("");
              expect(data.excessliquidity.pm).to.be.a('string');
              expect(data.excessliquidity.pm).to.be("");
              expect(data.excessliquidity.view).to.be.a('string');
              expect(data.excessliquidity.view).to.be("");
              expect(data.excessliquidity.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.excessliquidity.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.excessliquidityC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.excessliquidityC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.excessliquidityC.total.chg).to.be.a('string');
                expect(data.excessliquidityC.total.chg).to.be("");
                expect(data.excessliquidityC.total.rtn).to.be.a('string');
                expect(data.excessliquidityC.total.rtn).to.be("");
                expect(data.excessliquidityC.total.incompleteData).to.be.a('boolean');
                expect(data.excessliquidityC.total.incompleteData).to.be(false);
                expect(data.excessliquidityC.total.endVal).to.be.a('string');
                expect(data.excessliquidityC.total.endVal).to.be("");
                expect(data.excessliquidityC.total.startVal).to.be.a('string');
                expect(data.excessliquidityC.total.startVal).to.be("");
              expect(data.excessliquidityC.startDate).to.be.a('string');
              expect(data.excessliquidityC.startDate).to.be("");
              {
                let dataCtr = data.excessliquidityC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.excessliquidityC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.excessliquidityC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.excessliquidityC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.excessliquidityC.endDate).to.be.a('string');
              expect(data.excessliquidityC.endDate).to.be("");
              expect(data.excessliquidityC.hasExternalAccounts).to.be.a('boolean');
              expect(data.excessliquidityC.hasExternalAccounts).to.be(false);
              expect(data.excessliquidityC.rc).to.be.a('number');
              expect(data.excessliquidityC.rc).to.be(0);
              expect(data.excessliquidityC.currency).to.be.a('string');
              expect(data.excessliquidityC.currency).to.be("");
              expect(data.excessliquidityC.userId).to.be.a('string');
              expect(data.excessliquidityC.userId).to.be("");
              expect(data.excessliquidityC.pm).to.be.a('string');
              expect(data.excessliquidityC.pm).to.be("");
              expect(data.excessliquidityC.view).to.be.a('string');
              expect(data.excessliquidityC.view).to.be("");
              expect(data.excessliquidityC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.excessliquidityC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.excessliquidityF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.excessliquidityF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.excessliquidityF.total.chg).to.be.a('string');
                expect(data.excessliquidityF.total.chg).to.be("");
                expect(data.excessliquidityF.total.rtn).to.be.a('string');
                expect(data.excessliquidityF.total.rtn).to.be("");
                expect(data.excessliquidityF.total.incompleteData).to.be.a('boolean');
                expect(data.excessliquidityF.total.incompleteData).to.be(false);
                expect(data.excessliquidityF.total.endVal).to.be.a('string');
                expect(data.excessliquidityF.total.endVal).to.be("");
                expect(data.excessliquidityF.total.startVal).to.be.a('string');
                expect(data.excessliquidityF.total.startVal).to.be("");
              expect(data.excessliquidityF.startDate).to.be.a('string');
              expect(data.excessliquidityF.startDate).to.be("");
              {
                let dataCtr = data.excessliquidityF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.excessliquidityF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.excessliquidityF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.excessliquidityF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.excessliquidityF.endDate).to.be.a('string');
              expect(data.excessliquidityF.endDate).to.be("");
              expect(data.excessliquidityF.hasExternalAccounts).to.be.a('boolean');
              expect(data.excessliquidityF.hasExternalAccounts).to.be(false);
              expect(data.excessliquidityF.rc).to.be.a('number');
              expect(data.excessliquidityF.rc).to.be(0);
              expect(data.excessliquidityF.currency).to.be.a('string');
              expect(data.excessliquidityF.currency).to.be("");
              expect(data.excessliquidityF.userId).to.be.a('string');
              expect(data.excessliquidityF.userId).to.be("");
              expect(data.excessliquidityF.pm).to.be.a('string');
              expect(data.excessliquidityF.pm).to.be("");
              expect(data.excessliquidityF.view).to.be.a('string');
              expect(data.excessliquidityF.view).to.be("");
              expect(data.excessliquidityF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.excessliquidityF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.excessliquidityS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.excessliquidityS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.excessliquidityS.total.chg).to.be.a('string');
                expect(data.excessliquidityS.total.chg).to.be("");
                expect(data.excessliquidityS.total.rtn).to.be.a('string');
                expect(data.excessliquidityS.total.rtn).to.be("");
                expect(data.excessliquidityS.total.incompleteData).to.be.a('boolean');
                expect(data.excessliquidityS.total.incompleteData).to.be(false);
                expect(data.excessliquidityS.total.endVal).to.be.a('string');
                expect(data.excessliquidityS.total.endVal).to.be("");
                expect(data.excessliquidityS.total.startVal).to.be.a('string');
                expect(data.excessliquidityS.total.startVal).to.be("");
              expect(data.excessliquidityS.startDate).to.be.a('string');
              expect(data.excessliquidityS.startDate).to.be("");
              {
                let dataCtr = data.excessliquidityS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.excessliquidityS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.excessliquidityS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.excessliquidityS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.excessliquidityS.endDate).to.be.a('string');
              expect(data.excessliquidityS.endDate).to.be("");
              expect(data.excessliquidityS.hasExternalAccounts).to.be.a('boolean');
              expect(data.excessliquidityS.hasExternalAccounts).to.be(false);
              expect(data.excessliquidityS.rc).to.be.a('number');
              expect(data.excessliquidityS.rc).to.be(0);
              expect(data.excessliquidityS.currency).to.be.a('string');
              expect(data.excessliquidityS.currency).to.be("");
              expect(data.excessliquidityS.userId).to.be.a('string');
              expect(data.excessliquidityS.userId).to.be("");
              expect(data.excessliquidityS.pm).to.be.a('string');
              expect(data.excessliquidityS.pm).to.be("");
              expect(data.excessliquidityS.view).to.be.a('string');
              expect(data.excessliquidityS.view).to.be("");
              expect(data.excessliquidityS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.excessliquidityS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullavailablefunds).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullavailablefunds.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullavailablefunds.total.chg).to.be.a('string');
                expect(data.fullavailablefunds.total.chg).to.be("");
                expect(data.fullavailablefunds.total.rtn).to.be.a('string');
                expect(data.fullavailablefunds.total.rtn).to.be("");
                expect(data.fullavailablefunds.total.incompleteData).to.be.a('boolean');
                expect(data.fullavailablefunds.total.incompleteData).to.be(false);
                expect(data.fullavailablefunds.total.endVal).to.be.a('string');
                expect(data.fullavailablefunds.total.endVal).to.be("");
                expect(data.fullavailablefunds.total.startVal).to.be.a('string');
                expect(data.fullavailablefunds.total.startVal).to.be("");
              expect(data.fullavailablefunds.startDate).to.be.a('string');
              expect(data.fullavailablefunds.startDate).to.be("");
              {
                let dataCtr = data.fullavailablefunds.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullavailablefunds.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullavailablefunds.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullavailablefunds.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullavailablefunds.endDate).to.be.a('string');
              expect(data.fullavailablefunds.endDate).to.be("");
              expect(data.fullavailablefunds.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullavailablefunds.hasExternalAccounts).to.be(false);
              expect(data.fullavailablefunds.rc).to.be.a('number');
              expect(data.fullavailablefunds.rc).to.be(0);
              expect(data.fullavailablefunds.currency).to.be.a('string');
              expect(data.fullavailablefunds.currency).to.be("");
              expect(data.fullavailablefunds.userId).to.be.a('string');
              expect(data.fullavailablefunds.userId).to.be("");
              expect(data.fullavailablefunds.pm).to.be.a('string');
              expect(data.fullavailablefunds.pm).to.be("");
              expect(data.fullavailablefunds.view).to.be.a('string');
              expect(data.fullavailablefunds.view).to.be("");
              expect(data.fullavailablefunds.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullavailablefunds.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullavailablefundsC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullavailablefundsC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullavailablefundsC.total.chg).to.be.a('string');
                expect(data.fullavailablefundsC.total.chg).to.be("");
                expect(data.fullavailablefundsC.total.rtn).to.be.a('string');
                expect(data.fullavailablefundsC.total.rtn).to.be("");
                expect(data.fullavailablefundsC.total.incompleteData).to.be.a('boolean');
                expect(data.fullavailablefundsC.total.incompleteData).to.be(false);
                expect(data.fullavailablefundsC.total.endVal).to.be.a('string');
                expect(data.fullavailablefundsC.total.endVal).to.be("");
                expect(data.fullavailablefundsC.total.startVal).to.be.a('string');
                expect(data.fullavailablefundsC.total.startVal).to.be("");
              expect(data.fullavailablefundsC.startDate).to.be.a('string');
              expect(data.fullavailablefundsC.startDate).to.be("");
              {
                let dataCtr = data.fullavailablefundsC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullavailablefundsC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullavailablefundsC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullavailablefundsC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullavailablefundsC.endDate).to.be.a('string');
              expect(data.fullavailablefundsC.endDate).to.be("");
              expect(data.fullavailablefundsC.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullavailablefundsC.hasExternalAccounts).to.be(false);
              expect(data.fullavailablefundsC.rc).to.be.a('number');
              expect(data.fullavailablefundsC.rc).to.be(0);
              expect(data.fullavailablefundsC.currency).to.be.a('string');
              expect(data.fullavailablefundsC.currency).to.be("");
              expect(data.fullavailablefundsC.userId).to.be.a('string');
              expect(data.fullavailablefundsC.userId).to.be("");
              expect(data.fullavailablefundsC.pm).to.be.a('string');
              expect(data.fullavailablefundsC.pm).to.be("");
              expect(data.fullavailablefundsC.view).to.be.a('string');
              expect(data.fullavailablefundsC.view).to.be("");
              expect(data.fullavailablefundsC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullavailablefundsC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullavailablefundsF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullavailablefundsF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullavailablefundsF.total.chg).to.be.a('string');
                expect(data.fullavailablefundsF.total.chg).to.be("");
                expect(data.fullavailablefundsF.total.rtn).to.be.a('string');
                expect(data.fullavailablefundsF.total.rtn).to.be("");
                expect(data.fullavailablefundsF.total.incompleteData).to.be.a('boolean');
                expect(data.fullavailablefundsF.total.incompleteData).to.be(false);
                expect(data.fullavailablefundsF.total.endVal).to.be.a('string');
                expect(data.fullavailablefundsF.total.endVal).to.be("");
                expect(data.fullavailablefundsF.total.startVal).to.be.a('string');
                expect(data.fullavailablefundsF.total.startVal).to.be("");
              expect(data.fullavailablefundsF.startDate).to.be.a('string');
              expect(data.fullavailablefundsF.startDate).to.be("");
              {
                let dataCtr = data.fullavailablefundsF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullavailablefundsF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullavailablefundsF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullavailablefundsF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullavailablefundsF.endDate).to.be.a('string');
              expect(data.fullavailablefundsF.endDate).to.be("");
              expect(data.fullavailablefundsF.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullavailablefundsF.hasExternalAccounts).to.be(false);
              expect(data.fullavailablefundsF.rc).to.be.a('number');
              expect(data.fullavailablefundsF.rc).to.be(0);
              expect(data.fullavailablefundsF.currency).to.be.a('string');
              expect(data.fullavailablefundsF.currency).to.be("");
              expect(data.fullavailablefundsF.userId).to.be.a('string');
              expect(data.fullavailablefundsF.userId).to.be("");
              expect(data.fullavailablefundsF.pm).to.be.a('string');
              expect(data.fullavailablefundsF.pm).to.be("");
              expect(data.fullavailablefundsF.view).to.be.a('string');
              expect(data.fullavailablefundsF.view).to.be("");
              expect(data.fullavailablefundsF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullavailablefundsF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullavailablefundsS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullavailablefundsS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullavailablefundsS.total.chg).to.be.a('string');
                expect(data.fullavailablefundsS.total.chg).to.be("");
                expect(data.fullavailablefundsS.total.rtn).to.be.a('string');
                expect(data.fullavailablefundsS.total.rtn).to.be("");
                expect(data.fullavailablefundsS.total.incompleteData).to.be.a('boolean');
                expect(data.fullavailablefundsS.total.incompleteData).to.be(false);
                expect(data.fullavailablefundsS.total.endVal).to.be.a('string');
                expect(data.fullavailablefundsS.total.endVal).to.be("");
                expect(data.fullavailablefundsS.total.startVal).to.be.a('string');
                expect(data.fullavailablefundsS.total.startVal).to.be("");
              expect(data.fullavailablefundsS.startDate).to.be.a('string');
              expect(data.fullavailablefundsS.startDate).to.be("");
              {
                let dataCtr = data.fullavailablefundsS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullavailablefundsS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullavailablefundsS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullavailablefundsS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullavailablefundsS.endDate).to.be.a('string');
              expect(data.fullavailablefundsS.endDate).to.be("");
              expect(data.fullavailablefundsS.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullavailablefundsS.hasExternalAccounts).to.be(false);
              expect(data.fullavailablefundsS.rc).to.be.a('number');
              expect(data.fullavailablefundsS.rc).to.be(0);
              expect(data.fullavailablefundsS.currency).to.be.a('string');
              expect(data.fullavailablefundsS.currency).to.be("");
              expect(data.fullavailablefundsS.userId).to.be.a('string');
              expect(data.fullavailablefundsS.userId).to.be("");
              expect(data.fullavailablefundsS.pm).to.be.a('string');
              expect(data.fullavailablefundsS.pm).to.be("");
              expect(data.fullavailablefundsS.view).to.be.a('string');
              expect(data.fullavailablefundsS.view).to.be("");
              expect(data.fullavailablefundsS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullavailablefundsS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullexcessliquidity).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullexcessliquidity.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullexcessliquidity.total.chg).to.be.a('string');
                expect(data.fullexcessliquidity.total.chg).to.be("");
                expect(data.fullexcessliquidity.total.rtn).to.be.a('string');
                expect(data.fullexcessliquidity.total.rtn).to.be("");
                expect(data.fullexcessliquidity.total.incompleteData).to.be.a('boolean');
                expect(data.fullexcessliquidity.total.incompleteData).to.be(false);
                expect(data.fullexcessliquidity.total.endVal).to.be.a('string');
                expect(data.fullexcessliquidity.total.endVal).to.be("");
                expect(data.fullexcessliquidity.total.startVal).to.be.a('string');
                expect(data.fullexcessliquidity.total.startVal).to.be("");
              expect(data.fullexcessliquidity.startDate).to.be.a('string');
              expect(data.fullexcessliquidity.startDate).to.be("");
              {
                let dataCtr = data.fullexcessliquidity.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullexcessliquidity.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullexcessliquidity.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullexcessliquidity.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullexcessliquidity.endDate).to.be.a('string');
              expect(data.fullexcessliquidity.endDate).to.be("");
              expect(data.fullexcessliquidity.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullexcessliquidity.hasExternalAccounts).to.be(false);
              expect(data.fullexcessliquidity.rc).to.be.a('number');
              expect(data.fullexcessliquidity.rc).to.be(0);
              expect(data.fullexcessliquidity.currency).to.be.a('string');
              expect(data.fullexcessliquidity.currency).to.be("");
              expect(data.fullexcessliquidity.userId).to.be.a('string');
              expect(data.fullexcessliquidity.userId).to.be("");
              expect(data.fullexcessliquidity.pm).to.be.a('string');
              expect(data.fullexcessliquidity.pm).to.be("");
              expect(data.fullexcessliquidity.view).to.be.a('string');
              expect(data.fullexcessliquidity.view).to.be("");
              expect(data.fullexcessliquidity.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullexcessliquidity.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullexcessliquidityC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullexcessliquidityC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullexcessliquidityC.total.chg).to.be.a('string');
                expect(data.fullexcessliquidityC.total.chg).to.be("");
                expect(data.fullexcessliquidityC.total.rtn).to.be.a('string');
                expect(data.fullexcessliquidityC.total.rtn).to.be("");
                expect(data.fullexcessliquidityC.total.incompleteData).to.be.a('boolean');
                expect(data.fullexcessliquidityC.total.incompleteData).to.be(false);
                expect(data.fullexcessliquidityC.total.endVal).to.be.a('string');
                expect(data.fullexcessliquidityC.total.endVal).to.be("");
                expect(data.fullexcessliquidityC.total.startVal).to.be.a('string');
                expect(data.fullexcessliquidityC.total.startVal).to.be("");
              expect(data.fullexcessliquidityC.startDate).to.be.a('string');
              expect(data.fullexcessliquidityC.startDate).to.be("");
              {
                let dataCtr = data.fullexcessliquidityC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullexcessliquidityC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullexcessliquidityC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullexcessliquidityC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullexcessliquidityC.endDate).to.be.a('string');
              expect(data.fullexcessliquidityC.endDate).to.be("");
              expect(data.fullexcessliquidityC.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullexcessliquidityC.hasExternalAccounts).to.be(false);
              expect(data.fullexcessliquidityC.rc).to.be.a('number');
              expect(data.fullexcessliquidityC.rc).to.be(0);
              expect(data.fullexcessliquidityC.currency).to.be.a('string');
              expect(data.fullexcessliquidityC.currency).to.be("");
              expect(data.fullexcessliquidityC.userId).to.be.a('string');
              expect(data.fullexcessliquidityC.userId).to.be("");
              expect(data.fullexcessliquidityC.pm).to.be.a('string');
              expect(data.fullexcessliquidityC.pm).to.be("");
              expect(data.fullexcessliquidityC.view).to.be.a('string');
              expect(data.fullexcessliquidityC.view).to.be("");
              expect(data.fullexcessliquidityC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullexcessliquidityC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullexcessliquidityF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullexcessliquidityF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullexcessliquidityF.total.chg).to.be.a('string');
                expect(data.fullexcessliquidityF.total.chg).to.be("");
                expect(data.fullexcessliquidityF.total.rtn).to.be.a('string');
                expect(data.fullexcessliquidityF.total.rtn).to.be("");
                expect(data.fullexcessliquidityF.total.incompleteData).to.be.a('boolean');
                expect(data.fullexcessliquidityF.total.incompleteData).to.be(false);
                expect(data.fullexcessliquidityF.total.endVal).to.be.a('string');
                expect(data.fullexcessliquidityF.total.endVal).to.be("");
                expect(data.fullexcessliquidityF.total.startVal).to.be.a('string');
                expect(data.fullexcessliquidityF.total.startVal).to.be("");
              expect(data.fullexcessliquidityF.startDate).to.be.a('string');
              expect(data.fullexcessliquidityF.startDate).to.be("");
              {
                let dataCtr = data.fullexcessliquidityF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullexcessliquidityF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullexcessliquidityF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullexcessliquidityF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullexcessliquidityF.endDate).to.be.a('string');
              expect(data.fullexcessliquidityF.endDate).to.be("");
              expect(data.fullexcessliquidityF.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullexcessliquidityF.hasExternalAccounts).to.be(false);
              expect(data.fullexcessliquidityF.rc).to.be.a('number');
              expect(data.fullexcessliquidityF.rc).to.be(0);
              expect(data.fullexcessliquidityF.currency).to.be.a('string');
              expect(data.fullexcessliquidityF.currency).to.be("");
              expect(data.fullexcessliquidityF.userId).to.be.a('string');
              expect(data.fullexcessliquidityF.userId).to.be("");
              expect(data.fullexcessliquidityF.pm).to.be.a('string');
              expect(data.fullexcessliquidityF.pm).to.be("");
              expect(data.fullexcessliquidityF.view).to.be.a('string');
              expect(data.fullexcessliquidityF.view).to.be("");
              expect(data.fullexcessliquidityF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullexcessliquidityF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullexcessliquidityS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullexcessliquidityS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullexcessliquidityS.total.chg).to.be.a('string');
                expect(data.fullexcessliquidityS.total.chg).to.be("");
                expect(data.fullexcessliquidityS.total.rtn).to.be.a('string');
                expect(data.fullexcessliquidityS.total.rtn).to.be("");
                expect(data.fullexcessliquidityS.total.incompleteData).to.be.a('boolean');
                expect(data.fullexcessliquidityS.total.incompleteData).to.be(false);
                expect(data.fullexcessliquidityS.total.endVal).to.be.a('string');
                expect(data.fullexcessliquidityS.total.endVal).to.be("");
                expect(data.fullexcessliquidityS.total.startVal).to.be.a('string');
                expect(data.fullexcessliquidityS.total.startVal).to.be("");
              expect(data.fullexcessliquidityS.startDate).to.be.a('string');
              expect(data.fullexcessliquidityS.startDate).to.be("");
              {
                let dataCtr = data.fullexcessliquidityS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullexcessliquidityS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullexcessliquidityS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullexcessliquidityS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullexcessliquidityS.endDate).to.be.a('string');
              expect(data.fullexcessliquidityS.endDate).to.be("");
              expect(data.fullexcessliquidityS.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullexcessliquidityS.hasExternalAccounts).to.be(false);
              expect(data.fullexcessliquidityS.rc).to.be.a('number');
              expect(data.fullexcessliquidityS.rc).to.be(0);
              expect(data.fullexcessliquidityS.currency).to.be.a('string');
              expect(data.fullexcessliquidityS.currency).to.be("");
              expect(data.fullexcessliquidityS.userId).to.be.a('string');
              expect(data.fullexcessliquidityS.userId).to.be("");
              expect(data.fullexcessliquidityS.pm).to.be.a('string');
              expect(data.fullexcessliquidityS.pm).to.be("");
              expect(data.fullexcessliquidityS.view).to.be.a('string');
              expect(data.fullexcessliquidityS.view).to.be("");
              expect(data.fullexcessliquidityS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullexcessliquidityS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullinitmarginreq).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullinitmarginreq.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullinitmarginreq.total.chg).to.be.a('string');
                expect(data.fullinitmarginreq.total.chg).to.be("");
                expect(data.fullinitmarginreq.total.rtn).to.be.a('string');
                expect(data.fullinitmarginreq.total.rtn).to.be("");
                expect(data.fullinitmarginreq.total.incompleteData).to.be.a('boolean');
                expect(data.fullinitmarginreq.total.incompleteData).to.be(false);
                expect(data.fullinitmarginreq.total.endVal).to.be.a('string');
                expect(data.fullinitmarginreq.total.endVal).to.be("");
                expect(data.fullinitmarginreq.total.startVal).to.be.a('string');
                expect(data.fullinitmarginreq.total.startVal).to.be("");
              expect(data.fullinitmarginreq.startDate).to.be.a('string');
              expect(data.fullinitmarginreq.startDate).to.be("");
              {
                let dataCtr = data.fullinitmarginreq.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullinitmarginreq.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullinitmarginreq.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullinitmarginreq.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullinitmarginreq.endDate).to.be.a('string');
              expect(data.fullinitmarginreq.endDate).to.be("");
              expect(data.fullinitmarginreq.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullinitmarginreq.hasExternalAccounts).to.be(false);
              expect(data.fullinitmarginreq.rc).to.be.a('number');
              expect(data.fullinitmarginreq.rc).to.be(0);
              expect(data.fullinitmarginreq.currency).to.be.a('string');
              expect(data.fullinitmarginreq.currency).to.be("");
              expect(data.fullinitmarginreq.userId).to.be.a('string');
              expect(data.fullinitmarginreq.userId).to.be("");
              expect(data.fullinitmarginreq.pm).to.be.a('string');
              expect(data.fullinitmarginreq.pm).to.be("");
              expect(data.fullinitmarginreq.view).to.be.a('string');
              expect(data.fullinitmarginreq.view).to.be("");
              expect(data.fullinitmarginreq.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullinitmarginreq.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullinitmarginreqC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullinitmarginreqC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullinitmarginreqC.total.chg).to.be.a('string');
                expect(data.fullinitmarginreqC.total.chg).to.be("");
                expect(data.fullinitmarginreqC.total.rtn).to.be.a('string');
                expect(data.fullinitmarginreqC.total.rtn).to.be("");
                expect(data.fullinitmarginreqC.total.incompleteData).to.be.a('boolean');
                expect(data.fullinitmarginreqC.total.incompleteData).to.be(false);
                expect(data.fullinitmarginreqC.total.endVal).to.be.a('string');
                expect(data.fullinitmarginreqC.total.endVal).to.be("");
                expect(data.fullinitmarginreqC.total.startVal).to.be.a('string');
                expect(data.fullinitmarginreqC.total.startVal).to.be("");
              expect(data.fullinitmarginreqC.startDate).to.be.a('string');
              expect(data.fullinitmarginreqC.startDate).to.be("");
              {
                let dataCtr = data.fullinitmarginreqC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullinitmarginreqC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullinitmarginreqC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullinitmarginreqC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullinitmarginreqC.endDate).to.be.a('string');
              expect(data.fullinitmarginreqC.endDate).to.be("");
              expect(data.fullinitmarginreqC.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullinitmarginreqC.hasExternalAccounts).to.be(false);
              expect(data.fullinitmarginreqC.rc).to.be.a('number');
              expect(data.fullinitmarginreqC.rc).to.be(0);
              expect(data.fullinitmarginreqC.currency).to.be.a('string');
              expect(data.fullinitmarginreqC.currency).to.be("");
              expect(data.fullinitmarginreqC.userId).to.be.a('string');
              expect(data.fullinitmarginreqC.userId).to.be("");
              expect(data.fullinitmarginreqC.pm).to.be.a('string');
              expect(data.fullinitmarginreqC.pm).to.be("");
              expect(data.fullinitmarginreqC.view).to.be.a('string');
              expect(data.fullinitmarginreqC.view).to.be("");
              expect(data.fullinitmarginreqC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullinitmarginreqC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullinitmarginreqF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullinitmarginreqF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullinitmarginreqF.total.chg).to.be.a('string');
                expect(data.fullinitmarginreqF.total.chg).to.be("");
                expect(data.fullinitmarginreqF.total.rtn).to.be.a('string');
                expect(data.fullinitmarginreqF.total.rtn).to.be("");
                expect(data.fullinitmarginreqF.total.incompleteData).to.be.a('boolean');
                expect(data.fullinitmarginreqF.total.incompleteData).to.be(false);
                expect(data.fullinitmarginreqF.total.endVal).to.be.a('string');
                expect(data.fullinitmarginreqF.total.endVal).to.be("");
                expect(data.fullinitmarginreqF.total.startVal).to.be.a('string');
                expect(data.fullinitmarginreqF.total.startVal).to.be("");
              expect(data.fullinitmarginreqF.startDate).to.be.a('string');
              expect(data.fullinitmarginreqF.startDate).to.be("");
              {
                let dataCtr = data.fullinitmarginreqF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullinitmarginreqF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullinitmarginreqF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullinitmarginreqF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullinitmarginreqF.endDate).to.be.a('string');
              expect(data.fullinitmarginreqF.endDate).to.be("");
              expect(data.fullinitmarginreqF.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullinitmarginreqF.hasExternalAccounts).to.be(false);
              expect(data.fullinitmarginreqF.rc).to.be.a('number');
              expect(data.fullinitmarginreqF.rc).to.be(0);
              expect(data.fullinitmarginreqF.currency).to.be.a('string');
              expect(data.fullinitmarginreqF.currency).to.be("");
              expect(data.fullinitmarginreqF.userId).to.be.a('string');
              expect(data.fullinitmarginreqF.userId).to.be("");
              expect(data.fullinitmarginreqF.pm).to.be.a('string');
              expect(data.fullinitmarginreqF.pm).to.be("");
              expect(data.fullinitmarginreqF.view).to.be.a('string');
              expect(data.fullinitmarginreqF.view).to.be("");
              expect(data.fullinitmarginreqF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullinitmarginreqF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullinitmarginreqS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullinitmarginreqS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullinitmarginreqS.total.chg).to.be.a('string');
                expect(data.fullinitmarginreqS.total.chg).to.be("");
                expect(data.fullinitmarginreqS.total.rtn).to.be.a('string');
                expect(data.fullinitmarginreqS.total.rtn).to.be("");
                expect(data.fullinitmarginreqS.total.incompleteData).to.be.a('boolean');
                expect(data.fullinitmarginreqS.total.incompleteData).to.be(false);
                expect(data.fullinitmarginreqS.total.endVal).to.be.a('string');
                expect(data.fullinitmarginreqS.total.endVal).to.be("");
                expect(data.fullinitmarginreqS.total.startVal).to.be.a('string');
                expect(data.fullinitmarginreqS.total.startVal).to.be("");
              expect(data.fullinitmarginreqS.startDate).to.be.a('string');
              expect(data.fullinitmarginreqS.startDate).to.be("");
              {
                let dataCtr = data.fullinitmarginreqS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullinitmarginreqS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullinitmarginreqS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullinitmarginreqS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullinitmarginreqS.endDate).to.be.a('string');
              expect(data.fullinitmarginreqS.endDate).to.be("");
              expect(data.fullinitmarginreqS.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullinitmarginreqS.hasExternalAccounts).to.be(false);
              expect(data.fullinitmarginreqS.rc).to.be.a('number');
              expect(data.fullinitmarginreqS.rc).to.be(0);
              expect(data.fullinitmarginreqS.currency).to.be.a('string');
              expect(data.fullinitmarginreqS.currency).to.be("");
              expect(data.fullinitmarginreqS.userId).to.be.a('string');
              expect(data.fullinitmarginreqS.userId).to.be("");
              expect(data.fullinitmarginreqS.pm).to.be.a('string');
              expect(data.fullinitmarginreqS.pm).to.be("");
              expect(data.fullinitmarginreqS.view).to.be.a('string');
              expect(data.fullinitmarginreqS.view).to.be("");
              expect(data.fullinitmarginreqS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullinitmarginreqS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullmaintmarginreq).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullmaintmarginreq.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullmaintmarginreq.total.chg).to.be.a('string');
                expect(data.fullmaintmarginreq.total.chg).to.be("");
                expect(data.fullmaintmarginreq.total.rtn).to.be.a('string');
                expect(data.fullmaintmarginreq.total.rtn).to.be("");
                expect(data.fullmaintmarginreq.total.incompleteData).to.be.a('boolean');
                expect(data.fullmaintmarginreq.total.incompleteData).to.be(false);
                expect(data.fullmaintmarginreq.total.endVal).to.be.a('string');
                expect(data.fullmaintmarginreq.total.endVal).to.be("");
                expect(data.fullmaintmarginreq.total.startVal).to.be.a('string');
                expect(data.fullmaintmarginreq.total.startVal).to.be("");
              expect(data.fullmaintmarginreq.startDate).to.be.a('string');
              expect(data.fullmaintmarginreq.startDate).to.be("");
              {
                let dataCtr = data.fullmaintmarginreq.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullmaintmarginreq.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullmaintmarginreq.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullmaintmarginreq.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullmaintmarginreq.endDate).to.be.a('string');
              expect(data.fullmaintmarginreq.endDate).to.be("");
              expect(data.fullmaintmarginreq.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullmaintmarginreq.hasExternalAccounts).to.be(false);
              expect(data.fullmaintmarginreq.rc).to.be.a('number');
              expect(data.fullmaintmarginreq.rc).to.be(0);
              expect(data.fullmaintmarginreq.currency).to.be.a('string');
              expect(data.fullmaintmarginreq.currency).to.be("");
              expect(data.fullmaintmarginreq.userId).to.be.a('string');
              expect(data.fullmaintmarginreq.userId).to.be("");
              expect(data.fullmaintmarginreq.pm).to.be.a('string');
              expect(data.fullmaintmarginreq.pm).to.be("");
              expect(data.fullmaintmarginreq.view).to.be.a('string');
              expect(data.fullmaintmarginreq.view).to.be("");
              expect(data.fullmaintmarginreq.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullmaintmarginreq.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullmaintmarginreqC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullmaintmarginreqC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullmaintmarginreqC.total.chg).to.be.a('string');
                expect(data.fullmaintmarginreqC.total.chg).to.be("");
                expect(data.fullmaintmarginreqC.total.rtn).to.be.a('string');
                expect(data.fullmaintmarginreqC.total.rtn).to.be("");
                expect(data.fullmaintmarginreqC.total.incompleteData).to.be.a('boolean');
                expect(data.fullmaintmarginreqC.total.incompleteData).to.be(false);
                expect(data.fullmaintmarginreqC.total.endVal).to.be.a('string');
                expect(data.fullmaintmarginreqC.total.endVal).to.be("");
                expect(data.fullmaintmarginreqC.total.startVal).to.be.a('string');
                expect(data.fullmaintmarginreqC.total.startVal).to.be("");
              expect(data.fullmaintmarginreqC.startDate).to.be.a('string');
              expect(data.fullmaintmarginreqC.startDate).to.be("");
              {
                let dataCtr = data.fullmaintmarginreqC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullmaintmarginreqC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullmaintmarginreqC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullmaintmarginreqC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullmaintmarginreqC.endDate).to.be.a('string');
              expect(data.fullmaintmarginreqC.endDate).to.be("");
              expect(data.fullmaintmarginreqC.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullmaintmarginreqC.hasExternalAccounts).to.be(false);
              expect(data.fullmaintmarginreqC.rc).to.be.a('number');
              expect(data.fullmaintmarginreqC.rc).to.be(0);
              expect(data.fullmaintmarginreqC.currency).to.be.a('string');
              expect(data.fullmaintmarginreqC.currency).to.be("");
              expect(data.fullmaintmarginreqC.userId).to.be.a('string');
              expect(data.fullmaintmarginreqC.userId).to.be("");
              expect(data.fullmaintmarginreqC.pm).to.be.a('string');
              expect(data.fullmaintmarginreqC.pm).to.be("");
              expect(data.fullmaintmarginreqC.view).to.be.a('string');
              expect(data.fullmaintmarginreqC.view).to.be("");
              expect(data.fullmaintmarginreqC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullmaintmarginreqC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullmaintmarginreqF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullmaintmarginreqF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullmaintmarginreqF.total.chg).to.be.a('string');
                expect(data.fullmaintmarginreqF.total.chg).to.be("");
                expect(data.fullmaintmarginreqF.total.rtn).to.be.a('string');
                expect(data.fullmaintmarginreqF.total.rtn).to.be("");
                expect(data.fullmaintmarginreqF.total.incompleteData).to.be.a('boolean');
                expect(data.fullmaintmarginreqF.total.incompleteData).to.be(false);
                expect(data.fullmaintmarginreqF.total.endVal).to.be.a('string');
                expect(data.fullmaintmarginreqF.total.endVal).to.be("");
                expect(data.fullmaintmarginreqF.total.startVal).to.be.a('string');
                expect(data.fullmaintmarginreqF.total.startVal).to.be("");
              expect(data.fullmaintmarginreqF.startDate).to.be.a('string');
              expect(data.fullmaintmarginreqF.startDate).to.be("");
              {
                let dataCtr = data.fullmaintmarginreqF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullmaintmarginreqF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullmaintmarginreqF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullmaintmarginreqF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullmaintmarginreqF.endDate).to.be.a('string');
              expect(data.fullmaintmarginreqF.endDate).to.be("");
              expect(data.fullmaintmarginreqF.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullmaintmarginreqF.hasExternalAccounts).to.be(false);
              expect(data.fullmaintmarginreqF.rc).to.be.a('number');
              expect(data.fullmaintmarginreqF.rc).to.be(0);
              expect(data.fullmaintmarginreqF.currency).to.be.a('string');
              expect(data.fullmaintmarginreqF.currency).to.be("");
              expect(data.fullmaintmarginreqF.userId).to.be.a('string');
              expect(data.fullmaintmarginreqF.userId).to.be("");
              expect(data.fullmaintmarginreqF.pm).to.be.a('string');
              expect(data.fullmaintmarginreqF.pm).to.be("");
              expect(data.fullmaintmarginreqF.view).to.be.a('string');
              expect(data.fullmaintmarginreqF.view).to.be("");
              expect(data.fullmaintmarginreqF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullmaintmarginreqF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.fullmaintmarginreqS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.fullmaintmarginreqS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.fullmaintmarginreqS.total.chg).to.be.a('string');
                expect(data.fullmaintmarginreqS.total.chg).to.be("");
                expect(data.fullmaintmarginreqS.total.rtn).to.be.a('string');
                expect(data.fullmaintmarginreqS.total.rtn).to.be("");
                expect(data.fullmaintmarginreqS.total.incompleteData).to.be.a('boolean');
                expect(data.fullmaintmarginreqS.total.incompleteData).to.be(false);
                expect(data.fullmaintmarginreqS.total.endVal).to.be.a('string');
                expect(data.fullmaintmarginreqS.total.endVal).to.be("");
                expect(data.fullmaintmarginreqS.total.startVal).to.be.a('string');
                expect(data.fullmaintmarginreqS.total.startVal).to.be("");
              expect(data.fullmaintmarginreqS.startDate).to.be.a('string');
              expect(data.fullmaintmarginreqS.startDate).to.be("");
              {
                let dataCtr = data.fullmaintmarginreqS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.fullmaintmarginreqS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.fullmaintmarginreqS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.fullmaintmarginreqS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.fullmaintmarginreqS.endDate).to.be.a('string');
              expect(data.fullmaintmarginreqS.endDate).to.be("");
              expect(data.fullmaintmarginreqS.hasExternalAccounts).to.be.a('boolean');
              expect(data.fullmaintmarginreqS.hasExternalAccounts).to.be(false);
              expect(data.fullmaintmarginreqS.rc).to.be.a('number');
              expect(data.fullmaintmarginreqS.rc).to.be(0);
              expect(data.fullmaintmarginreqS.currency).to.be.a('string');
              expect(data.fullmaintmarginreqS.currency).to.be("");
              expect(data.fullmaintmarginreqS.userId).to.be.a('string');
              expect(data.fullmaintmarginreqS.userId).to.be("");
              expect(data.fullmaintmarginreqS.pm).to.be.a('string');
              expect(data.fullmaintmarginreqS.pm).to.be("");
              expect(data.fullmaintmarginreqS.view).to.be.a('string');
              expect(data.fullmaintmarginreqS.view).to.be("");
              expect(data.fullmaintmarginreqS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.fullmaintmarginreqS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.grosspositionvalue).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.grosspositionvalue.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.grosspositionvalue.total.chg).to.be.a('string');
                expect(data.grosspositionvalue.total.chg).to.be("");
                expect(data.grosspositionvalue.total.rtn).to.be.a('string');
                expect(data.grosspositionvalue.total.rtn).to.be("");
                expect(data.grosspositionvalue.total.incompleteData).to.be.a('boolean');
                expect(data.grosspositionvalue.total.incompleteData).to.be(false);
                expect(data.grosspositionvalue.total.endVal).to.be.a('string');
                expect(data.grosspositionvalue.total.endVal).to.be("");
                expect(data.grosspositionvalue.total.startVal).to.be.a('string');
                expect(data.grosspositionvalue.total.startVal).to.be("");
              expect(data.grosspositionvalue.startDate).to.be.a('string');
              expect(data.grosspositionvalue.startDate).to.be("");
              {
                let dataCtr = data.grosspositionvalue.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.grosspositionvalue.lastSuccessfulUpdate).to.be.a('string');
              expect(data.grosspositionvalue.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.grosspositionvalue.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.grosspositionvalue.endDate).to.be.a('string');
              expect(data.grosspositionvalue.endDate).to.be("");
              expect(data.grosspositionvalue.hasExternalAccounts).to.be.a('boolean');
              expect(data.grosspositionvalue.hasExternalAccounts).to.be(false);
              expect(data.grosspositionvalue.rc).to.be.a('number');
              expect(data.grosspositionvalue.rc).to.be(0);
              expect(data.grosspositionvalue.currency).to.be.a('string');
              expect(data.grosspositionvalue.currency).to.be("");
              expect(data.grosspositionvalue.userId).to.be.a('string');
              expect(data.grosspositionvalue.userId).to.be("");
              expect(data.grosspositionvalue.pm).to.be.a('string');
              expect(data.grosspositionvalue.pm).to.be("");
              expect(data.grosspositionvalue.view).to.be.a('string');
              expect(data.grosspositionvalue.view).to.be("");
              expect(data.grosspositionvalue.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.grosspositionvalue.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.grosspositionvalueC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.grosspositionvalueC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.grosspositionvalueC.total.chg).to.be.a('string');
                expect(data.grosspositionvalueC.total.chg).to.be("");
                expect(data.grosspositionvalueC.total.rtn).to.be.a('string');
                expect(data.grosspositionvalueC.total.rtn).to.be("");
                expect(data.grosspositionvalueC.total.incompleteData).to.be.a('boolean');
                expect(data.grosspositionvalueC.total.incompleteData).to.be(false);
                expect(data.grosspositionvalueC.total.endVal).to.be.a('string');
                expect(data.grosspositionvalueC.total.endVal).to.be("");
                expect(data.grosspositionvalueC.total.startVal).to.be.a('string');
                expect(data.grosspositionvalueC.total.startVal).to.be("");
              expect(data.grosspositionvalueC.startDate).to.be.a('string');
              expect(data.grosspositionvalueC.startDate).to.be("");
              {
                let dataCtr = data.grosspositionvalueC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.grosspositionvalueC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.grosspositionvalueC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.grosspositionvalueC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.grosspositionvalueC.endDate).to.be.a('string');
              expect(data.grosspositionvalueC.endDate).to.be("");
              expect(data.grosspositionvalueC.hasExternalAccounts).to.be.a('boolean');
              expect(data.grosspositionvalueC.hasExternalAccounts).to.be(false);
              expect(data.grosspositionvalueC.rc).to.be.a('number');
              expect(data.grosspositionvalueC.rc).to.be(0);
              expect(data.grosspositionvalueC.currency).to.be.a('string');
              expect(data.grosspositionvalueC.currency).to.be("");
              expect(data.grosspositionvalueC.userId).to.be.a('string');
              expect(data.grosspositionvalueC.userId).to.be("");
              expect(data.grosspositionvalueC.pm).to.be.a('string');
              expect(data.grosspositionvalueC.pm).to.be("");
              expect(data.grosspositionvalueC.view).to.be.a('string');
              expect(data.grosspositionvalueC.view).to.be("");
              expect(data.grosspositionvalueC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.grosspositionvalueC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.grosspositionvalueF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.grosspositionvalueF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.grosspositionvalueF.total.chg).to.be.a('string');
                expect(data.grosspositionvalueF.total.chg).to.be("");
                expect(data.grosspositionvalueF.total.rtn).to.be.a('string');
                expect(data.grosspositionvalueF.total.rtn).to.be("");
                expect(data.grosspositionvalueF.total.incompleteData).to.be.a('boolean');
                expect(data.grosspositionvalueF.total.incompleteData).to.be(false);
                expect(data.grosspositionvalueF.total.endVal).to.be.a('string');
                expect(data.grosspositionvalueF.total.endVal).to.be("");
                expect(data.grosspositionvalueF.total.startVal).to.be.a('string');
                expect(data.grosspositionvalueF.total.startVal).to.be("");
              expect(data.grosspositionvalueF.startDate).to.be.a('string');
              expect(data.grosspositionvalueF.startDate).to.be("");
              {
                let dataCtr = data.grosspositionvalueF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.grosspositionvalueF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.grosspositionvalueF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.grosspositionvalueF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.grosspositionvalueF.endDate).to.be.a('string');
              expect(data.grosspositionvalueF.endDate).to.be("");
              expect(data.grosspositionvalueF.hasExternalAccounts).to.be.a('boolean');
              expect(data.grosspositionvalueF.hasExternalAccounts).to.be(false);
              expect(data.grosspositionvalueF.rc).to.be.a('number');
              expect(data.grosspositionvalueF.rc).to.be(0);
              expect(data.grosspositionvalueF.currency).to.be.a('string');
              expect(data.grosspositionvalueF.currency).to.be("");
              expect(data.grosspositionvalueF.userId).to.be.a('string');
              expect(data.grosspositionvalueF.userId).to.be("");
              expect(data.grosspositionvalueF.pm).to.be.a('string');
              expect(data.grosspositionvalueF.pm).to.be("");
              expect(data.grosspositionvalueF.view).to.be.a('string');
              expect(data.grosspositionvalueF.view).to.be("");
              expect(data.grosspositionvalueF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.grosspositionvalueF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.grosspositionvalueS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.grosspositionvalueS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.grosspositionvalueS.total.chg).to.be.a('string');
                expect(data.grosspositionvalueS.total.chg).to.be("");
                expect(data.grosspositionvalueS.total.rtn).to.be.a('string');
                expect(data.grosspositionvalueS.total.rtn).to.be("");
                expect(data.grosspositionvalueS.total.incompleteData).to.be.a('boolean');
                expect(data.grosspositionvalueS.total.incompleteData).to.be(false);
                expect(data.grosspositionvalueS.total.endVal).to.be.a('string');
                expect(data.grosspositionvalueS.total.endVal).to.be("");
                expect(data.grosspositionvalueS.total.startVal).to.be.a('string');
                expect(data.grosspositionvalueS.total.startVal).to.be("");
              expect(data.grosspositionvalueS.startDate).to.be.a('string');
              expect(data.grosspositionvalueS.startDate).to.be("");
              {
                let dataCtr = data.grosspositionvalueS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.grosspositionvalueS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.grosspositionvalueS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.grosspositionvalueS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.grosspositionvalueS.endDate).to.be.a('string');
              expect(data.grosspositionvalueS.endDate).to.be("");
              expect(data.grosspositionvalueS.hasExternalAccounts).to.be.a('boolean');
              expect(data.grosspositionvalueS.hasExternalAccounts).to.be(false);
              expect(data.grosspositionvalueS.rc).to.be.a('number');
              expect(data.grosspositionvalueS.rc).to.be(0);
              expect(data.grosspositionvalueS.currency).to.be.a('string');
              expect(data.grosspositionvalueS.currency).to.be("");
              expect(data.grosspositionvalueS.userId).to.be.a('string');
              expect(data.grosspositionvalueS.userId).to.be("");
              expect(data.grosspositionvalueS.pm).to.be.a('string');
              expect(data.grosspositionvalueS.pm).to.be("");
              expect(data.grosspositionvalueS.view).to.be.a('string');
              expect(data.grosspositionvalueS.view).to.be("");
              expect(data.grosspositionvalueS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.grosspositionvalueS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.guarantee).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.guarantee.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.guarantee.total.chg).to.be.a('string');
                expect(data.guarantee.total.chg).to.be("");
                expect(data.guarantee.total.rtn).to.be.a('string');
                expect(data.guarantee.total.rtn).to.be("");
                expect(data.guarantee.total.incompleteData).to.be.a('boolean');
                expect(data.guarantee.total.incompleteData).to.be(false);
                expect(data.guarantee.total.endVal).to.be.a('string');
                expect(data.guarantee.total.endVal).to.be("");
                expect(data.guarantee.total.startVal).to.be.a('string');
                expect(data.guarantee.total.startVal).to.be("");
              expect(data.guarantee.startDate).to.be.a('string');
              expect(data.guarantee.startDate).to.be("");
              {
                let dataCtr = data.guarantee.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.guarantee.lastSuccessfulUpdate).to.be.a('string');
              expect(data.guarantee.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.guarantee.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.guarantee.endDate).to.be.a('string');
              expect(data.guarantee.endDate).to.be("");
              expect(data.guarantee.hasExternalAccounts).to.be.a('boolean');
              expect(data.guarantee.hasExternalAccounts).to.be(false);
              expect(data.guarantee.rc).to.be.a('number');
              expect(data.guarantee.rc).to.be(0);
              expect(data.guarantee.currency).to.be.a('string');
              expect(data.guarantee.currency).to.be("");
              expect(data.guarantee.userId).to.be.a('string');
              expect(data.guarantee.userId).to.be("");
              expect(data.guarantee.pm).to.be.a('string');
              expect(data.guarantee.pm).to.be("");
              expect(data.guarantee.view).to.be.a('string');
              expect(data.guarantee.view).to.be("");
              expect(data.guarantee.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.guarantee.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.guaranteeC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.guaranteeC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.guaranteeC.total.chg).to.be.a('string');
                expect(data.guaranteeC.total.chg).to.be("");
                expect(data.guaranteeC.total.rtn).to.be.a('string');
                expect(data.guaranteeC.total.rtn).to.be("");
                expect(data.guaranteeC.total.incompleteData).to.be.a('boolean');
                expect(data.guaranteeC.total.incompleteData).to.be(false);
                expect(data.guaranteeC.total.endVal).to.be.a('string');
                expect(data.guaranteeC.total.endVal).to.be("");
                expect(data.guaranteeC.total.startVal).to.be.a('string');
                expect(data.guaranteeC.total.startVal).to.be("");
              expect(data.guaranteeC.startDate).to.be.a('string');
              expect(data.guaranteeC.startDate).to.be("");
              {
                let dataCtr = data.guaranteeC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.guaranteeC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.guaranteeC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.guaranteeC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.guaranteeC.endDate).to.be.a('string');
              expect(data.guaranteeC.endDate).to.be("");
              expect(data.guaranteeC.hasExternalAccounts).to.be.a('boolean');
              expect(data.guaranteeC.hasExternalAccounts).to.be(false);
              expect(data.guaranteeC.rc).to.be.a('number');
              expect(data.guaranteeC.rc).to.be(0);
              expect(data.guaranteeC.currency).to.be.a('string');
              expect(data.guaranteeC.currency).to.be("");
              expect(data.guaranteeC.userId).to.be.a('string');
              expect(data.guaranteeC.userId).to.be("");
              expect(data.guaranteeC.pm).to.be.a('string');
              expect(data.guaranteeC.pm).to.be("");
              expect(data.guaranteeC.view).to.be.a('string');
              expect(data.guaranteeC.view).to.be("");
              expect(data.guaranteeC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.guaranteeC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.guaranteeF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.guaranteeF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.guaranteeF.total.chg).to.be.a('string');
                expect(data.guaranteeF.total.chg).to.be("");
                expect(data.guaranteeF.total.rtn).to.be.a('string');
                expect(data.guaranteeF.total.rtn).to.be("");
                expect(data.guaranteeF.total.incompleteData).to.be.a('boolean');
                expect(data.guaranteeF.total.incompleteData).to.be(false);
                expect(data.guaranteeF.total.endVal).to.be.a('string');
                expect(data.guaranteeF.total.endVal).to.be("");
                expect(data.guaranteeF.total.startVal).to.be.a('string');
                expect(data.guaranteeF.total.startVal).to.be("");
              expect(data.guaranteeF.startDate).to.be.a('string');
              expect(data.guaranteeF.startDate).to.be("");
              {
                let dataCtr = data.guaranteeF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.guaranteeF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.guaranteeF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.guaranteeF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.guaranteeF.endDate).to.be.a('string');
              expect(data.guaranteeF.endDate).to.be("");
              expect(data.guaranteeF.hasExternalAccounts).to.be.a('boolean');
              expect(data.guaranteeF.hasExternalAccounts).to.be(false);
              expect(data.guaranteeF.rc).to.be.a('number');
              expect(data.guaranteeF.rc).to.be(0);
              expect(data.guaranteeF.currency).to.be.a('string');
              expect(data.guaranteeF.currency).to.be("");
              expect(data.guaranteeF.userId).to.be.a('string');
              expect(data.guaranteeF.userId).to.be("");
              expect(data.guaranteeF.pm).to.be.a('string');
              expect(data.guaranteeF.pm).to.be("");
              expect(data.guaranteeF.view).to.be.a('string');
              expect(data.guaranteeF.view).to.be("");
              expect(data.guaranteeF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.guaranteeF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.guaranteeS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.guaranteeS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.guaranteeS.total.chg).to.be.a('string');
                expect(data.guaranteeS.total.chg).to.be("");
                expect(data.guaranteeS.total.rtn).to.be.a('string');
                expect(data.guaranteeS.total.rtn).to.be("");
                expect(data.guaranteeS.total.incompleteData).to.be.a('boolean');
                expect(data.guaranteeS.total.incompleteData).to.be(false);
                expect(data.guaranteeS.total.endVal).to.be.a('string');
                expect(data.guaranteeS.total.endVal).to.be("");
                expect(data.guaranteeS.total.startVal).to.be.a('string');
                expect(data.guaranteeS.total.startVal).to.be("");
              expect(data.guaranteeS.startDate).to.be.a('string');
              expect(data.guaranteeS.startDate).to.be("");
              {
                let dataCtr = data.guaranteeS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.guaranteeS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.guaranteeS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.guaranteeS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.guaranteeS.endDate).to.be.a('string');
              expect(data.guaranteeS.endDate).to.be("");
              expect(data.guaranteeS.hasExternalAccounts).to.be.a('boolean');
              expect(data.guaranteeS.hasExternalAccounts).to.be(false);
              expect(data.guaranteeS.rc).to.be.a('number');
              expect(data.guaranteeS.rc).to.be(0);
              expect(data.guaranteeS.currency).to.be.a('string');
              expect(data.guaranteeS.currency).to.be("");
              expect(data.guaranteeS.userId).to.be.a('string');
              expect(data.guaranteeS.userId).to.be("");
              expect(data.guaranteeS.pm).to.be.a('string');
              expect(data.guaranteeS.pm).to.be("");
              expect(data.guaranteeS.view).to.be.a('string');
              expect(data.guaranteeS.view).to.be("");
              expect(data.guaranteeS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.guaranteeS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.highestseverity).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.highestseverity.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.highestseverity.total.chg).to.be.a('string');
                expect(data.highestseverity.total.chg).to.be("");
                expect(data.highestseverity.total.rtn).to.be.a('string');
                expect(data.highestseverity.total.rtn).to.be("");
                expect(data.highestseverity.total.incompleteData).to.be.a('boolean');
                expect(data.highestseverity.total.incompleteData).to.be(false);
                expect(data.highestseverity.total.endVal).to.be.a('string');
                expect(data.highestseverity.total.endVal).to.be("");
                expect(data.highestseverity.total.startVal).to.be.a('string');
                expect(data.highestseverity.total.startVal).to.be("");
              expect(data.highestseverity.startDate).to.be.a('string');
              expect(data.highestseverity.startDate).to.be("");
              {
                let dataCtr = data.highestseverity.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.highestseverity.lastSuccessfulUpdate).to.be.a('string');
              expect(data.highestseverity.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.highestseverity.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.highestseverity.endDate).to.be.a('string');
              expect(data.highestseverity.endDate).to.be("");
              expect(data.highestseverity.hasExternalAccounts).to.be.a('boolean');
              expect(data.highestseverity.hasExternalAccounts).to.be(false);
              expect(data.highestseverity.rc).to.be.a('number');
              expect(data.highestseverity.rc).to.be(0);
              expect(data.highestseverity.currency).to.be.a('string');
              expect(data.highestseverity.currency).to.be("");
              expect(data.highestseverity.userId).to.be.a('string');
              expect(data.highestseverity.userId).to.be("");
              expect(data.highestseverity.pm).to.be.a('string');
              expect(data.highestseverity.pm).to.be("");
              expect(data.highestseverity.view).to.be.a('string');
              expect(data.highestseverity.view).to.be("");
              expect(data.highestseverity.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.highestseverity.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.highestseverityC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.highestseverityC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.highestseverityC.total.chg).to.be.a('string');
                expect(data.highestseverityC.total.chg).to.be("");
                expect(data.highestseverityC.total.rtn).to.be.a('string');
                expect(data.highestseverityC.total.rtn).to.be("");
                expect(data.highestseverityC.total.incompleteData).to.be.a('boolean');
                expect(data.highestseverityC.total.incompleteData).to.be(false);
                expect(data.highestseverityC.total.endVal).to.be.a('string');
                expect(data.highestseverityC.total.endVal).to.be("");
                expect(data.highestseverityC.total.startVal).to.be.a('string');
                expect(data.highestseverityC.total.startVal).to.be("");
              expect(data.highestseverityC.startDate).to.be.a('string');
              expect(data.highestseverityC.startDate).to.be("");
              {
                let dataCtr = data.highestseverityC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.highestseverityC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.highestseverityC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.highestseverityC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.highestseverityC.endDate).to.be.a('string');
              expect(data.highestseverityC.endDate).to.be("");
              expect(data.highestseverityC.hasExternalAccounts).to.be.a('boolean');
              expect(data.highestseverityC.hasExternalAccounts).to.be(false);
              expect(data.highestseverityC.rc).to.be.a('number');
              expect(data.highestseverityC.rc).to.be(0);
              expect(data.highestseverityC.currency).to.be.a('string');
              expect(data.highestseverityC.currency).to.be("");
              expect(data.highestseverityC.userId).to.be.a('string');
              expect(data.highestseverityC.userId).to.be("");
              expect(data.highestseverityC.pm).to.be.a('string');
              expect(data.highestseverityC.pm).to.be("");
              expect(data.highestseverityC.view).to.be.a('string');
              expect(data.highestseverityC.view).to.be("");
              expect(data.highestseverityC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.highestseverityC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.highestseverityF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.highestseverityF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.highestseverityF.total.chg).to.be.a('string');
                expect(data.highestseverityF.total.chg).to.be("");
                expect(data.highestseverityF.total.rtn).to.be.a('string');
                expect(data.highestseverityF.total.rtn).to.be("");
                expect(data.highestseverityF.total.incompleteData).to.be.a('boolean');
                expect(data.highestseverityF.total.incompleteData).to.be(false);
                expect(data.highestseverityF.total.endVal).to.be.a('string');
                expect(data.highestseverityF.total.endVal).to.be("");
                expect(data.highestseverityF.total.startVal).to.be.a('string');
                expect(data.highestseverityF.total.startVal).to.be("");
              expect(data.highestseverityF.startDate).to.be.a('string');
              expect(data.highestseverityF.startDate).to.be("");
              {
                let dataCtr = data.highestseverityF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.highestseverityF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.highestseverityF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.highestseverityF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.highestseverityF.endDate).to.be.a('string');
              expect(data.highestseverityF.endDate).to.be("");
              expect(data.highestseverityF.hasExternalAccounts).to.be.a('boolean');
              expect(data.highestseverityF.hasExternalAccounts).to.be(false);
              expect(data.highestseverityF.rc).to.be.a('number');
              expect(data.highestseverityF.rc).to.be(0);
              expect(data.highestseverityF.currency).to.be.a('string');
              expect(data.highestseverityF.currency).to.be("");
              expect(data.highestseverityF.userId).to.be.a('string');
              expect(data.highestseverityF.userId).to.be("");
              expect(data.highestseverityF.pm).to.be.a('string');
              expect(data.highestseverityF.pm).to.be("");
              expect(data.highestseverityF.view).to.be.a('string');
              expect(data.highestseverityF.view).to.be("");
              expect(data.highestseverityF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.highestseverityF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.highestseverityS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.highestseverityS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.highestseverityS.total.chg).to.be.a('string');
                expect(data.highestseverityS.total.chg).to.be("");
                expect(data.highestseverityS.total.rtn).to.be.a('string');
                expect(data.highestseverityS.total.rtn).to.be("");
                expect(data.highestseverityS.total.incompleteData).to.be.a('boolean');
                expect(data.highestseverityS.total.incompleteData).to.be(false);
                expect(data.highestseverityS.total.endVal).to.be.a('string');
                expect(data.highestseverityS.total.endVal).to.be("");
                expect(data.highestseverityS.total.startVal).to.be.a('string');
                expect(data.highestseverityS.total.startVal).to.be("");
              expect(data.highestseverityS.startDate).to.be.a('string');
              expect(data.highestseverityS.startDate).to.be("");
              {
                let dataCtr = data.highestseverityS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.highestseverityS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.highestseverityS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.highestseverityS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.highestseverityS.endDate).to.be.a('string');
              expect(data.highestseverityS.endDate).to.be("");
              expect(data.highestseverityS.hasExternalAccounts).to.be.a('boolean');
              expect(data.highestseverityS.hasExternalAccounts).to.be(false);
              expect(data.highestseverityS.rc).to.be.a('number');
              expect(data.highestseverityS.rc).to.be(0);
              expect(data.highestseverityS.currency).to.be.a('string');
              expect(data.highestseverityS.currency).to.be("");
              expect(data.highestseverityS.userId).to.be.a('string');
              expect(data.highestseverityS.userId).to.be("");
              expect(data.highestseverityS.pm).to.be.a('string');
              expect(data.highestseverityS.pm).to.be("");
              expect(data.highestseverityS.view).to.be.a('string');
              expect(data.highestseverityS.view).to.be("");
              expect(data.highestseverityS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.highestseverityS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.indianstockhaircut).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.indianstockhaircut.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.indianstockhaircut.total.chg).to.be.a('string');
                expect(data.indianstockhaircut.total.chg).to.be("");
                expect(data.indianstockhaircut.total.rtn).to.be.a('string');
                expect(data.indianstockhaircut.total.rtn).to.be("");
                expect(data.indianstockhaircut.total.incompleteData).to.be.a('boolean');
                expect(data.indianstockhaircut.total.incompleteData).to.be(false);
                expect(data.indianstockhaircut.total.endVal).to.be.a('string');
                expect(data.indianstockhaircut.total.endVal).to.be("");
                expect(data.indianstockhaircut.total.startVal).to.be.a('string');
                expect(data.indianstockhaircut.total.startVal).to.be("");
              expect(data.indianstockhaircut.startDate).to.be.a('string');
              expect(data.indianstockhaircut.startDate).to.be("");
              {
                let dataCtr = data.indianstockhaircut.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.indianstockhaircut.lastSuccessfulUpdate).to.be.a('string');
              expect(data.indianstockhaircut.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.indianstockhaircut.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.indianstockhaircut.endDate).to.be.a('string');
              expect(data.indianstockhaircut.endDate).to.be("");
              expect(data.indianstockhaircut.hasExternalAccounts).to.be.a('boolean');
              expect(data.indianstockhaircut.hasExternalAccounts).to.be(false);
              expect(data.indianstockhaircut.rc).to.be.a('number');
              expect(data.indianstockhaircut.rc).to.be(0);
              expect(data.indianstockhaircut.currency).to.be.a('string');
              expect(data.indianstockhaircut.currency).to.be("");
              expect(data.indianstockhaircut.userId).to.be.a('string');
              expect(data.indianstockhaircut.userId).to.be("");
              expect(data.indianstockhaircut.pm).to.be.a('string');
              expect(data.indianstockhaircut.pm).to.be("");
              expect(data.indianstockhaircut.view).to.be.a('string');
              expect(data.indianstockhaircut.view).to.be("");
              expect(data.indianstockhaircut.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.indianstockhaircut.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.indianstockhaircutC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.indianstockhaircutC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.indianstockhaircutC.total.chg).to.be.a('string');
                expect(data.indianstockhaircutC.total.chg).to.be("");
                expect(data.indianstockhaircutC.total.rtn).to.be.a('string');
                expect(data.indianstockhaircutC.total.rtn).to.be("");
                expect(data.indianstockhaircutC.total.incompleteData).to.be.a('boolean');
                expect(data.indianstockhaircutC.total.incompleteData).to.be(false);
                expect(data.indianstockhaircutC.total.endVal).to.be.a('string');
                expect(data.indianstockhaircutC.total.endVal).to.be("");
                expect(data.indianstockhaircutC.total.startVal).to.be.a('string');
                expect(data.indianstockhaircutC.total.startVal).to.be("");
              expect(data.indianstockhaircutC.startDate).to.be.a('string');
              expect(data.indianstockhaircutC.startDate).to.be("");
              {
                let dataCtr = data.indianstockhaircutC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.indianstockhaircutC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.indianstockhaircutC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.indianstockhaircutC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.indianstockhaircutC.endDate).to.be.a('string');
              expect(data.indianstockhaircutC.endDate).to.be("");
              expect(data.indianstockhaircutC.hasExternalAccounts).to.be.a('boolean');
              expect(data.indianstockhaircutC.hasExternalAccounts).to.be(false);
              expect(data.indianstockhaircutC.rc).to.be.a('number');
              expect(data.indianstockhaircutC.rc).to.be(0);
              expect(data.indianstockhaircutC.currency).to.be.a('string');
              expect(data.indianstockhaircutC.currency).to.be("");
              expect(data.indianstockhaircutC.userId).to.be.a('string');
              expect(data.indianstockhaircutC.userId).to.be("");
              expect(data.indianstockhaircutC.pm).to.be.a('string');
              expect(data.indianstockhaircutC.pm).to.be("");
              expect(data.indianstockhaircutC.view).to.be.a('string');
              expect(data.indianstockhaircutC.view).to.be("");
              expect(data.indianstockhaircutC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.indianstockhaircutC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.indianstockhaircutF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.indianstockhaircutF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.indianstockhaircutF.total.chg).to.be.a('string');
                expect(data.indianstockhaircutF.total.chg).to.be("");
                expect(data.indianstockhaircutF.total.rtn).to.be.a('string');
                expect(data.indianstockhaircutF.total.rtn).to.be("");
                expect(data.indianstockhaircutF.total.incompleteData).to.be.a('boolean');
                expect(data.indianstockhaircutF.total.incompleteData).to.be(false);
                expect(data.indianstockhaircutF.total.endVal).to.be.a('string');
                expect(data.indianstockhaircutF.total.endVal).to.be("");
                expect(data.indianstockhaircutF.total.startVal).to.be.a('string');
                expect(data.indianstockhaircutF.total.startVal).to.be("");
              expect(data.indianstockhaircutF.startDate).to.be.a('string');
              expect(data.indianstockhaircutF.startDate).to.be("");
              {
                let dataCtr = data.indianstockhaircutF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.indianstockhaircutF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.indianstockhaircutF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.indianstockhaircutF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.indianstockhaircutF.endDate).to.be.a('string');
              expect(data.indianstockhaircutF.endDate).to.be("");
              expect(data.indianstockhaircutF.hasExternalAccounts).to.be.a('boolean');
              expect(data.indianstockhaircutF.hasExternalAccounts).to.be(false);
              expect(data.indianstockhaircutF.rc).to.be.a('number');
              expect(data.indianstockhaircutF.rc).to.be(0);
              expect(data.indianstockhaircutF.currency).to.be.a('string');
              expect(data.indianstockhaircutF.currency).to.be("");
              expect(data.indianstockhaircutF.userId).to.be.a('string');
              expect(data.indianstockhaircutF.userId).to.be("");
              expect(data.indianstockhaircutF.pm).to.be.a('string');
              expect(data.indianstockhaircutF.pm).to.be("");
              expect(data.indianstockhaircutF.view).to.be.a('string');
              expect(data.indianstockhaircutF.view).to.be("");
              expect(data.indianstockhaircutF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.indianstockhaircutF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.indianstockhaircutS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.indianstockhaircutS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.indianstockhaircutS.total.chg).to.be.a('string');
                expect(data.indianstockhaircutS.total.chg).to.be("");
                expect(data.indianstockhaircutS.total.rtn).to.be.a('string');
                expect(data.indianstockhaircutS.total.rtn).to.be("");
                expect(data.indianstockhaircutS.total.incompleteData).to.be.a('boolean');
                expect(data.indianstockhaircutS.total.incompleteData).to.be(false);
                expect(data.indianstockhaircutS.total.endVal).to.be.a('string');
                expect(data.indianstockhaircutS.total.endVal).to.be("");
                expect(data.indianstockhaircutS.total.startVal).to.be.a('string');
                expect(data.indianstockhaircutS.total.startVal).to.be("");
              expect(data.indianstockhaircutS.startDate).to.be.a('string');
              expect(data.indianstockhaircutS.startDate).to.be("");
              {
                let dataCtr = data.indianstockhaircutS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.indianstockhaircutS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.indianstockhaircutS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.indianstockhaircutS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.indianstockhaircutS.endDate).to.be.a('string');
              expect(data.indianstockhaircutS.endDate).to.be("");
              expect(data.indianstockhaircutS.hasExternalAccounts).to.be.a('boolean');
              expect(data.indianstockhaircutS.hasExternalAccounts).to.be(false);
              expect(data.indianstockhaircutS.rc).to.be.a('number');
              expect(data.indianstockhaircutS.rc).to.be(0);
              expect(data.indianstockhaircutS.currency).to.be.a('string');
              expect(data.indianstockhaircutS.currency).to.be("");
              expect(data.indianstockhaircutS.userId).to.be.a('string');
              expect(data.indianstockhaircutS.userId).to.be("");
              expect(data.indianstockhaircutS.pm).to.be.a('string');
              expect(data.indianstockhaircutS.pm).to.be("");
              expect(data.indianstockhaircutS.view).to.be.a('string');
              expect(data.indianstockhaircutS.view).to.be("");
              expect(data.indianstockhaircutS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.indianstockhaircutS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.initmarginreq).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.initmarginreq.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.initmarginreq.total.chg).to.be.a('string');
                expect(data.initmarginreq.total.chg).to.be("");
                expect(data.initmarginreq.total.rtn).to.be.a('string');
                expect(data.initmarginreq.total.rtn).to.be("");
                expect(data.initmarginreq.total.incompleteData).to.be.a('boolean');
                expect(data.initmarginreq.total.incompleteData).to.be(false);
                expect(data.initmarginreq.total.endVal).to.be.a('string');
                expect(data.initmarginreq.total.endVal).to.be("");
                expect(data.initmarginreq.total.startVal).to.be.a('string');
                expect(data.initmarginreq.total.startVal).to.be("");
              expect(data.initmarginreq.startDate).to.be.a('string');
              expect(data.initmarginreq.startDate).to.be("");
              {
                let dataCtr = data.initmarginreq.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.initmarginreq.lastSuccessfulUpdate).to.be.a('string');
              expect(data.initmarginreq.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.initmarginreq.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.initmarginreq.endDate).to.be.a('string');
              expect(data.initmarginreq.endDate).to.be("");
              expect(data.initmarginreq.hasExternalAccounts).to.be.a('boolean');
              expect(data.initmarginreq.hasExternalAccounts).to.be(false);
              expect(data.initmarginreq.rc).to.be.a('number');
              expect(data.initmarginreq.rc).to.be(0);
              expect(data.initmarginreq.currency).to.be.a('string');
              expect(data.initmarginreq.currency).to.be("");
              expect(data.initmarginreq.userId).to.be.a('string');
              expect(data.initmarginreq.userId).to.be("");
              expect(data.initmarginreq.pm).to.be.a('string');
              expect(data.initmarginreq.pm).to.be("");
              expect(data.initmarginreq.view).to.be.a('string');
              expect(data.initmarginreq.view).to.be("");
              expect(data.initmarginreq.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.initmarginreq.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.initmarginreqC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.initmarginreqC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.initmarginreqC.total.chg).to.be.a('string');
                expect(data.initmarginreqC.total.chg).to.be("");
                expect(data.initmarginreqC.total.rtn).to.be.a('string');
                expect(data.initmarginreqC.total.rtn).to.be("");
                expect(data.initmarginreqC.total.incompleteData).to.be.a('boolean');
                expect(data.initmarginreqC.total.incompleteData).to.be(false);
                expect(data.initmarginreqC.total.endVal).to.be.a('string');
                expect(data.initmarginreqC.total.endVal).to.be("");
                expect(data.initmarginreqC.total.startVal).to.be.a('string');
                expect(data.initmarginreqC.total.startVal).to.be("");
              expect(data.initmarginreqC.startDate).to.be.a('string');
              expect(data.initmarginreqC.startDate).to.be("");
              {
                let dataCtr = data.initmarginreqC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.initmarginreqC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.initmarginreqC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.initmarginreqC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.initmarginreqC.endDate).to.be.a('string');
              expect(data.initmarginreqC.endDate).to.be("");
              expect(data.initmarginreqC.hasExternalAccounts).to.be.a('boolean');
              expect(data.initmarginreqC.hasExternalAccounts).to.be(false);
              expect(data.initmarginreqC.rc).to.be.a('number');
              expect(data.initmarginreqC.rc).to.be(0);
              expect(data.initmarginreqC.currency).to.be.a('string');
              expect(data.initmarginreqC.currency).to.be("");
              expect(data.initmarginreqC.userId).to.be.a('string');
              expect(data.initmarginreqC.userId).to.be("");
              expect(data.initmarginreqC.pm).to.be.a('string');
              expect(data.initmarginreqC.pm).to.be("");
              expect(data.initmarginreqC.view).to.be.a('string');
              expect(data.initmarginreqC.view).to.be("");
              expect(data.initmarginreqC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.initmarginreqC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.initmarginreqF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.initmarginreqF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.initmarginreqF.total.chg).to.be.a('string');
                expect(data.initmarginreqF.total.chg).to.be("");
                expect(data.initmarginreqF.total.rtn).to.be.a('string');
                expect(data.initmarginreqF.total.rtn).to.be("");
                expect(data.initmarginreqF.total.incompleteData).to.be.a('boolean');
                expect(data.initmarginreqF.total.incompleteData).to.be(false);
                expect(data.initmarginreqF.total.endVal).to.be.a('string');
                expect(data.initmarginreqF.total.endVal).to.be("");
                expect(data.initmarginreqF.total.startVal).to.be.a('string');
                expect(data.initmarginreqF.total.startVal).to.be("");
              expect(data.initmarginreqF.startDate).to.be.a('string');
              expect(data.initmarginreqF.startDate).to.be("");
              {
                let dataCtr = data.initmarginreqF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.initmarginreqF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.initmarginreqF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.initmarginreqF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.initmarginreqF.endDate).to.be.a('string');
              expect(data.initmarginreqF.endDate).to.be("");
              expect(data.initmarginreqF.hasExternalAccounts).to.be.a('boolean');
              expect(data.initmarginreqF.hasExternalAccounts).to.be(false);
              expect(data.initmarginreqF.rc).to.be.a('number');
              expect(data.initmarginreqF.rc).to.be(0);
              expect(data.initmarginreqF.currency).to.be.a('string');
              expect(data.initmarginreqF.currency).to.be("");
              expect(data.initmarginreqF.userId).to.be.a('string');
              expect(data.initmarginreqF.userId).to.be("");
              expect(data.initmarginreqF.pm).to.be.a('string');
              expect(data.initmarginreqF.pm).to.be("");
              expect(data.initmarginreqF.view).to.be.a('string');
              expect(data.initmarginreqF.view).to.be("");
              expect(data.initmarginreqF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.initmarginreqF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.initmarginreqS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.initmarginreqS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.initmarginreqS.total.chg).to.be.a('string');
                expect(data.initmarginreqS.total.chg).to.be("");
                expect(data.initmarginreqS.total.rtn).to.be.a('string');
                expect(data.initmarginreqS.total.rtn).to.be("");
                expect(data.initmarginreqS.total.incompleteData).to.be.a('boolean');
                expect(data.initmarginreqS.total.incompleteData).to.be(false);
                expect(data.initmarginreqS.total.endVal).to.be.a('string');
                expect(data.initmarginreqS.total.endVal).to.be("");
                expect(data.initmarginreqS.total.startVal).to.be.a('string');
                expect(data.initmarginreqS.total.startVal).to.be("");
              expect(data.initmarginreqS.startDate).to.be.a('string');
              expect(data.initmarginreqS.startDate).to.be("");
              {
                let dataCtr = data.initmarginreqS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.initmarginreqS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.initmarginreqS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.initmarginreqS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.initmarginreqS.endDate).to.be.a('string');
              expect(data.initmarginreqS.endDate).to.be("");
              expect(data.initmarginreqS.hasExternalAccounts).to.be.a('boolean');
              expect(data.initmarginreqS.hasExternalAccounts).to.be(false);
              expect(data.initmarginreqS.rc).to.be.a('number');
              expect(data.initmarginreqS.rc).to.be(0);
              expect(data.initmarginreqS.currency).to.be.a('string');
              expect(data.initmarginreqS.currency).to.be("");
              expect(data.initmarginreqS.userId).to.be.a('string');
              expect(data.initmarginreqS.userId).to.be("");
              expect(data.initmarginreqS.pm).to.be.a('string');
              expect(data.initmarginreqS.pm).to.be("");
              expect(data.initmarginreqS.view).to.be.a('string');
              expect(data.initmarginreqS.view).to.be("");
              expect(data.initmarginreqS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.initmarginreqS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.leverage).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.leverage.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.leverage.total.chg).to.be.a('string');
                expect(data.leverage.total.chg).to.be("");
                expect(data.leverage.total.rtn).to.be.a('string');
                expect(data.leverage.total.rtn).to.be("");
                expect(data.leverage.total.incompleteData).to.be.a('boolean');
                expect(data.leverage.total.incompleteData).to.be(false);
                expect(data.leverage.total.endVal).to.be.a('string');
                expect(data.leverage.total.endVal).to.be("");
                expect(data.leverage.total.startVal).to.be.a('string');
                expect(data.leverage.total.startVal).to.be("");
              expect(data.leverage.startDate).to.be.a('string');
              expect(data.leverage.startDate).to.be("");
              {
                let dataCtr = data.leverage.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.leverage.lastSuccessfulUpdate).to.be.a('string');
              expect(data.leverage.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.leverage.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.leverage.endDate).to.be.a('string');
              expect(data.leverage.endDate).to.be("");
              expect(data.leverage.hasExternalAccounts).to.be.a('boolean');
              expect(data.leverage.hasExternalAccounts).to.be(false);
              expect(data.leverage.rc).to.be.a('number');
              expect(data.leverage.rc).to.be(0);
              expect(data.leverage.currency).to.be.a('string');
              expect(data.leverage.currency).to.be("");
              expect(data.leverage.userId).to.be.a('string');
              expect(data.leverage.userId).to.be("");
              expect(data.leverage.pm).to.be.a('string');
              expect(data.leverage.pm).to.be("");
              expect(data.leverage.view).to.be.a('string');
              expect(data.leverage.view).to.be("");
              expect(data.leverage.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.leverage.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.leverageC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.leverageC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.leverageC.total.chg).to.be.a('string');
                expect(data.leverageC.total.chg).to.be("");
                expect(data.leverageC.total.rtn).to.be.a('string');
                expect(data.leverageC.total.rtn).to.be("");
                expect(data.leverageC.total.incompleteData).to.be.a('boolean');
                expect(data.leverageC.total.incompleteData).to.be(false);
                expect(data.leverageC.total.endVal).to.be.a('string');
                expect(data.leverageC.total.endVal).to.be("");
                expect(data.leverageC.total.startVal).to.be.a('string');
                expect(data.leverageC.total.startVal).to.be("");
              expect(data.leverageC.startDate).to.be.a('string');
              expect(data.leverageC.startDate).to.be("");
              {
                let dataCtr = data.leverageC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.leverageC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.leverageC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.leverageC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.leverageC.endDate).to.be.a('string');
              expect(data.leverageC.endDate).to.be("");
              expect(data.leverageC.hasExternalAccounts).to.be.a('boolean');
              expect(data.leverageC.hasExternalAccounts).to.be(false);
              expect(data.leverageC.rc).to.be.a('number');
              expect(data.leverageC.rc).to.be(0);
              expect(data.leverageC.currency).to.be.a('string');
              expect(data.leverageC.currency).to.be("");
              expect(data.leverageC.userId).to.be.a('string');
              expect(data.leverageC.userId).to.be("");
              expect(data.leverageC.pm).to.be.a('string');
              expect(data.leverageC.pm).to.be("");
              expect(data.leverageC.view).to.be.a('string');
              expect(data.leverageC.view).to.be("");
              expect(data.leverageC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.leverageC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.leverageF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.leverageF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.leverageF.total.chg).to.be.a('string');
                expect(data.leverageF.total.chg).to.be("");
                expect(data.leverageF.total.rtn).to.be.a('string');
                expect(data.leverageF.total.rtn).to.be("");
                expect(data.leverageF.total.incompleteData).to.be.a('boolean');
                expect(data.leverageF.total.incompleteData).to.be(false);
                expect(data.leverageF.total.endVal).to.be.a('string');
                expect(data.leverageF.total.endVal).to.be("");
                expect(data.leverageF.total.startVal).to.be.a('string');
                expect(data.leverageF.total.startVal).to.be("");
              expect(data.leverageF.startDate).to.be.a('string');
              expect(data.leverageF.startDate).to.be("");
              {
                let dataCtr = data.leverageF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.leverageF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.leverageF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.leverageF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.leverageF.endDate).to.be.a('string');
              expect(data.leverageF.endDate).to.be("");
              expect(data.leverageF.hasExternalAccounts).to.be.a('boolean');
              expect(data.leverageF.hasExternalAccounts).to.be(false);
              expect(data.leverageF.rc).to.be.a('number');
              expect(data.leverageF.rc).to.be(0);
              expect(data.leverageF.currency).to.be.a('string');
              expect(data.leverageF.currency).to.be("");
              expect(data.leverageF.userId).to.be.a('string');
              expect(data.leverageF.userId).to.be("");
              expect(data.leverageF.pm).to.be.a('string');
              expect(data.leverageF.pm).to.be("");
              expect(data.leverageF.view).to.be.a('string');
              expect(data.leverageF.view).to.be("");
              expect(data.leverageF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.leverageF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.leverageS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.leverageS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.leverageS.total.chg).to.be.a('string');
                expect(data.leverageS.total.chg).to.be("");
                expect(data.leverageS.total.rtn).to.be.a('string');
                expect(data.leverageS.total.rtn).to.be("");
                expect(data.leverageS.total.incompleteData).to.be.a('boolean');
                expect(data.leverageS.total.incompleteData).to.be(false);
                expect(data.leverageS.total.endVal).to.be.a('string');
                expect(data.leverageS.total.endVal).to.be("");
                expect(data.leverageS.total.startVal).to.be.a('string');
                expect(data.leverageS.total.startVal).to.be("");
              expect(data.leverageS.startDate).to.be.a('string');
              expect(data.leverageS.startDate).to.be("");
              {
                let dataCtr = data.leverageS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.leverageS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.leverageS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.leverageS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.leverageS.endDate).to.be.a('string');
              expect(data.leverageS.endDate).to.be("");
              expect(data.leverageS.hasExternalAccounts).to.be.a('boolean');
              expect(data.leverageS.hasExternalAccounts).to.be(false);
              expect(data.leverageS.rc).to.be.a('number');
              expect(data.leverageS.rc).to.be(0);
              expect(data.leverageS.currency).to.be.a('string');
              expect(data.leverageS.currency).to.be("");
              expect(data.leverageS.userId).to.be.a('string');
              expect(data.leverageS.userId).to.be("");
              expect(data.leverageS.pm).to.be.a('string');
              expect(data.leverageS.pm).to.be("");
              expect(data.leverageS.view).to.be.a('string');
              expect(data.leverageS.view).to.be("");
              expect(data.leverageS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.leverageS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadavailablefunds).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadavailablefunds.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadavailablefunds.total.chg).to.be.a('string');
                expect(data.lookaheadavailablefunds.total.chg).to.be("");
                expect(data.lookaheadavailablefunds.total.rtn).to.be.a('string');
                expect(data.lookaheadavailablefunds.total.rtn).to.be("");
                expect(data.lookaheadavailablefunds.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadavailablefunds.total.incompleteData).to.be(false);
                expect(data.lookaheadavailablefunds.total.endVal).to.be.a('string');
                expect(data.lookaheadavailablefunds.total.endVal).to.be("");
                expect(data.lookaheadavailablefunds.total.startVal).to.be.a('string');
                expect(data.lookaheadavailablefunds.total.startVal).to.be("");
              expect(data.lookaheadavailablefunds.startDate).to.be.a('string');
              expect(data.lookaheadavailablefunds.startDate).to.be("");
              {
                let dataCtr = data.lookaheadavailablefunds.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadavailablefunds.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadavailablefunds.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadavailablefunds.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadavailablefunds.endDate).to.be.a('string');
              expect(data.lookaheadavailablefunds.endDate).to.be("");
              expect(data.lookaheadavailablefunds.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadavailablefunds.hasExternalAccounts).to.be(false);
              expect(data.lookaheadavailablefunds.rc).to.be.a('number');
              expect(data.lookaheadavailablefunds.rc).to.be(0);
              expect(data.lookaheadavailablefunds.currency).to.be.a('string');
              expect(data.lookaheadavailablefunds.currency).to.be("");
              expect(data.lookaheadavailablefunds.userId).to.be.a('string');
              expect(data.lookaheadavailablefunds.userId).to.be("");
              expect(data.lookaheadavailablefunds.pm).to.be.a('string');
              expect(data.lookaheadavailablefunds.pm).to.be("");
              expect(data.lookaheadavailablefunds.view).to.be.a('string');
              expect(data.lookaheadavailablefunds.view).to.be("");
              expect(data.lookaheadavailablefunds.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadavailablefunds.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadavailablefundsC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadavailablefundsC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadavailablefundsC.total.chg).to.be.a('string');
                expect(data.lookaheadavailablefundsC.total.chg).to.be("");
                expect(data.lookaheadavailablefundsC.total.rtn).to.be.a('string');
                expect(data.lookaheadavailablefundsC.total.rtn).to.be("");
                expect(data.lookaheadavailablefundsC.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadavailablefundsC.total.incompleteData).to.be(false);
                expect(data.lookaheadavailablefundsC.total.endVal).to.be.a('string');
                expect(data.lookaheadavailablefundsC.total.endVal).to.be("");
                expect(data.lookaheadavailablefundsC.total.startVal).to.be.a('string');
                expect(data.lookaheadavailablefundsC.total.startVal).to.be("");
              expect(data.lookaheadavailablefundsC.startDate).to.be.a('string');
              expect(data.lookaheadavailablefundsC.startDate).to.be("");
              {
                let dataCtr = data.lookaheadavailablefundsC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadavailablefundsC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadavailablefundsC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadavailablefundsC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadavailablefundsC.endDate).to.be.a('string');
              expect(data.lookaheadavailablefundsC.endDate).to.be("");
              expect(data.lookaheadavailablefundsC.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadavailablefundsC.hasExternalAccounts).to.be(false);
              expect(data.lookaheadavailablefundsC.rc).to.be.a('number');
              expect(data.lookaheadavailablefundsC.rc).to.be(0);
              expect(data.lookaheadavailablefundsC.currency).to.be.a('string');
              expect(data.lookaheadavailablefundsC.currency).to.be("");
              expect(data.lookaheadavailablefundsC.userId).to.be.a('string');
              expect(data.lookaheadavailablefundsC.userId).to.be("");
              expect(data.lookaheadavailablefundsC.pm).to.be.a('string');
              expect(data.lookaheadavailablefundsC.pm).to.be("");
              expect(data.lookaheadavailablefundsC.view).to.be.a('string');
              expect(data.lookaheadavailablefundsC.view).to.be("");
              expect(data.lookaheadavailablefundsC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadavailablefundsC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadavailablefundsF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadavailablefundsF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadavailablefundsF.total.chg).to.be.a('string');
                expect(data.lookaheadavailablefundsF.total.chg).to.be("");
                expect(data.lookaheadavailablefundsF.total.rtn).to.be.a('string');
                expect(data.lookaheadavailablefundsF.total.rtn).to.be("");
                expect(data.lookaheadavailablefundsF.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadavailablefundsF.total.incompleteData).to.be(false);
                expect(data.lookaheadavailablefundsF.total.endVal).to.be.a('string');
                expect(data.lookaheadavailablefundsF.total.endVal).to.be("");
                expect(data.lookaheadavailablefundsF.total.startVal).to.be.a('string');
                expect(data.lookaheadavailablefundsF.total.startVal).to.be("");
              expect(data.lookaheadavailablefundsF.startDate).to.be.a('string');
              expect(data.lookaheadavailablefundsF.startDate).to.be("");
              {
                let dataCtr = data.lookaheadavailablefundsF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadavailablefundsF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadavailablefundsF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadavailablefundsF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadavailablefundsF.endDate).to.be.a('string');
              expect(data.lookaheadavailablefundsF.endDate).to.be("");
              expect(data.lookaheadavailablefundsF.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadavailablefundsF.hasExternalAccounts).to.be(false);
              expect(data.lookaheadavailablefundsF.rc).to.be.a('number');
              expect(data.lookaheadavailablefundsF.rc).to.be(0);
              expect(data.lookaheadavailablefundsF.currency).to.be.a('string');
              expect(data.lookaheadavailablefundsF.currency).to.be("");
              expect(data.lookaheadavailablefundsF.userId).to.be.a('string');
              expect(data.lookaheadavailablefundsF.userId).to.be("");
              expect(data.lookaheadavailablefundsF.pm).to.be.a('string');
              expect(data.lookaheadavailablefundsF.pm).to.be("");
              expect(data.lookaheadavailablefundsF.view).to.be.a('string');
              expect(data.lookaheadavailablefundsF.view).to.be("");
              expect(data.lookaheadavailablefundsF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadavailablefundsF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadavailablefundsS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadavailablefundsS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadavailablefundsS.total.chg).to.be.a('string');
                expect(data.lookaheadavailablefundsS.total.chg).to.be("");
                expect(data.lookaheadavailablefundsS.total.rtn).to.be.a('string');
                expect(data.lookaheadavailablefundsS.total.rtn).to.be("");
                expect(data.lookaheadavailablefundsS.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadavailablefundsS.total.incompleteData).to.be(false);
                expect(data.lookaheadavailablefundsS.total.endVal).to.be.a('string');
                expect(data.lookaheadavailablefundsS.total.endVal).to.be("");
                expect(data.lookaheadavailablefundsS.total.startVal).to.be.a('string');
                expect(data.lookaheadavailablefundsS.total.startVal).to.be("");
              expect(data.lookaheadavailablefundsS.startDate).to.be.a('string');
              expect(data.lookaheadavailablefundsS.startDate).to.be("");
              {
                let dataCtr = data.lookaheadavailablefundsS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadavailablefundsS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadavailablefundsS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadavailablefundsS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadavailablefundsS.endDate).to.be.a('string');
              expect(data.lookaheadavailablefundsS.endDate).to.be("");
              expect(data.lookaheadavailablefundsS.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadavailablefundsS.hasExternalAccounts).to.be(false);
              expect(data.lookaheadavailablefundsS.rc).to.be.a('number');
              expect(data.lookaheadavailablefundsS.rc).to.be(0);
              expect(data.lookaheadavailablefundsS.currency).to.be.a('string');
              expect(data.lookaheadavailablefundsS.currency).to.be("");
              expect(data.lookaheadavailablefundsS.userId).to.be.a('string');
              expect(data.lookaheadavailablefundsS.userId).to.be("");
              expect(data.lookaheadavailablefundsS.pm).to.be.a('string');
              expect(data.lookaheadavailablefundsS.pm).to.be("");
              expect(data.lookaheadavailablefundsS.view).to.be.a('string');
              expect(data.lookaheadavailablefundsS.view).to.be("");
              expect(data.lookaheadavailablefundsS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadavailablefundsS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadexcessliquidity).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadexcessliquidity.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadexcessliquidity.total.chg).to.be.a('string');
                expect(data.lookaheadexcessliquidity.total.chg).to.be("");
                expect(data.lookaheadexcessliquidity.total.rtn).to.be.a('string');
                expect(data.lookaheadexcessliquidity.total.rtn).to.be("");
                expect(data.lookaheadexcessliquidity.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadexcessliquidity.total.incompleteData).to.be(false);
                expect(data.lookaheadexcessliquidity.total.endVal).to.be.a('string');
                expect(data.lookaheadexcessliquidity.total.endVal).to.be("");
                expect(data.lookaheadexcessliquidity.total.startVal).to.be.a('string');
                expect(data.lookaheadexcessliquidity.total.startVal).to.be("");
              expect(data.lookaheadexcessliquidity.startDate).to.be.a('string');
              expect(data.lookaheadexcessliquidity.startDate).to.be("");
              {
                let dataCtr = data.lookaheadexcessliquidity.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadexcessliquidity.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadexcessliquidity.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadexcessliquidity.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadexcessliquidity.endDate).to.be.a('string');
              expect(data.lookaheadexcessliquidity.endDate).to.be("");
              expect(data.lookaheadexcessliquidity.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadexcessliquidity.hasExternalAccounts).to.be(false);
              expect(data.lookaheadexcessliquidity.rc).to.be.a('number');
              expect(data.lookaheadexcessliquidity.rc).to.be(0);
              expect(data.lookaheadexcessliquidity.currency).to.be.a('string');
              expect(data.lookaheadexcessliquidity.currency).to.be("");
              expect(data.lookaheadexcessliquidity.userId).to.be.a('string');
              expect(data.lookaheadexcessliquidity.userId).to.be("");
              expect(data.lookaheadexcessliquidity.pm).to.be.a('string');
              expect(data.lookaheadexcessliquidity.pm).to.be("");
              expect(data.lookaheadexcessliquidity.view).to.be.a('string');
              expect(data.lookaheadexcessliquidity.view).to.be("");
              expect(data.lookaheadexcessliquidity.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadexcessliquidity.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadexcessliquidityC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadexcessliquidityC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadexcessliquidityC.total.chg).to.be.a('string');
                expect(data.lookaheadexcessliquidityC.total.chg).to.be("");
                expect(data.lookaheadexcessliquidityC.total.rtn).to.be.a('string');
                expect(data.lookaheadexcessliquidityC.total.rtn).to.be("");
                expect(data.lookaheadexcessliquidityC.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadexcessliquidityC.total.incompleteData).to.be(false);
                expect(data.lookaheadexcessliquidityC.total.endVal).to.be.a('string');
                expect(data.lookaheadexcessliquidityC.total.endVal).to.be("");
                expect(data.lookaheadexcessliquidityC.total.startVal).to.be.a('string');
                expect(data.lookaheadexcessliquidityC.total.startVal).to.be("");
              expect(data.lookaheadexcessliquidityC.startDate).to.be.a('string');
              expect(data.lookaheadexcessliquidityC.startDate).to.be("");
              {
                let dataCtr = data.lookaheadexcessliquidityC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadexcessliquidityC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadexcessliquidityC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadexcessliquidityC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadexcessliquidityC.endDate).to.be.a('string');
              expect(data.lookaheadexcessliquidityC.endDate).to.be("");
              expect(data.lookaheadexcessliquidityC.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadexcessliquidityC.hasExternalAccounts).to.be(false);
              expect(data.lookaheadexcessliquidityC.rc).to.be.a('number');
              expect(data.lookaheadexcessliquidityC.rc).to.be(0);
              expect(data.lookaheadexcessliquidityC.currency).to.be.a('string');
              expect(data.lookaheadexcessliquidityC.currency).to.be("");
              expect(data.lookaheadexcessliquidityC.userId).to.be.a('string');
              expect(data.lookaheadexcessliquidityC.userId).to.be("");
              expect(data.lookaheadexcessliquidityC.pm).to.be.a('string');
              expect(data.lookaheadexcessliquidityC.pm).to.be("");
              expect(data.lookaheadexcessliquidityC.view).to.be.a('string');
              expect(data.lookaheadexcessliquidityC.view).to.be("");
              expect(data.lookaheadexcessliquidityC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadexcessliquidityC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadexcessliquidityF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadexcessliquidityF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadexcessliquidityF.total.chg).to.be.a('string');
                expect(data.lookaheadexcessliquidityF.total.chg).to.be("");
                expect(data.lookaheadexcessliquidityF.total.rtn).to.be.a('string');
                expect(data.lookaheadexcessliquidityF.total.rtn).to.be("");
                expect(data.lookaheadexcessliquidityF.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadexcessliquidityF.total.incompleteData).to.be(false);
                expect(data.lookaheadexcessliquidityF.total.endVal).to.be.a('string');
                expect(data.lookaheadexcessliquidityF.total.endVal).to.be("");
                expect(data.lookaheadexcessliquidityF.total.startVal).to.be.a('string');
                expect(data.lookaheadexcessliquidityF.total.startVal).to.be("");
              expect(data.lookaheadexcessliquidityF.startDate).to.be.a('string');
              expect(data.lookaheadexcessliquidityF.startDate).to.be("");
              {
                let dataCtr = data.lookaheadexcessliquidityF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadexcessliquidityF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadexcessliquidityF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadexcessliquidityF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadexcessliquidityF.endDate).to.be.a('string');
              expect(data.lookaheadexcessliquidityF.endDate).to.be("");
              expect(data.lookaheadexcessliquidityF.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadexcessliquidityF.hasExternalAccounts).to.be(false);
              expect(data.lookaheadexcessliquidityF.rc).to.be.a('number');
              expect(data.lookaheadexcessliquidityF.rc).to.be(0);
              expect(data.lookaheadexcessliquidityF.currency).to.be.a('string');
              expect(data.lookaheadexcessliquidityF.currency).to.be("");
              expect(data.lookaheadexcessliquidityF.userId).to.be.a('string');
              expect(data.lookaheadexcessliquidityF.userId).to.be("");
              expect(data.lookaheadexcessliquidityF.pm).to.be.a('string');
              expect(data.lookaheadexcessliquidityF.pm).to.be("");
              expect(data.lookaheadexcessliquidityF.view).to.be.a('string');
              expect(data.lookaheadexcessliquidityF.view).to.be("");
              expect(data.lookaheadexcessliquidityF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadexcessliquidityF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadexcessliquidityS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadexcessliquidityS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadexcessliquidityS.total.chg).to.be.a('string');
                expect(data.lookaheadexcessliquidityS.total.chg).to.be("");
                expect(data.lookaheadexcessliquidityS.total.rtn).to.be.a('string');
                expect(data.lookaheadexcessliquidityS.total.rtn).to.be("");
                expect(data.lookaheadexcessliquidityS.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadexcessliquidityS.total.incompleteData).to.be(false);
                expect(data.lookaheadexcessliquidityS.total.endVal).to.be.a('string');
                expect(data.lookaheadexcessliquidityS.total.endVal).to.be("");
                expect(data.lookaheadexcessliquidityS.total.startVal).to.be.a('string');
                expect(data.lookaheadexcessliquidityS.total.startVal).to.be("");
              expect(data.lookaheadexcessliquidityS.startDate).to.be.a('string');
              expect(data.lookaheadexcessliquidityS.startDate).to.be("");
              {
                let dataCtr = data.lookaheadexcessliquidityS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadexcessliquidityS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadexcessliquidityS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadexcessliquidityS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadexcessliquidityS.endDate).to.be.a('string');
              expect(data.lookaheadexcessliquidityS.endDate).to.be("");
              expect(data.lookaheadexcessliquidityS.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadexcessliquidityS.hasExternalAccounts).to.be(false);
              expect(data.lookaheadexcessliquidityS.rc).to.be.a('number');
              expect(data.lookaheadexcessliquidityS.rc).to.be(0);
              expect(data.lookaheadexcessliquidityS.currency).to.be.a('string');
              expect(data.lookaheadexcessliquidityS.currency).to.be("");
              expect(data.lookaheadexcessliquidityS.userId).to.be.a('string');
              expect(data.lookaheadexcessliquidityS.userId).to.be("");
              expect(data.lookaheadexcessliquidityS.pm).to.be.a('string');
              expect(data.lookaheadexcessliquidityS.pm).to.be("");
              expect(data.lookaheadexcessliquidityS.view).to.be.a('string');
              expect(data.lookaheadexcessliquidityS.view).to.be("");
              expect(data.lookaheadexcessliquidityS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadexcessliquidityS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadinitmarginreq).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadinitmarginreq.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadinitmarginreq.total.chg).to.be.a('string');
                expect(data.lookaheadinitmarginreq.total.chg).to.be("");
                expect(data.lookaheadinitmarginreq.total.rtn).to.be.a('string');
                expect(data.lookaheadinitmarginreq.total.rtn).to.be("");
                expect(data.lookaheadinitmarginreq.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadinitmarginreq.total.incompleteData).to.be(false);
                expect(data.lookaheadinitmarginreq.total.endVal).to.be.a('string');
                expect(data.lookaheadinitmarginreq.total.endVal).to.be("");
                expect(data.lookaheadinitmarginreq.total.startVal).to.be.a('string');
                expect(data.lookaheadinitmarginreq.total.startVal).to.be("");
              expect(data.lookaheadinitmarginreq.startDate).to.be.a('string');
              expect(data.lookaheadinitmarginreq.startDate).to.be("");
              {
                let dataCtr = data.lookaheadinitmarginreq.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadinitmarginreq.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadinitmarginreq.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadinitmarginreq.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadinitmarginreq.endDate).to.be.a('string');
              expect(data.lookaheadinitmarginreq.endDate).to.be("");
              expect(data.lookaheadinitmarginreq.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadinitmarginreq.hasExternalAccounts).to.be(false);
              expect(data.lookaheadinitmarginreq.rc).to.be.a('number');
              expect(data.lookaheadinitmarginreq.rc).to.be(0);
              expect(data.lookaheadinitmarginreq.currency).to.be.a('string');
              expect(data.lookaheadinitmarginreq.currency).to.be("");
              expect(data.lookaheadinitmarginreq.userId).to.be.a('string');
              expect(data.lookaheadinitmarginreq.userId).to.be("");
              expect(data.lookaheadinitmarginreq.pm).to.be.a('string');
              expect(data.lookaheadinitmarginreq.pm).to.be("");
              expect(data.lookaheadinitmarginreq.view).to.be.a('string');
              expect(data.lookaheadinitmarginreq.view).to.be("");
              expect(data.lookaheadinitmarginreq.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadinitmarginreq.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadinitmarginreqC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadinitmarginreqC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadinitmarginreqC.total.chg).to.be.a('string');
                expect(data.lookaheadinitmarginreqC.total.chg).to.be("");
                expect(data.lookaheadinitmarginreqC.total.rtn).to.be.a('string');
                expect(data.lookaheadinitmarginreqC.total.rtn).to.be("");
                expect(data.lookaheadinitmarginreqC.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadinitmarginreqC.total.incompleteData).to.be(false);
                expect(data.lookaheadinitmarginreqC.total.endVal).to.be.a('string');
                expect(data.lookaheadinitmarginreqC.total.endVal).to.be("");
                expect(data.lookaheadinitmarginreqC.total.startVal).to.be.a('string');
                expect(data.lookaheadinitmarginreqC.total.startVal).to.be("");
              expect(data.lookaheadinitmarginreqC.startDate).to.be.a('string');
              expect(data.lookaheadinitmarginreqC.startDate).to.be("");
              {
                let dataCtr = data.lookaheadinitmarginreqC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadinitmarginreqC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadinitmarginreqC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadinitmarginreqC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadinitmarginreqC.endDate).to.be.a('string');
              expect(data.lookaheadinitmarginreqC.endDate).to.be("");
              expect(data.lookaheadinitmarginreqC.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadinitmarginreqC.hasExternalAccounts).to.be(false);
              expect(data.lookaheadinitmarginreqC.rc).to.be.a('number');
              expect(data.lookaheadinitmarginreqC.rc).to.be(0);
              expect(data.lookaheadinitmarginreqC.currency).to.be.a('string');
              expect(data.lookaheadinitmarginreqC.currency).to.be("");
              expect(data.lookaheadinitmarginreqC.userId).to.be.a('string');
              expect(data.lookaheadinitmarginreqC.userId).to.be("");
              expect(data.lookaheadinitmarginreqC.pm).to.be.a('string');
              expect(data.lookaheadinitmarginreqC.pm).to.be("");
              expect(data.lookaheadinitmarginreqC.view).to.be.a('string');
              expect(data.lookaheadinitmarginreqC.view).to.be("");
              expect(data.lookaheadinitmarginreqC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadinitmarginreqC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadinitmarginreqF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadinitmarginreqF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadinitmarginreqF.total.chg).to.be.a('string');
                expect(data.lookaheadinitmarginreqF.total.chg).to.be("");
                expect(data.lookaheadinitmarginreqF.total.rtn).to.be.a('string');
                expect(data.lookaheadinitmarginreqF.total.rtn).to.be("");
                expect(data.lookaheadinitmarginreqF.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadinitmarginreqF.total.incompleteData).to.be(false);
                expect(data.lookaheadinitmarginreqF.total.endVal).to.be.a('string');
                expect(data.lookaheadinitmarginreqF.total.endVal).to.be("");
                expect(data.lookaheadinitmarginreqF.total.startVal).to.be.a('string');
                expect(data.lookaheadinitmarginreqF.total.startVal).to.be("");
              expect(data.lookaheadinitmarginreqF.startDate).to.be.a('string');
              expect(data.lookaheadinitmarginreqF.startDate).to.be("");
              {
                let dataCtr = data.lookaheadinitmarginreqF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadinitmarginreqF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadinitmarginreqF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadinitmarginreqF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadinitmarginreqF.endDate).to.be.a('string');
              expect(data.lookaheadinitmarginreqF.endDate).to.be("");
              expect(data.lookaheadinitmarginreqF.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadinitmarginreqF.hasExternalAccounts).to.be(false);
              expect(data.lookaheadinitmarginreqF.rc).to.be.a('number');
              expect(data.lookaheadinitmarginreqF.rc).to.be(0);
              expect(data.lookaheadinitmarginreqF.currency).to.be.a('string');
              expect(data.lookaheadinitmarginreqF.currency).to.be("");
              expect(data.lookaheadinitmarginreqF.userId).to.be.a('string');
              expect(data.lookaheadinitmarginreqF.userId).to.be("");
              expect(data.lookaheadinitmarginreqF.pm).to.be.a('string');
              expect(data.lookaheadinitmarginreqF.pm).to.be("");
              expect(data.lookaheadinitmarginreqF.view).to.be.a('string');
              expect(data.lookaheadinitmarginreqF.view).to.be("");
              expect(data.lookaheadinitmarginreqF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadinitmarginreqF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadinitmarginreqS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadinitmarginreqS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadinitmarginreqS.total.chg).to.be.a('string');
                expect(data.lookaheadinitmarginreqS.total.chg).to.be("");
                expect(data.lookaheadinitmarginreqS.total.rtn).to.be.a('string');
                expect(data.lookaheadinitmarginreqS.total.rtn).to.be("");
                expect(data.lookaheadinitmarginreqS.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadinitmarginreqS.total.incompleteData).to.be(false);
                expect(data.lookaheadinitmarginreqS.total.endVal).to.be.a('string');
                expect(data.lookaheadinitmarginreqS.total.endVal).to.be("");
                expect(data.lookaheadinitmarginreqS.total.startVal).to.be.a('string');
                expect(data.lookaheadinitmarginreqS.total.startVal).to.be("");
              expect(data.lookaheadinitmarginreqS.startDate).to.be.a('string');
              expect(data.lookaheadinitmarginreqS.startDate).to.be("");
              {
                let dataCtr = data.lookaheadinitmarginreqS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadinitmarginreqS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadinitmarginreqS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadinitmarginreqS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadinitmarginreqS.endDate).to.be.a('string');
              expect(data.lookaheadinitmarginreqS.endDate).to.be("");
              expect(data.lookaheadinitmarginreqS.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadinitmarginreqS.hasExternalAccounts).to.be(false);
              expect(data.lookaheadinitmarginreqS.rc).to.be.a('number');
              expect(data.lookaheadinitmarginreqS.rc).to.be(0);
              expect(data.lookaheadinitmarginreqS.currency).to.be.a('string');
              expect(data.lookaheadinitmarginreqS.currency).to.be("");
              expect(data.lookaheadinitmarginreqS.userId).to.be.a('string');
              expect(data.lookaheadinitmarginreqS.userId).to.be("");
              expect(data.lookaheadinitmarginreqS.pm).to.be.a('string');
              expect(data.lookaheadinitmarginreqS.pm).to.be("");
              expect(data.lookaheadinitmarginreqS.view).to.be.a('string');
              expect(data.lookaheadinitmarginreqS.view).to.be("");
              expect(data.lookaheadinitmarginreqS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadinitmarginreqS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadmaintmarginreq).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadmaintmarginreq.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadmaintmarginreq.total.chg).to.be.a('string');
                expect(data.lookaheadmaintmarginreq.total.chg).to.be("");
                expect(data.lookaheadmaintmarginreq.total.rtn).to.be.a('string');
                expect(data.lookaheadmaintmarginreq.total.rtn).to.be("");
                expect(data.lookaheadmaintmarginreq.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadmaintmarginreq.total.incompleteData).to.be(false);
                expect(data.lookaheadmaintmarginreq.total.endVal).to.be.a('string');
                expect(data.lookaheadmaintmarginreq.total.endVal).to.be("");
                expect(data.lookaheadmaintmarginreq.total.startVal).to.be.a('string');
                expect(data.lookaheadmaintmarginreq.total.startVal).to.be("");
              expect(data.lookaheadmaintmarginreq.startDate).to.be.a('string');
              expect(data.lookaheadmaintmarginreq.startDate).to.be("");
              {
                let dataCtr = data.lookaheadmaintmarginreq.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadmaintmarginreq.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadmaintmarginreq.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadmaintmarginreq.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadmaintmarginreq.endDate).to.be.a('string');
              expect(data.lookaheadmaintmarginreq.endDate).to.be("");
              expect(data.lookaheadmaintmarginreq.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadmaintmarginreq.hasExternalAccounts).to.be(false);
              expect(data.lookaheadmaintmarginreq.rc).to.be.a('number');
              expect(data.lookaheadmaintmarginreq.rc).to.be(0);
              expect(data.lookaheadmaintmarginreq.currency).to.be.a('string');
              expect(data.lookaheadmaintmarginreq.currency).to.be("");
              expect(data.lookaheadmaintmarginreq.userId).to.be.a('string');
              expect(data.lookaheadmaintmarginreq.userId).to.be("");
              expect(data.lookaheadmaintmarginreq.pm).to.be.a('string');
              expect(data.lookaheadmaintmarginreq.pm).to.be("");
              expect(data.lookaheadmaintmarginreq.view).to.be.a('string');
              expect(data.lookaheadmaintmarginreq.view).to.be("");
              expect(data.lookaheadmaintmarginreq.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadmaintmarginreq.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadmaintmarginreqC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadmaintmarginreqC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadmaintmarginreqC.total.chg).to.be.a('string');
                expect(data.lookaheadmaintmarginreqC.total.chg).to.be("");
                expect(data.lookaheadmaintmarginreqC.total.rtn).to.be.a('string');
                expect(data.lookaheadmaintmarginreqC.total.rtn).to.be("");
                expect(data.lookaheadmaintmarginreqC.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadmaintmarginreqC.total.incompleteData).to.be(false);
                expect(data.lookaheadmaintmarginreqC.total.endVal).to.be.a('string');
                expect(data.lookaheadmaintmarginreqC.total.endVal).to.be("");
                expect(data.lookaheadmaintmarginreqC.total.startVal).to.be.a('string');
                expect(data.lookaheadmaintmarginreqC.total.startVal).to.be("");
              expect(data.lookaheadmaintmarginreqC.startDate).to.be.a('string');
              expect(data.lookaheadmaintmarginreqC.startDate).to.be("");
              {
                let dataCtr = data.lookaheadmaintmarginreqC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadmaintmarginreqC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadmaintmarginreqC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadmaintmarginreqC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadmaintmarginreqC.endDate).to.be.a('string');
              expect(data.lookaheadmaintmarginreqC.endDate).to.be("");
              expect(data.lookaheadmaintmarginreqC.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadmaintmarginreqC.hasExternalAccounts).to.be(false);
              expect(data.lookaheadmaintmarginreqC.rc).to.be.a('number');
              expect(data.lookaheadmaintmarginreqC.rc).to.be(0);
              expect(data.lookaheadmaintmarginreqC.currency).to.be.a('string');
              expect(data.lookaheadmaintmarginreqC.currency).to.be("");
              expect(data.lookaheadmaintmarginreqC.userId).to.be.a('string');
              expect(data.lookaheadmaintmarginreqC.userId).to.be("");
              expect(data.lookaheadmaintmarginreqC.pm).to.be.a('string');
              expect(data.lookaheadmaintmarginreqC.pm).to.be("");
              expect(data.lookaheadmaintmarginreqC.view).to.be.a('string');
              expect(data.lookaheadmaintmarginreqC.view).to.be("");
              expect(data.lookaheadmaintmarginreqC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadmaintmarginreqC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadmaintmarginreqF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadmaintmarginreqF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadmaintmarginreqF.total.chg).to.be.a('string');
                expect(data.lookaheadmaintmarginreqF.total.chg).to.be("");
                expect(data.lookaheadmaintmarginreqF.total.rtn).to.be.a('string');
                expect(data.lookaheadmaintmarginreqF.total.rtn).to.be("");
                expect(data.lookaheadmaintmarginreqF.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadmaintmarginreqF.total.incompleteData).to.be(false);
                expect(data.lookaheadmaintmarginreqF.total.endVal).to.be.a('string');
                expect(data.lookaheadmaintmarginreqF.total.endVal).to.be("");
                expect(data.lookaheadmaintmarginreqF.total.startVal).to.be.a('string');
                expect(data.lookaheadmaintmarginreqF.total.startVal).to.be("");
              expect(data.lookaheadmaintmarginreqF.startDate).to.be.a('string');
              expect(data.lookaheadmaintmarginreqF.startDate).to.be("");
              {
                let dataCtr = data.lookaheadmaintmarginreqF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadmaintmarginreqF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadmaintmarginreqF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadmaintmarginreqF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadmaintmarginreqF.endDate).to.be.a('string');
              expect(data.lookaheadmaintmarginreqF.endDate).to.be("");
              expect(data.lookaheadmaintmarginreqF.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadmaintmarginreqF.hasExternalAccounts).to.be(false);
              expect(data.lookaheadmaintmarginreqF.rc).to.be.a('number');
              expect(data.lookaheadmaintmarginreqF.rc).to.be(0);
              expect(data.lookaheadmaintmarginreqF.currency).to.be.a('string');
              expect(data.lookaheadmaintmarginreqF.currency).to.be("");
              expect(data.lookaheadmaintmarginreqF.userId).to.be.a('string');
              expect(data.lookaheadmaintmarginreqF.userId).to.be("");
              expect(data.lookaheadmaintmarginreqF.pm).to.be.a('string');
              expect(data.lookaheadmaintmarginreqF.pm).to.be("");
              expect(data.lookaheadmaintmarginreqF.view).to.be.a('string');
              expect(data.lookaheadmaintmarginreqF.view).to.be("");
              expect(data.lookaheadmaintmarginreqF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadmaintmarginreqF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadmaintmarginreqS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadmaintmarginreqS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadmaintmarginreqS.total.chg).to.be.a('string');
                expect(data.lookaheadmaintmarginreqS.total.chg).to.be("");
                expect(data.lookaheadmaintmarginreqS.total.rtn).to.be.a('string');
                expect(data.lookaheadmaintmarginreqS.total.rtn).to.be("");
                expect(data.lookaheadmaintmarginreqS.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadmaintmarginreqS.total.incompleteData).to.be(false);
                expect(data.lookaheadmaintmarginreqS.total.endVal).to.be.a('string');
                expect(data.lookaheadmaintmarginreqS.total.endVal).to.be("");
                expect(data.lookaheadmaintmarginreqS.total.startVal).to.be.a('string');
                expect(data.lookaheadmaintmarginreqS.total.startVal).to.be("");
              expect(data.lookaheadmaintmarginreqS.startDate).to.be.a('string');
              expect(data.lookaheadmaintmarginreqS.startDate).to.be("");
              {
                let dataCtr = data.lookaheadmaintmarginreqS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadmaintmarginreqS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadmaintmarginreqS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadmaintmarginreqS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadmaintmarginreqS.endDate).to.be.a('string');
              expect(data.lookaheadmaintmarginreqS.endDate).to.be("");
              expect(data.lookaheadmaintmarginreqS.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadmaintmarginreqS.hasExternalAccounts).to.be(false);
              expect(data.lookaheadmaintmarginreqS.rc).to.be.a('number');
              expect(data.lookaheadmaintmarginreqS.rc).to.be(0);
              expect(data.lookaheadmaintmarginreqS.currency).to.be.a('string');
              expect(data.lookaheadmaintmarginreqS.currency).to.be("");
              expect(data.lookaheadmaintmarginreqS.userId).to.be.a('string');
              expect(data.lookaheadmaintmarginreqS.userId).to.be("");
              expect(data.lookaheadmaintmarginreqS.pm).to.be.a('string');
              expect(data.lookaheadmaintmarginreqS.pm).to.be("");
              expect(data.lookaheadmaintmarginreqS.view).to.be.a('string');
              expect(data.lookaheadmaintmarginreqS.view).to.be("");
              expect(data.lookaheadmaintmarginreqS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadmaintmarginreqS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.lookaheadnextchange).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.lookaheadnextchange.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.lookaheadnextchange.total.chg).to.be.a('string');
                expect(data.lookaheadnextchange.total.chg).to.be("");
                expect(data.lookaheadnextchange.total.rtn).to.be.a('string');
                expect(data.lookaheadnextchange.total.rtn).to.be("");
                expect(data.lookaheadnextchange.total.incompleteData).to.be.a('boolean');
                expect(data.lookaheadnextchange.total.incompleteData).to.be(false);
                expect(data.lookaheadnextchange.total.endVal).to.be.a('string');
                expect(data.lookaheadnextchange.total.endVal).to.be("");
                expect(data.lookaheadnextchange.total.startVal).to.be.a('string');
                expect(data.lookaheadnextchange.total.startVal).to.be("");
              expect(data.lookaheadnextchange.startDate).to.be.a('string');
              expect(data.lookaheadnextchange.startDate).to.be("");
              {
                let dataCtr = data.lookaheadnextchange.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.lookaheadnextchange.lastSuccessfulUpdate).to.be.a('string');
              expect(data.lookaheadnextchange.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.lookaheadnextchange.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.lookaheadnextchange.endDate).to.be.a('string');
              expect(data.lookaheadnextchange.endDate).to.be("");
              expect(data.lookaheadnextchange.hasExternalAccounts).to.be.a('boolean');
              expect(data.lookaheadnextchange.hasExternalAccounts).to.be(false);
              expect(data.lookaheadnextchange.rc).to.be.a('number');
              expect(data.lookaheadnextchange.rc).to.be(0);
              expect(data.lookaheadnextchange.currency).to.be.a('string');
              expect(data.lookaheadnextchange.currency).to.be("");
              expect(data.lookaheadnextchange.userId).to.be.a('string');
              expect(data.lookaheadnextchange.userId).to.be("");
              expect(data.lookaheadnextchange.pm).to.be.a('string');
              expect(data.lookaheadnextchange.pm).to.be("");
              expect(data.lookaheadnextchange.view).to.be.a('string');
              expect(data.lookaheadnextchange.view).to.be("");
              expect(data.lookaheadnextchange.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.lookaheadnextchange.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.maintmarginreq).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.maintmarginreq.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.maintmarginreq.total.chg).to.be.a('string');
                expect(data.maintmarginreq.total.chg).to.be("");
                expect(data.maintmarginreq.total.rtn).to.be.a('string');
                expect(data.maintmarginreq.total.rtn).to.be("");
                expect(data.maintmarginreq.total.incompleteData).to.be.a('boolean');
                expect(data.maintmarginreq.total.incompleteData).to.be(false);
                expect(data.maintmarginreq.total.endVal).to.be.a('string');
                expect(data.maintmarginreq.total.endVal).to.be("");
                expect(data.maintmarginreq.total.startVal).to.be.a('string');
                expect(data.maintmarginreq.total.startVal).to.be("");
              expect(data.maintmarginreq.startDate).to.be.a('string');
              expect(data.maintmarginreq.startDate).to.be("");
              {
                let dataCtr = data.maintmarginreq.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.maintmarginreq.lastSuccessfulUpdate).to.be.a('string');
              expect(data.maintmarginreq.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.maintmarginreq.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.maintmarginreq.endDate).to.be.a('string');
              expect(data.maintmarginreq.endDate).to.be("");
              expect(data.maintmarginreq.hasExternalAccounts).to.be.a('boolean');
              expect(data.maintmarginreq.hasExternalAccounts).to.be(false);
              expect(data.maintmarginreq.rc).to.be.a('number');
              expect(data.maintmarginreq.rc).to.be(0);
              expect(data.maintmarginreq.currency).to.be.a('string');
              expect(data.maintmarginreq.currency).to.be("");
              expect(data.maintmarginreq.userId).to.be.a('string');
              expect(data.maintmarginreq.userId).to.be("");
              expect(data.maintmarginreq.pm).to.be.a('string');
              expect(data.maintmarginreq.pm).to.be("");
              expect(data.maintmarginreq.view).to.be.a('string');
              expect(data.maintmarginreq.view).to.be("");
              expect(data.maintmarginreq.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.maintmarginreq.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.maintmarginreqC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.maintmarginreqC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.maintmarginreqC.total.chg).to.be.a('string');
                expect(data.maintmarginreqC.total.chg).to.be("");
                expect(data.maintmarginreqC.total.rtn).to.be.a('string');
                expect(data.maintmarginreqC.total.rtn).to.be("");
                expect(data.maintmarginreqC.total.incompleteData).to.be.a('boolean');
                expect(data.maintmarginreqC.total.incompleteData).to.be(false);
                expect(data.maintmarginreqC.total.endVal).to.be.a('string');
                expect(data.maintmarginreqC.total.endVal).to.be("");
                expect(data.maintmarginreqC.total.startVal).to.be.a('string');
                expect(data.maintmarginreqC.total.startVal).to.be("");
              expect(data.maintmarginreqC.startDate).to.be.a('string');
              expect(data.maintmarginreqC.startDate).to.be("");
              {
                let dataCtr = data.maintmarginreqC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.maintmarginreqC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.maintmarginreqC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.maintmarginreqC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.maintmarginreqC.endDate).to.be.a('string');
              expect(data.maintmarginreqC.endDate).to.be("");
              expect(data.maintmarginreqC.hasExternalAccounts).to.be.a('boolean');
              expect(data.maintmarginreqC.hasExternalAccounts).to.be(false);
              expect(data.maintmarginreqC.rc).to.be.a('number');
              expect(data.maintmarginreqC.rc).to.be(0);
              expect(data.maintmarginreqC.currency).to.be.a('string');
              expect(data.maintmarginreqC.currency).to.be("");
              expect(data.maintmarginreqC.userId).to.be.a('string');
              expect(data.maintmarginreqC.userId).to.be("");
              expect(data.maintmarginreqC.pm).to.be.a('string');
              expect(data.maintmarginreqC.pm).to.be("");
              expect(data.maintmarginreqC.view).to.be.a('string');
              expect(data.maintmarginreqC.view).to.be("");
              expect(data.maintmarginreqC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.maintmarginreqC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.maintmarginreqF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.maintmarginreqF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.maintmarginreqF.total.chg).to.be.a('string');
                expect(data.maintmarginreqF.total.chg).to.be("");
                expect(data.maintmarginreqF.total.rtn).to.be.a('string');
                expect(data.maintmarginreqF.total.rtn).to.be("");
                expect(data.maintmarginreqF.total.incompleteData).to.be.a('boolean');
                expect(data.maintmarginreqF.total.incompleteData).to.be(false);
                expect(data.maintmarginreqF.total.endVal).to.be.a('string');
                expect(data.maintmarginreqF.total.endVal).to.be("");
                expect(data.maintmarginreqF.total.startVal).to.be.a('string');
                expect(data.maintmarginreqF.total.startVal).to.be("");
              expect(data.maintmarginreqF.startDate).to.be.a('string');
              expect(data.maintmarginreqF.startDate).to.be("");
              {
                let dataCtr = data.maintmarginreqF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.maintmarginreqF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.maintmarginreqF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.maintmarginreqF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.maintmarginreqF.endDate).to.be.a('string');
              expect(data.maintmarginreqF.endDate).to.be("");
              expect(data.maintmarginreqF.hasExternalAccounts).to.be.a('boolean');
              expect(data.maintmarginreqF.hasExternalAccounts).to.be(false);
              expect(data.maintmarginreqF.rc).to.be.a('number');
              expect(data.maintmarginreqF.rc).to.be(0);
              expect(data.maintmarginreqF.currency).to.be.a('string');
              expect(data.maintmarginreqF.currency).to.be("");
              expect(data.maintmarginreqF.userId).to.be.a('string');
              expect(data.maintmarginreqF.userId).to.be("");
              expect(data.maintmarginreqF.pm).to.be.a('string');
              expect(data.maintmarginreqF.pm).to.be("");
              expect(data.maintmarginreqF.view).to.be.a('string');
              expect(data.maintmarginreqF.view).to.be("");
              expect(data.maintmarginreqF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.maintmarginreqF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.maintmarginreqS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.maintmarginreqS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.maintmarginreqS.total.chg).to.be.a('string');
                expect(data.maintmarginreqS.total.chg).to.be("");
                expect(data.maintmarginreqS.total.rtn).to.be.a('string');
                expect(data.maintmarginreqS.total.rtn).to.be("");
                expect(data.maintmarginreqS.total.incompleteData).to.be.a('boolean');
                expect(data.maintmarginreqS.total.incompleteData).to.be(false);
                expect(data.maintmarginreqS.total.endVal).to.be.a('string');
                expect(data.maintmarginreqS.total.endVal).to.be("");
                expect(data.maintmarginreqS.total.startVal).to.be.a('string');
                expect(data.maintmarginreqS.total.startVal).to.be("");
              expect(data.maintmarginreqS.startDate).to.be.a('string');
              expect(data.maintmarginreqS.startDate).to.be("");
              {
                let dataCtr = data.maintmarginreqS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.maintmarginreqS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.maintmarginreqS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.maintmarginreqS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.maintmarginreqS.endDate).to.be.a('string');
              expect(data.maintmarginreqS.endDate).to.be("");
              expect(data.maintmarginreqS.hasExternalAccounts).to.be.a('boolean');
              expect(data.maintmarginreqS.hasExternalAccounts).to.be(false);
              expect(data.maintmarginreqS.rc).to.be.a('number');
              expect(data.maintmarginreqS.rc).to.be(0);
              expect(data.maintmarginreqS.currency).to.be.a('string');
              expect(data.maintmarginreqS.currency).to.be("");
              expect(data.maintmarginreqS.userId).to.be.a('string');
              expect(data.maintmarginreqS.userId).to.be("");
              expect(data.maintmarginreqS.pm).to.be.a('string');
              expect(data.maintmarginreqS.pm).to.be("");
              expect(data.maintmarginreqS.view).to.be.a('string');
              expect(data.maintmarginreqS.view).to.be("");
              expect(data.maintmarginreqS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.maintmarginreqS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.netliquidation).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.netliquidation.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.netliquidation.total.chg).to.be.a('string');
                expect(data.netliquidation.total.chg).to.be("");
                expect(data.netliquidation.total.rtn).to.be.a('string');
                expect(data.netliquidation.total.rtn).to.be("");
                expect(data.netliquidation.total.incompleteData).to.be.a('boolean');
                expect(data.netliquidation.total.incompleteData).to.be(false);
                expect(data.netliquidation.total.endVal).to.be.a('string');
                expect(data.netliquidation.total.endVal).to.be("");
                expect(data.netliquidation.total.startVal).to.be.a('string');
                expect(data.netliquidation.total.startVal).to.be("");
              expect(data.netliquidation.startDate).to.be.a('string');
              expect(data.netliquidation.startDate).to.be("");
              {
                let dataCtr = data.netliquidation.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.netliquidation.lastSuccessfulUpdate).to.be.a('string');
              expect(data.netliquidation.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.netliquidation.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.netliquidation.endDate).to.be.a('string');
              expect(data.netliquidation.endDate).to.be("");
              expect(data.netliquidation.hasExternalAccounts).to.be.a('boolean');
              expect(data.netliquidation.hasExternalAccounts).to.be(false);
              expect(data.netliquidation.rc).to.be.a('number');
              expect(data.netliquidation.rc).to.be(0);
              expect(data.netliquidation.currency).to.be.a('string');
              expect(data.netliquidation.currency).to.be("");
              expect(data.netliquidation.userId).to.be.a('string');
              expect(data.netliquidation.userId).to.be("");
              expect(data.netliquidation.pm).to.be.a('string');
              expect(data.netliquidation.pm).to.be("");
              expect(data.netliquidation.view).to.be.a('string');
              expect(data.netliquidation.view).to.be("");
              expect(data.netliquidation.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.netliquidation.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.netliquidationC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.netliquidationC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.netliquidationC.total.chg).to.be.a('string');
                expect(data.netliquidationC.total.chg).to.be("");
                expect(data.netliquidationC.total.rtn).to.be.a('string');
                expect(data.netliquidationC.total.rtn).to.be("");
                expect(data.netliquidationC.total.incompleteData).to.be.a('boolean');
                expect(data.netliquidationC.total.incompleteData).to.be(false);
                expect(data.netliquidationC.total.endVal).to.be.a('string');
                expect(data.netliquidationC.total.endVal).to.be("");
                expect(data.netliquidationC.total.startVal).to.be.a('string');
                expect(data.netliquidationC.total.startVal).to.be("");
              expect(data.netliquidationC.startDate).to.be.a('string');
              expect(data.netliquidationC.startDate).to.be("");
              {
                let dataCtr = data.netliquidationC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.netliquidationC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.netliquidationC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.netliquidationC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.netliquidationC.endDate).to.be.a('string');
              expect(data.netliquidationC.endDate).to.be("");
              expect(data.netliquidationC.hasExternalAccounts).to.be.a('boolean');
              expect(data.netliquidationC.hasExternalAccounts).to.be(false);
              expect(data.netliquidationC.rc).to.be.a('number');
              expect(data.netliquidationC.rc).to.be(0);
              expect(data.netliquidationC.currency).to.be.a('string');
              expect(data.netliquidationC.currency).to.be("");
              expect(data.netliquidationC.userId).to.be.a('string');
              expect(data.netliquidationC.userId).to.be("");
              expect(data.netliquidationC.pm).to.be.a('string');
              expect(data.netliquidationC.pm).to.be("");
              expect(data.netliquidationC.view).to.be.a('string');
              expect(data.netliquidationC.view).to.be("");
              expect(data.netliquidationC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.netliquidationC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.netliquidationF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.netliquidationF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.netliquidationF.total.chg).to.be.a('string');
                expect(data.netliquidationF.total.chg).to.be("");
                expect(data.netliquidationF.total.rtn).to.be.a('string');
                expect(data.netliquidationF.total.rtn).to.be("");
                expect(data.netliquidationF.total.incompleteData).to.be.a('boolean');
                expect(data.netliquidationF.total.incompleteData).to.be(false);
                expect(data.netliquidationF.total.endVal).to.be.a('string');
                expect(data.netliquidationF.total.endVal).to.be("");
                expect(data.netliquidationF.total.startVal).to.be.a('string');
                expect(data.netliquidationF.total.startVal).to.be("");
              expect(data.netliquidationF.startDate).to.be.a('string');
              expect(data.netliquidationF.startDate).to.be("");
              {
                let dataCtr = data.netliquidationF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.netliquidationF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.netliquidationF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.netliquidationF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.netliquidationF.endDate).to.be.a('string');
              expect(data.netliquidationF.endDate).to.be("");
              expect(data.netliquidationF.hasExternalAccounts).to.be.a('boolean');
              expect(data.netliquidationF.hasExternalAccounts).to.be(false);
              expect(data.netliquidationF.rc).to.be.a('number');
              expect(data.netliquidationF.rc).to.be(0);
              expect(data.netliquidationF.currency).to.be.a('string');
              expect(data.netliquidationF.currency).to.be("");
              expect(data.netliquidationF.userId).to.be.a('string');
              expect(data.netliquidationF.userId).to.be("");
              expect(data.netliquidationF.pm).to.be.a('string');
              expect(data.netliquidationF.pm).to.be("");
              expect(data.netliquidationF.view).to.be.a('string');
              expect(data.netliquidationF.view).to.be("");
              expect(data.netliquidationF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.netliquidationF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.netliquidationS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.netliquidationS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.netliquidationS.total.chg).to.be.a('string');
                expect(data.netliquidationS.total.chg).to.be("");
                expect(data.netliquidationS.total.rtn).to.be.a('string');
                expect(data.netliquidationS.total.rtn).to.be("");
                expect(data.netliquidationS.total.incompleteData).to.be.a('boolean');
                expect(data.netliquidationS.total.incompleteData).to.be(false);
                expect(data.netliquidationS.total.endVal).to.be.a('string');
                expect(data.netliquidationS.total.endVal).to.be("");
                expect(data.netliquidationS.total.startVal).to.be.a('string');
                expect(data.netliquidationS.total.startVal).to.be("");
              expect(data.netliquidationS.startDate).to.be.a('string');
              expect(data.netliquidationS.startDate).to.be("");
              {
                let dataCtr = data.netliquidationS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.netliquidationS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.netliquidationS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.netliquidationS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.netliquidationS.endDate).to.be.a('string');
              expect(data.netliquidationS.endDate).to.be("");
              expect(data.netliquidationS.hasExternalAccounts).to.be.a('boolean');
              expect(data.netliquidationS.hasExternalAccounts).to.be(false);
              expect(data.netliquidationS.rc).to.be.a('number');
              expect(data.netliquidationS.rc).to.be(0);
              expect(data.netliquidationS.currency).to.be.a('string');
              expect(data.netliquidationS.currency).to.be("");
              expect(data.netliquidationS.userId).to.be.a('string');
              expect(data.netliquidationS.userId).to.be("");
              expect(data.netliquidationS.pm).to.be.a('string');
              expect(data.netliquidationS.pm).to.be("");
              expect(data.netliquidationS.view).to.be.a('string');
              expect(data.netliquidationS.view).to.be("");
              expect(data.netliquidationS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.netliquidationS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.netliquidationuncertainty).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.netliquidationuncertainty.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.netliquidationuncertainty.total.chg).to.be.a('string');
                expect(data.netliquidationuncertainty.total.chg).to.be("");
                expect(data.netliquidationuncertainty.total.rtn).to.be.a('string');
                expect(data.netliquidationuncertainty.total.rtn).to.be("");
                expect(data.netliquidationuncertainty.total.incompleteData).to.be.a('boolean');
                expect(data.netliquidationuncertainty.total.incompleteData).to.be(false);
                expect(data.netliquidationuncertainty.total.endVal).to.be.a('string');
                expect(data.netliquidationuncertainty.total.endVal).to.be("");
                expect(data.netliquidationuncertainty.total.startVal).to.be.a('string');
                expect(data.netliquidationuncertainty.total.startVal).to.be("");
              expect(data.netliquidationuncertainty.startDate).to.be.a('string');
              expect(data.netliquidationuncertainty.startDate).to.be("");
              {
                let dataCtr = data.netliquidationuncertainty.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.netliquidationuncertainty.lastSuccessfulUpdate).to.be.a('string');
              expect(data.netliquidationuncertainty.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.netliquidationuncertainty.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.netliquidationuncertainty.endDate).to.be.a('string');
              expect(data.netliquidationuncertainty.endDate).to.be("");
              expect(data.netliquidationuncertainty.hasExternalAccounts).to.be.a('boolean');
              expect(data.netliquidationuncertainty.hasExternalAccounts).to.be(false);
              expect(data.netliquidationuncertainty.rc).to.be.a('number');
              expect(data.netliquidationuncertainty.rc).to.be(0);
              expect(data.netliquidationuncertainty.currency).to.be.a('string');
              expect(data.netliquidationuncertainty.currency).to.be("");
              expect(data.netliquidationuncertainty.userId).to.be.a('string');
              expect(data.netliquidationuncertainty.userId).to.be("");
              expect(data.netliquidationuncertainty.pm).to.be.a('string');
              expect(data.netliquidationuncertainty.pm).to.be("");
              expect(data.netliquidationuncertainty.view).to.be.a('string');
              expect(data.netliquidationuncertainty.view).to.be("");
              expect(data.netliquidationuncertainty.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.netliquidationuncertainty.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.nlvandmargininreview).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.nlvandmargininreview.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.nlvandmargininreview.total.chg).to.be.a('string');
                expect(data.nlvandmargininreview.total.chg).to.be("");
                expect(data.nlvandmargininreview.total.rtn).to.be.a('string');
                expect(data.nlvandmargininreview.total.rtn).to.be("");
                expect(data.nlvandmargininreview.total.incompleteData).to.be.a('boolean');
                expect(data.nlvandmargininreview.total.incompleteData).to.be(false);
                expect(data.nlvandmargininreview.total.endVal).to.be.a('string');
                expect(data.nlvandmargininreview.total.endVal).to.be("");
                expect(data.nlvandmargininreview.total.startVal).to.be.a('string');
                expect(data.nlvandmargininreview.total.startVal).to.be("");
              expect(data.nlvandmargininreview.startDate).to.be.a('string');
              expect(data.nlvandmargininreview.startDate).to.be("");
              {
                let dataCtr = data.nlvandmargininreview.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.nlvandmargininreview.lastSuccessfulUpdate).to.be.a('string');
              expect(data.nlvandmargininreview.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.nlvandmargininreview.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.nlvandmargininreview.endDate).to.be.a('string');
              expect(data.nlvandmargininreview.endDate).to.be("");
              expect(data.nlvandmargininreview.hasExternalAccounts).to.be.a('boolean');
              expect(data.nlvandmargininreview.hasExternalAccounts).to.be(false);
              expect(data.nlvandmargininreview.rc).to.be.a('number');
              expect(data.nlvandmargininreview.rc).to.be(0);
              expect(data.nlvandmargininreview.currency).to.be.a('string');
              expect(data.nlvandmargininreview.currency).to.be("");
              expect(data.nlvandmargininreview.userId).to.be.a('string');
              expect(data.nlvandmargininreview.userId).to.be("");
              expect(data.nlvandmargininreview.pm).to.be.a('string');
              expect(data.nlvandmargininreview.pm).to.be("");
              expect(data.nlvandmargininreview.view).to.be.a('string');
              expect(data.nlvandmargininreview.view).to.be("");
              expect(data.nlvandmargininreview.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.nlvandmargininreview.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.pasharesvalue).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.pasharesvalue.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.pasharesvalue.total.chg).to.be.a('string');
                expect(data.pasharesvalue.total.chg).to.be("");
                expect(data.pasharesvalue.total.rtn).to.be.a('string');
                expect(data.pasharesvalue.total.rtn).to.be("");
                expect(data.pasharesvalue.total.incompleteData).to.be.a('boolean');
                expect(data.pasharesvalue.total.incompleteData).to.be(false);
                expect(data.pasharesvalue.total.endVal).to.be.a('string');
                expect(data.pasharesvalue.total.endVal).to.be("");
                expect(data.pasharesvalue.total.startVal).to.be.a('string');
                expect(data.pasharesvalue.total.startVal).to.be("");
              expect(data.pasharesvalue.startDate).to.be.a('string');
              expect(data.pasharesvalue.startDate).to.be("");
              {
                let dataCtr = data.pasharesvalue.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.pasharesvalue.lastSuccessfulUpdate).to.be.a('string');
              expect(data.pasharesvalue.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.pasharesvalue.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.pasharesvalue.endDate).to.be.a('string');
              expect(data.pasharesvalue.endDate).to.be("");
              expect(data.pasharesvalue.hasExternalAccounts).to.be.a('boolean');
              expect(data.pasharesvalue.hasExternalAccounts).to.be(false);
              expect(data.pasharesvalue.rc).to.be.a('number');
              expect(data.pasharesvalue.rc).to.be(0);
              expect(data.pasharesvalue.currency).to.be.a('string');
              expect(data.pasharesvalue.currency).to.be("");
              expect(data.pasharesvalue.userId).to.be.a('string');
              expect(data.pasharesvalue.userId).to.be("");
              expect(data.pasharesvalue.pm).to.be.a('string');
              expect(data.pasharesvalue.pm).to.be("");
              expect(data.pasharesvalue.view).to.be.a('string');
              expect(data.pasharesvalue.view).to.be("");
              expect(data.pasharesvalue.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.pasharesvalue.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.pasharesvalueC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.pasharesvalueC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.pasharesvalueC.total.chg).to.be.a('string');
                expect(data.pasharesvalueC.total.chg).to.be("");
                expect(data.pasharesvalueC.total.rtn).to.be.a('string');
                expect(data.pasharesvalueC.total.rtn).to.be("");
                expect(data.pasharesvalueC.total.incompleteData).to.be.a('boolean');
                expect(data.pasharesvalueC.total.incompleteData).to.be(false);
                expect(data.pasharesvalueC.total.endVal).to.be.a('string');
                expect(data.pasharesvalueC.total.endVal).to.be("");
                expect(data.pasharesvalueC.total.startVal).to.be.a('string');
                expect(data.pasharesvalueC.total.startVal).to.be("");
              expect(data.pasharesvalueC.startDate).to.be.a('string');
              expect(data.pasharesvalueC.startDate).to.be("");
              {
                let dataCtr = data.pasharesvalueC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.pasharesvalueC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.pasharesvalueC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.pasharesvalueC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.pasharesvalueC.endDate).to.be.a('string');
              expect(data.pasharesvalueC.endDate).to.be("");
              expect(data.pasharesvalueC.hasExternalAccounts).to.be.a('boolean');
              expect(data.pasharesvalueC.hasExternalAccounts).to.be(false);
              expect(data.pasharesvalueC.rc).to.be.a('number');
              expect(data.pasharesvalueC.rc).to.be(0);
              expect(data.pasharesvalueC.currency).to.be.a('string');
              expect(data.pasharesvalueC.currency).to.be("");
              expect(data.pasharesvalueC.userId).to.be.a('string');
              expect(data.pasharesvalueC.userId).to.be("");
              expect(data.pasharesvalueC.pm).to.be.a('string');
              expect(data.pasharesvalueC.pm).to.be("");
              expect(data.pasharesvalueC.view).to.be.a('string');
              expect(data.pasharesvalueC.view).to.be("");
              expect(data.pasharesvalueC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.pasharesvalueC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.pasharesvalueF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.pasharesvalueF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.pasharesvalueF.total.chg).to.be.a('string');
                expect(data.pasharesvalueF.total.chg).to.be("");
                expect(data.pasharesvalueF.total.rtn).to.be.a('string');
                expect(data.pasharesvalueF.total.rtn).to.be("");
                expect(data.pasharesvalueF.total.incompleteData).to.be.a('boolean');
                expect(data.pasharesvalueF.total.incompleteData).to.be(false);
                expect(data.pasharesvalueF.total.endVal).to.be.a('string');
                expect(data.pasharesvalueF.total.endVal).to.be("");
                expect(data.pasharesvalueF.total.startVal).to.be.a('string');
                expect(data.pasharesvalueF.total.startVal).to.be("");
              expect(data.pasharesvalueF.startDate).to.be.a('string');
              expect(data.pasharesvalueF.startDate).to.be("");
              {
                let dataCtr = data.pasharesvalueF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.pasharesvalueF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.pasharesvalueF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.pasharesvalueF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.pasharesvalueF.endDate).to.be.a('string');
              expect(data.pasharesvalueF.endDate).to.be("");
              expect(data.pasharesvalueF.hasExternalAccounts).to.be.a('boolean');
              expect(data.pasharesvalueF.hasExternalAccounts).to.be(false);
              expect(data.pasharesvalueF.rc).to.be.a('number');
              expect(data.pasharesvalueF.rc).to.be(0);
              expect(data.pasharesvalueF.currency).to.be.a('string');
              expect(data.pasharesvalueF.currency).to.be("");
              expect(data.pasharesvalueF.userId).to.be.a('string');
              expect(data.pasharesvalueF.userId).to.be("");
              expect(data.pasharesvalueF.pm).to.be.a('string');
              expect(data.pasharesvalueF.pm).to.be("");
              expect(data.pasharesvalueF.view).to.be.a('string');
              expect(data.pasharesvalueF.view).to.be("");
              expect(data.pasharesvalueF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.pasharesvalueF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.pasharesvalueS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.pasharesvalueS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.pasharesvalueS.total.chg).to.be.a('string');
                expect(data.pasharesvalueS.total.chg).to.be("");
                expect(data.pasharesvalueS.total.rtn).to.be.a('string');
                expect(data.pasharesvalueS.total.rtn).to.be("");
                expect(data.pasharesvalueS.total.incompleteData).to.be.a('boolean');
                expect(data.pasharesvalueS.total.incompleteData).to.be(false);
                expect(data.pasharesvalueS.total.endVal).to.be.a('string');
                expect(data.pasharesvalueS.total.endVal).to.be("");
                expect(data.pasharesvalueS.total.startVal).to.be.a('string');
                expect(data.pasharesvalueS.total.startVal).to.be("");
              expect(data.pasharesvalueS.startDate).to.be.a('string');
              expect(data.pasharesvalueS.startDate).to.be("");
              {
                let dataCtr = data.pasharesvalueS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.pasharesvalueS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.pasharesvalueS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.pasharesvalueS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.pasharesvalueS.endDate).to.be.a('string');
              expect(data.pasharesvalueS.endDate).to.be("");
              expect(data.pasharesvalueS.hasExternalAccounts).to.be.a('boolean');
              expect(data.pasharesvalueS.hasExternalAccounts).to.be(false);
              expect(data.pasharesvalueS.rc).to.be.a('number');
              expect(data.pasharesvalueS.rc).to.be(0);
              expect(data.pasharesvalueS.currency).to.be.a('string');
              expect(data.pasharesvalueS.currency).to.be("");
              expect(data.pasharesvalueS.userId).to.be.a('string');
              expect(data.pasharesvalueS.userId).to.be("");
              expect(data.pasharesvalueS.pm).to.be.a('string');
              expect(data.pasharesvalueS.pm).to.be("");
              expect(data.pasharesvalueS.view).to.be.a('string');
              expect(data.pasharesvalueS.view).to.be("");
              expect(data.pasharesvalueS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.pasharesvalueS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.postexpirationexcess).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.postexpirationexcess.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.postexpirationexcess.total.chg).to.be.a('string');
                expect(data.postexpirationexcess.total.chg).to.be("");
                expect(data.postexpirationexcess.total.rtn).to.be.a('string');
                expect(data.postexpirationexcess.total.rtn).to.be("");
                expect(data.postexpirationexcess.total.incompleteData).to.be.a('boolean');
                expect(data.postexpirationexcess.total.incompleteData).to.be(false);
                expect(data.postexpirationexcess.total.endVal).to.be.a('string');
                expect(data.postexpirationexcess.total.endVal).to.be("");
                expect(data.postexpirationexcess.total.startVal).to.be.a('string');
                expect(data.postexpirationexcess.total.startVal).to.be("");
              expect(data.postexpirationexcess.startDate).to.be.a('string');
              expect(data.postexpirationexcess.startDate).to.be("");
              {
                let dataCtr = data.postexpirationexcess.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.postexpirationexcess.lastSuccessfulUpdate).to.be.a('string');
              expect(data.postexpirationexcess.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.postexpirationexcess.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.postexpirationexcess.endDate).to.be.a('string');
              expect(data.postexpirationexcess.endDate).to.be("");
              expect(data.postexpirationexcess.hasExternalAccounts).to.be.a('boolean');
              expect(data.postexpirationexcess.hasExternalAccounts).to.be(false);
              expect(data.postexpirationexcess.rc).to.be.a('number');
              expect(data.postexpirationexcess.rc).to.be(0);
              expect(data.postexpirationexcess.currency).to.be.a('string');
              expect(data.postexpirationexcess.currency).to.be("");
              expect(data.postexpirationexcess.userId).to.be.a('string');
              expect(data.postexpirationexcess.userId).to.be("");
              expect(data.postexpirationexcess.pm).to.be.a('string');
              expect(data.postexpirationexcess.pm).to.be("");
              expect(data.postexpirationexcess.view).to.be.a('string');
              expect(data.postexpirationexcess.view).to.be("");
              expect(data.postexpirationexcess.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.postexpirationexcess.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.postexpirationexcessC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.postexpirationexcessC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.postexpirationexcessC.total.chg).to.be.a('string');
                expect(data.postexpirationexcessC.total.chg).to.be("");
                expect(data.postexpirationexcessC.total.rtn).to.be.a('string');
                expect(data.postexpirationexcessC.total.rtn).to.be("");
                expect(data.postexpirationexcessC.total.incompleteData).to.be.a('boolean');
                expect(data.postexpirationexcessC.total.incompleteData).to.be(false);
                expect(data.postexpirationexcessC.total.endVal).to.be.a('string');
                expect(data.postexpirationexcessC.total.endVal).to.be("");
                expect(data.postexpirationexcessC.total.startVal).to.be.a('string');
                expect(data.postexpirationexcessC.total.startVal).to.be("");
              expect(data.postexpirationexcessC.startDate).to.be.a('string');
              expect(data.postexpirationexcessC.startDate).to.be("");
              {
                let dataCtr = data.postexpirationexcessC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.postexpirationexcessC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.postexpirationexcessC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.postexpirationexcessC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.postexpirationexcessC.endDate).to.be.a('string');
              expect(data.postexpirationexcessC.endDate).to.be("");
              expect(data.postexpirationexcessC.hasExternalAccounts).to.be.a('boolean');
              expect(data.postexpirationexcessC.hasExternalAccounts).to.be(false);
              expect(data.postexpirationexcessC.rc).to.be.a('number');
              expect(data.postexpirationexcessC.rc).to.be(0);
              expect(data.postexpirationexcessC.currency).to.be.a('string');
              expect(data.postexpirationexcessC.currency).to.be("");
              expect(data.postexpirationexcessC.userId).to.be.a('string');
              expect(data.postexpirationexcessC.userId).to.be("");
              expect(data.postexpirationexcessC.pm).to.be.a('string');
              expect(data.postexpirationexcessC.pm).to.be("");
              expect(data.postexpirationexcessC.view).to.be.a('string');
              expect(data.postexpirationexcessC.view).to.be("");
              expect(data.postexpirationexcessC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.postexpirationexcessC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.postexpirationexcessF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.postexpirationexcessF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.postexpirationexcessF.total.chg).to.be.a('string');
                expect(data.postexpirationexcessF.total.chg).to.be("");
                expect(data.postexpirationexcessF.total.rtn).to.be.a('string');
                expect(data.postexpirationexcessF.total.rtn).to.be("");
                expect(data.postexpirationexcessF.total.incompleteData).to.be.a('boolean');
                expect(data.postexpirationexcessF.total.incompleteData).to.be(false);
                expect(data.postexpirationexcessF.total.endVal).to.be.a('string');
                expect(data.postexpirationexcessF.total.endVal).to.be("");
                expect(data.postexpirationexcessF.total.startVal).to.be.a('string');
                expect(data.postexpirationexcessF.total.startVal).to.be("");
              expect(data.postexpirationexcessF.startDate).to.be.a('string');
              expect(data.postexpirationexcessF.startDate).to.be("");
              {
                let dataCtr = data.postexpirationexcessF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.postexpirationexcessF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.postexpirationexcessF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.postexpirationexcessF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.postexpirationexcessF.endDate).to.be.a('string');
              expect(data.postexpirationexcessF.endDate).to.be("");
              expect(data.postexpirationexcessF.hasExternalAccounts).to.be.a('boolean');
              expect(data.postexpirationexcessF.hasExternalAccounts).to.be(false);
              expect(data.postexpirationexcessF.rc).to.be.a('number');
              expect(data.postexpirationexcessF.rc).to.be(0);
              expect(data.postexpirationexcessF.currency).to.be.a('string');
              expect(data.postexpirationexcessF.currency).to.be("");
              expect(data.postexpirationexcessF.userId).to.be.a('string');
              expect(data.postexpirationexcessF.userId).to.be("");
              expect(data.postexpirationexcessF.pm).to.be.a('string');
              expect(data.postexpirationexcessF.pm).to.be("");
              expect(data.postexpirationexcessF.view).to.be.a('string');
              expect(data.postexpirationexcessF.view).to.be("");
              expect(data.postexpirationexcessF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.postexpirationexcessF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.postexpirationexcessS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.postexpirationexcessS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.postexpirationexcessS.total.chg).to.be.a('string');
                expect(data.postexpirationexcessS.total.chg).to.be("");
                expect(data.postexpirationexcessS.total.rtn).to.be.a('string');
                expect(data.postexpirationexcessS.total.rtn).to.be("");
                expect(data.postexpirationexcessS.total.incompleteData).to.be.a('boolean');
                expect(data.postexpirationexcessS.total.incompleteData).to.be(false);
                expect(data.postexpirationexcessS.total.endVal).to.be.a('string');
                expect(data.postexpirationexcessS.total.endVal).to.be("");
                expect(data.postexpirationexcessS.total.startVal).to.be.a('string');
                expect(data.postexpirationexcessS.total.startVal).to.be("");
              expect(data.postexpirationexcessS.startDate).to.be.a('string');
              expect(data.postexpirationexcessS.startDate).to.be("");
              {
                let dataCtr = data.postexpirationexcessS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.postexpirationexcessS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.postexpirationexcessS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.postexpirationexcessS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.postexpirationexcessS.endDate).to.be.a('string');
              expect(data.postexpirationexcessS.endDate).to.be("");
              expect(data.postexpirationexcessS.hasExternalAccounts).to.be.a('boolean');
              expect(data.postexpirationexcessS.hasExternalAccounts).to.be(false);
              expect(data.postexpirationexcessS.rc).to.be.a('number');
              expect(data.postexpirationexcessS.rc).to.be(0);
              expect(data.postexpirationexcessS.currency).to.be.a('string');
              expect(data.postexpirationexcessS.currency).to.be("");
              expect(data.postexpirationexcessS.userId).to.be.a('string');
              expect(data.postexpirationexcessS.userId).to.be("");
              expect(data.postexpirationexcessS.pm).to.be.a('string');
              expect(data.postexpirationexcessS.pm).to.be("");
              expect(data.postexpirationexcessS.view).to.be.a('string');
              expect(data.postexpirationexcessS.view).to.be("");
              expect(data.postexpirationexcessS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.postexpirationexcessS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.postexpirationmargin).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.postexpirationmargin.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.postexpirationmargin.total.chg).to.be.a('string');
                expect(data.postexpirationmargin.total.chg).to.be("");
                expect(data.postexpirationmargin.total.rtn).to.be.a('string');
                expect(data.postexpirationmargin.total.rtn).to.be("");
                expect(data.postexpirationmargin.total.incompleteData).to.be.a('boolean');
                expect(data.postexpirationmargin.total.incompleteData).to.be(false);
                expect(data.postexpirationmargin.total.endVal).to.be.a('string');
                expect(data.postexpirationmargin.total.endVal).to.be("");
                expect(data.postexpirationmargin.total.startVal).to.be.a('string');
                expect(data.postexpirationmargin.total.startVal).to.be("");
              expect(data.postexpirationmargin.startDate).to.be.a('string');
              expect(data.postexpirationmargin.startDate).to.be("");
              {
                let dataCtr = data.postexpirationmargin.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.postexpirationmargin.lastSuccessfulUpdate).to.be.a('string');
              expect(data.postexpirationmargin.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.postexpirationmargin.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.postexpirationmargin.endDate).to.be.a('string');
              expect(data.postexpirationmargin.endDate).to.be("");
              expect(data.postexpirationmargin.hasExternalAccounts).to.be.a('boolean');
              expect(data.postexpirationmargin.hasExternalAccounts).to.be(false);
              expect(data.postexpirationmargin.rc).to.be.a('number');
              expect(data.postexpirationmargin.rc).to.be(0);
              expect(data.postexpirationmargin.currency).to.be.a('string');
              expect(data.postexpirationmargin.currency).to.be("");
              expect(data.postexpirationmargin.userId).to.be.a('string');
              expect(data.postexpirationmargin.userId).to.be("");
              expect(data.postexpirationmargin.pm).to.be.a('string');
              expect(data.postexpirationmargin.pm).to.be("");
              expect(data.postexpirationmargin.view).to.be.a('string');
              expect(data.postexpirationmargin.view).to.be("");
              expect(data.postexpirationmargin.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.postexpirationmargin.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.postexpirationmarginC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.postexpirationmarginC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.postexpirationmarginC.total.chg).to.be.a('string');
                expect(data.postexpirationmarginC.total.chg).to.be("");
                expect(data.postexpirationmarginC.total.rtn).to.be.a('string');
                expect(data.postexpirationmarginC.total.rtn).to.be("");
                expect(data.postexpirationmarginC.total.incompleteData).to.be.a('boolean');
                expect(data.postexpirationmarginC.total.incompleteData).to.be(false);
                expect(data.postexpirationmarginC.total.endVal).to.be.a('string');
                expect(data.postexpirationmarginC.total.endVal).to.be("");
                expect(data.postexpirationmarginC.total.startVal).to.be.a('string');
                expect(data.postexpirationmarginC.total.startVal).to.be("");
              expect(data.postexpirationmarginC.startDate).to.be.a('string');
              expect(data.postexpirationmarginC.startDate).to.be("");
              {
                let dataCtr = data.postexpirationmarginC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.postexpirationmarginC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.postexpirationmarginC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.postexpirationmarginC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.postexpirationmarginC.endDate).to.be.a('string');
              expect(data.postexpirationmarginC.endDate).to.be("");
              expect(data.postexpirationmarginC.hasExternalAccounts).to.be.a('boolean');
              expect(data.postexpirationmarginC.hasExternalAccounts).to.be(false);
              expect(data.postexpirationmarginC.rc).to.be.a('number');
              expect(data.postexpirationmarginC.rc).to.be(0);
              expect(data.postexpirationmarginC.currency).to.be.a('string');
              expect(data.postexpirationmarginC.currency).to.be("");
              expect(data.postexpirationmarginC.userId).to.be.a('string');
              expect(data.postexpirationmarginC.userId).to.be("");
              expect(data.postexpirationmarginC.pm).to.be.a('string');
              expect(data.postexpirationmarginC.pm).to.be("");
              expect(data.postexpirationmarginC.view).to.be.a('string');
              expect(data.postexpirationmarginC.view).to.be("");
              expect(data.postexpirationmarginC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.postexpirationmarginC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.postexpirationmarginF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.postexpirationmarginF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.postexpirationmarginF.total.chg).to.be.a('string');
                expect(data.postexpirationmarginF.total.chg).to.be("");
                expect(data.postexpirationmarginF.total.rtn).to.be.a('string');
                expect(data.postexpirationmarginF.total.rtn).to.be("");
                expect(data.postexpirationmarginF.total.incompleteData).to.be.a('boolean');
                expect(data.postexpirationmarginF.total.incompleteData).to.be(false);
                expect(data.postexpirationmarginF.total.endVal).to.be.a('string');
                expect(data.postexpirationmarginF.total.endVal).to.be("");
                expect(data.postexpirationmarginF.total.startVal).to.be.a('string');
                expect(data.postexpirationmarginF.total.startVal).to.be("");
              expect(data.postexpirationmarginF.startDate).to.be.a('string');
              expect(data.postexpirationmarginF.startDate).to.be("");
              {
                let dataCtr = data.postexpirationmarginF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.postexpirationmarginF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.postexpirationmarginF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.postexpirationmarginF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.postexpirationmarginF.endDate).to.be.a('string');
              expect(data.postexpirationmarginF.endDate).to.be("");
              expect(data.postexpirationmarginF.hasExternalAccounts).to.be.a('boolean');
              expect(data.postexpirationmarginF.hasExternalAccounts).to.be(false);
              expect(data.postexpirationmarginF.rc).to.be.a('number');
              expect(data.postexpirationmarginF.rc).to.be(0);
              expect(data.postexpirationmarginF.currency).to.be.a('string');
              expect(data.postexpirationmarginF.currency).to.be("");
              expect(data.postexpirationmarginF.userId).to.be.a('string');
              expect(data.postexpirationmarginF.userId).to.be("");
              expect(data.postexpirationmarginF.pm).to.be.a('string');
              expect(data.postexpirationmarginF.pm).to.be("");
              expect(data.postexpirationmarginF.view).to.be.a('string');
              expect(data.postexpirationmarginF.view).to.be("");
              expect(data.postexpirationmarginF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.postexpirationmarginF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.postexpirationmarginS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.postexpirationmarginS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.postexpirationmarginS.total.chg).to.be.a('string');
                expect(data.postexpirationmarginS.total.chg).to.be("");
                expect(data.postexpirationmarginS.total.rtn).to.be.a('string');
                expect(data.postexpirationmarginS.total.rtn).to.be("");
                expect(data.postexpirationmarginS.total.incompleteData).to.be.a('boolean');
                expect(data.postexpirationmarginS.total.incompleteData).to.be(false);
                expect(data.postexpirationmarginS.total.endVal).to.be.a('string');
                expect(data.postexpirationmarginS.total.endVal).to.be("");
                expect(data.postexpirationmarginS.total.startVal).to.be.a('string');
                expect(data.postexpirationmarginS.total.startVal).to.be("");
              expect(data.postexpirationmarginS.startDate).to.be.a('string');
              expect(data.postexpirationmarginS.startDate).to.be("");
              {
                let dataCtr = data.postexpirationmarginS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.postexpirationmarginS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.postexpirationmarginS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.postexpirationmarginS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.postexpirationmarginS.endDate).to.be.a('string');
              expect(data.postexpirationmarginS.endDate).to.be("");
              expect(data.postexpirationmarginS.hasExternalAccounts).to.be.a('boolean');
              expect(data.postexpirationmarginS.hasExternalAccounts).to.be(false);
              expect(data.postexpirationmarginS.rc).to.be.a('number');
              expect(data.postexpirationmarginS.rc).to.be(0);
              expect(data.postexpirationmarginS.currency).to.be.a('string');
              expect(data.postexpirationmarginS.currency).to.be("");
              expect(data.postexpirationmarginS.userId).to.be.a('string');
              expect(data.postexpirationmarginS.userId).to.be("");
              expect(data.postexpirationmarginS.pm).to.be.a('string');
              expect(data.postexpirationmarginS.pm).to.be("");
              expect(data.postexpirationmarginS.view).to.be.a('string');
              expect(data.postexpirationmarginS.view).to.be("");
              expect(data.postexpirationmarginS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.postexpirationmarginS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.previousdayequitywithloanvalue).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.previousdayequitywithloanvalue.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.previousdayequitywithloanvalue.total.chg).to.be.a('string');
                expect(data.previousdayequitywithloanvalue.total.chg).to.be("");
                expect(data.previousdayequitywithloanvalue.total.rtn).to.be.a('string');
                expect(data.previousdayequitywithloanvalue.total.rtn).to.be("");
                expect(data.previousdayequitywithloanvalue.total.incompleteData).to.be.a('boolean');
                expect(data.previousdayequitywithloanvalue.total.incompleteData).to.be(false);
                expect(data.previousdayequitywithloanvalue.total.endVal).to.be.a('string');
                expect(data.previousdayequitywithloanvalue.total.endVal).to.be("");
                expect(data.previousdayequitywithloanvalue.total.startVal).to.be.a('string');
                expect(data.previousdayequitywithloanvalue.total.startVal).to.be("");
              expect(data.previousdayequitywithloanvalue.startDate).to.be.a('string');
              expect(data.previousdayequitywithloanvalue.startDate).to.be("");
              {
                let dataCtr = data.previousdayequitywithloanvalue.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.previousdayequitywithloanvalue.lastSuccessfulUpdate).to.be.a('string');
              expect(data.previousdayequitywithloanvalue.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.previousdayequitywithloanvalue.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.previousdayequitywithloanvalue.endDate).to.be.a('string');
              expect(data.previousdayequitywithloanvalue.endDate).to.be("");
              expect(data.previousdayequitywithloanvalue.hasExternalAccounts).to.be.a('boolean');
              expect(data.previousdayequitywithloanvalue.hasExternalAccounts).to.be(false);
              expect(data.previousdayequitywithloanvalue.rc).to.be.a('number');
              expect(data.previousdayequitywithloanvalue.rc).to.be(0);
              expect(data.previousdayequitywithloanvalue.currency).to.be.a('string');
              expect(data.previousdayequitywithloanvalue.currency).to.be("");
              expect(data.previousdayequitywithloanvalue.userId).to.be.a('string');
              expect(data.previousdayequitywithloanvalue.userId).to.be("");
              expect(data.previousdayequitywithloanvalue.pm).to.be.a('string');
              expect(data.previousdayequitywithloanvalue.pm).to.be("");
              expect(data.previousdayequitywithloanvalue.view).to.be.a('string');
              expect(data.previousdayequitywithloanvalue.view).to.be("");
              expect(data.previousdayequitywithloanvalue.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.previousdayequitywithloanvalue.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.previousdayequitywithloanvalueC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.previousdayequitywithloanvalueC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.previousdayequitywithloanvalueC.total.chg).to.be.a('string');
                expect(data.previousdayequitywithloanvalueC.total.chg).to.be("");
                expect(data.previousdayequitywithloanvalueC.total.rtn).to.be.a('string');
                expect(data.previousdayequitywithloanvalueC.total.rtn).to.be("");
                expect(data.previousdayequitywithloanvalueC.total.incompleteData).to.be.a('boolean');
                expect(data.previousdayequitywithloanvalueC.total.incompleteData).to.be(false);
                expect(data.previousdayequitywithloanvalueC.total.endVal).to.be.a('string');
                expect(data.previousdayequitywithloanvalueC.total.endVal).to.be("");
                expect(data.previousdayequitywithloanvalueC.total.startVal).to.be.a('string');
                expect(data.previousdayequitywithloanvalueC.total.startVal).to.be("");
              expect(data.previousdayequitywithloanvalueC.startDate).to.be.a('string');
              expect(data.previousdayequitywithloanvalueC.startDate).to.be("");
              {
                let dataCtr = data.previousdayequitywithloanvalueC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.previousdayequitywithloanvalueC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.previousdayequitywithloanvalueC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.previousdayequitywithloanvalueC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.previousdayequitywithloanvalueC.endDate).to.be.a('string');
              expect(data.previousdayequitywithloanvalueC.endDate).to.be("");
              expect(data.previousdayequitywithloanvalueC.hasExternalAccounts).to.be.a('boolean');
              expect(data.previousdayequitywithloanvalueC.hasExternalAccounts).to.be(false);
              expect(data.previousdayequitywithloanvalueC.rc).to.be.a('number');
              expect(data.previousdayequitywithloanvalueC.rc).to.be(0);
              expect(data.previousdayequitywithloanvalueC.currency).to.be.a('string');
              expect(data.previousdayequitywithloanvalueC.currency).to.be("");
              expect(data.previousdayequitywithloanvalueC.userId).to.be.a('string');
              expect(data.previousdayequitywithloanvalueC.userId).to.be("");
              expect(data.previousdayequitywithloanvalueC.pm).to.be.a('string');
              expect(data.previousdayequitywithloanvalueC.pm).to.be("");
              expect(data.previousdayequitywithloanvalueC.view).to.be.a('string');
              expect(data.previousdayequitywithloanvalueC.view).to.be("");
              expect(data.previousdayequitywithloanvalueC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.previousdayequitywithloanvalueC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.previousdayequitywithloanvalueF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.previousdayequitywithloanvalueF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.previousdayequitywithloanvalueF.total.chg).to.be.a('string');
                expect(data.previousdayequitywithloanvalueF.total.chg).to.be("");
                expect(data.previousdayequitywithloanvalueF.total.rtn).to.be.a('string');
                expect(data.previousdayequitywithloanvalueF.total.rtn).to.be("");
                expect(data.previousdayequitywithloanvalueF.total.incompleteData).to.be.a('boolean');
                expect(data.previousdayequitywithloanvalueF.total.incompleteData).to.be(false);
                expect(data.previousdayequitywithloanvalueF.total.endVal).to.be.a('string');
                expect(data.previousdayequitywithloanvalueF.total.endVal).to.be("");
                expect(data.previousdayequitywithloanvalueF.total.startVal).to.be.a('string');
                expect(data.previousdayequitywithloanvalueF.total.startVal).to.be("");
              expect(data.previousdayequitywithloanvalueF.startDate).to.be.a('string');
              expect(data.previousdayequitywithloanvalueF.startDate).to.be("");
              {
                let dataCtr = data.previousdayequitywithloanvalueF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.previousdayequitywithloanvalueF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.previousdayequitywithloanvalueF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.previousdayequitywithloanvalueF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.previousdayequitywithloanvalueF.endDate).to.be.a('string');
              expect(data.previousdayequitywithloanvalueF.endDate).to.be("");
              expect(data.previousdayequitywithloanvalueF.hasExternalAccounts).to.be.a('boolean');
              expect(data.previousdayequitywithloanvalueF.hasExternalAccounts).to.be(false);
              expect(data.previousdayequitywithloanvalueF.rc).to.be.a('number');
              expect(data.previousdayequitywithloanvalueF.rc).to.be(0);
              expect(data.previousdayequitywithloanvalueF.currency).to.be.a('string');
              expect(data.previousdayequitywithloanvalueF.currency).to.be("");
              expect(data.previousdayequitywithloanvalueF.userId).to.be.a('string');
              expect(data.previousdayequitywithloanvalueF.userId).to.be("");
              expect(data.previousdayequitywithloanvalueF.pm).to.be.a('string');
              expect(data.previousdayequitywithloanvalueF.pm).to.be("");
              expect(data.previousdayequitywithloanvalueF.view).to.be.a('string');
              expect(data.previousdayequitywithloanvalueF.view).to.be("");
              expect(data.previousdayequitywithloanvalueF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.previousdayequitywithloanvalueF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.previousdayequitywithloanvalueS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.previousdayequitywithloanvalueS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.previousdayequitywithloanvalueS.total.chg).to.be.a('string');
                expect(data.previousdayequitywithloanvalueS.total.chg).to.be("");
                expect(data.previousdayequitywithloanvalueS.total.rtn).to.be.a('string');
                expect(data.previousdayequitywithloanvalueS.total.rtn).to.be("");
                expect(data.previousdayequitywithloanvalueS.total.incompleteData).to.be.a('boolean');
                expect(data.previousdayequitywithloanvalueS.total.incompleteData).to.be(false);
                expect(data.previousdayequitywithloanvalueS.total.endVal).to.be.a('string');
                expect(data.previousdayequitywithloanvalueS.total.endVal).to.be("");
                expect(data.previousdayequitywithloanvalueS.total.startVal).to.be.a('string');
                expect(data.previousdayequitywithloanvalueS.total.startVal).to.be("");
              expect(data.previousdayequitywithloanvalueS.startDate).to.be.a('string');
              expect(data.previousdayequitywithloanvalueS.startDate).to.be("");
              {
                let dataCtr = data.previousdayequitywithloanvalueS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.previousdayequitywithloanvalueS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.previousdayequitywithloanvalueS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.previousdayequitywithloanvalueS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.previousdayequitywithloanvalueS.endDate).to.be.a('string');
              expect(data.previousdayequitywithloanvalueS.endDate).to.be("");
              expect(data.previousdayequitywithloanvalueS.hasExternalAccounts).to.be.a('boolean');
              expect(data.previousdayequitywithloanvalueS.hasExternalAccounts).to.be(false);
              expect(data.previousdayequitywithloanvalueS.rc).to.be.a('number');
              expect(data.previousdayequitywithloanvalueS.rc).to.be(0);
              expect(data.previousdayequitywithloanvalueS.currency).to.be.a('string');
              expect(data.previousdayequitywithloanvalueS.currency).to.be("");
              expect(data.previousdayequitywithloanvalueS.userId).to.be.a('string');
              expect(data.previousdayequitywithloanvalueS.userId).to.be("");
              expect(data.previousdayequitywithloanvalueS.pm).to.be.a('string');
              expect(data.previousdayequitywithloanvalueS.pm).to.be("");
              expect(data.previousdayequitywithloanvalueS.view).to.be.a('string');
              expect(data.previousdayequitywithloanvalueS.view).to.be("");
              expect(data.previousdayequitywithloanvalueS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.previousdayequitywithloanvalueS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.segmenttitleC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.segmenttitleC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.segmenttitleC.total.chg).to.be.a('string');
                expect(data.segmenttitleC.total.chg).to.be("");
                expect(data.segmenttitleC.total.rtn).to.be.a('string');
                expect(data.segmenttitleC.total.rtn).to.be("");
                expect(data.segmenttitleC.total.incompleteData).to.be.a('boolean');
                expect(data.segmenttitleC.total.incompleteData).to.be(false);
                expect(data.segmenttitleC.total.endVal).to.be.a('string');
                expect(data.segmenttitleC.total.endVal).to.be("");
                expect(data.segmenttitleC.total.startVal).to.be.a('string');
                expect(data.segmenttitleC.total.startVal).to.be("");
              expect(data.segmenttitleC.startDate).to.be.a('string');
              expect(data.segmenttitleC.startDate).to.be("");
              {
                let dataCtr = data.segmenttitleC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.segmenttitleC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.segmenttitleC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.segmenttitleC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.segmenttitleC.endDate).to.be.a('string');
              expect(data.segmenttitleC.endDate).to.be("");
              expect(data.segmenttitleC.hasExternalAccounts).to.be.a('boolean');
              expect(data.segmenttitleC.hasExternalAccounts).to.be(false);
              expect(data.segmenttitleC.rc).to.be.a('number');
              expect(data.segmenttitleC.rc).to.be(0);
              expect(data.segmenttitleC.currency).to.be.a('string');
              expect(data.segmenttitleC.currency).to.be("");
              expect(data.segmenttitleC.userId).to.be.a('string');
              expect(data.segmenttitleC.userId).to.be("");
              expect(data.segmenttitleC.pm).to.be.a('string');
              expect(data.segmenttitleC.pm).to.be("");
              expect(data.segmenttitleC.view).to.be.a('string');
              expect(data.segmenttitleC.view).to.be("");
              expect(data.segmenttitleC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.segmenttitleC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.segmenttitleF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.segmenttitleF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.segmenttitleF.total.chg).to.be.a('string');
                expect(data.segmenttitleF.total.chg).to.be("");
                expect(data.segmenttitleF.total.rtn).to.be.a('string');
                expect(data.segmenttitleF.total.rtn).to.be("");
                expect(data.segmenttitleF.total.incompleteData).to.be.a('boolean');
                expect(data.segmenttitleF.total.incompleteData).to.be(false);
                expect(data.segmenttitleF.total.endVal).to.be.a('string');
                expect(data.segmenttitleF.total.endVal).to.be("");
                expect(data.segmenttitleF.total.startVal).to.be.a('string');
                expect(data.segmenttitleF.total.startVal).to.be("");
              expect(data.segmenttitleF.startDate).to.be.a('string');
              expect(data.segmenttitleF.startDate).to.be("");
              {
                let dataCtr = data.segmenttitleF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.segmenttitleF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.segmenttitleF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.segmenttitleF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.segmenttitleF.endDate).to.be.a('string');
              expect(data.segmenttitleF.endDate).to.be("");
              expect(data.segmenttitleF.hasExternalAccounts).to.be.a('boolean');
              expect(data.segmenttitleF.hasExternalAccounts).to.be(false);
              expect(data.segmenttitleF.rc).to.be.a('number');
              expect(data.segmenttitleF.rc).to.be(0);
              expect(data.segmenttitleF.currency).to.be.a('string');
              expect(data.segmenttitleF.currency).to.be("");
              expect(data.segmenttitleF.userId).to.be.a('string');
              expect(data.segmenttitleF.userId).to.be("");
              expect(data.segmenttitleF.pm).to.be.a('string');
              expect(data.segmenttitleF.pm).to.be("");
              expect(data.segmenttitleF.view).to.be.a('string');
              expect(data.segmenttitleF.view).to.be("");
              expect(data.segmenttitleF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.segmenttitleF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.segmenttitleS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.segmenttitleS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.segmenttitleS.total.chg).to.be.a('string');
                expect(data.segmenttitleS.total.chg).to.be("");
                expect(data.segmenttitleS.total.rtn).to.be.a('string');
                expect(data.segmenttitleS.total.rtn).to.be("");
                expect(data.segmenttitleS.total.incompleteData).to.be.a('boolean');
                expect(data.segmenttitleS.total.incompleteData).to.be(false);
                expect(data.segmenttitleS.total.endVal).to.be.a('string');
                expect(data.segmenttitleS.total.endVal).to.be("");
                expect(data.segmenttitleS.total.startVal).to.be.a('string');
                expect(data.segmenttitleS.total.startVal).to.be("");
              expect(data.segmenttitleS.startDate).to.be.a('string');
              expect(data.segmenttitleS.startDate).to.be("");
              {
                let dataCtr = data.segmenttitleS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.segmenttitleS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.segmenttitleS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.segmenttitleS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.segmenttitleS.endDate).to.be.a('string');
              expect(data.segmenttitleS.endDate).to.be("");
              expect(data.segmenttitleS.hasExternalAccounts).to.be.a('boolean');
              expect(data.segmenttitleS.hasExternalAccounts).to.be(false);
              expect(data.segmenttitleS.rc).to.be.a('number');
              expect(data.segmenttitleS.rc).to.be(0);
              expect(data.segmenttitleS.currency).to.be.a('string');
              expect(data.segmenttitleS.currency).to.be("");
              expect(data.segmenttitleS.userId).to.be.a('string');
              expect(data.segmenttitleS.userId).to.be("");
              expect(data.segmenttitleS.pm).to.be.a('string');
              expect(data.segmenttitleS.pm).to.be("");
              expect(data.segmenttitleS.view).to.be.a('string');
              expect(data.segmenttitleS.view).to.be("");
              expect(data.segmenttitleS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.segmenttitleS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.totalcashvalue).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.totalcashvalue.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.totalcashvalue.total.chg).to.be.a('string');
                expect(data.totalcashvalue.total.chg).to.be("");
                expect(data.totalcashvalue.total.rtn).to.be.a('string');
                expect(data.totalcashvalue.total.rtn).to.be("");
                expect(data.totalcashvalue.total.incompleteData).to.be.a('boolean');
                expect(data.totalcashvalue.total.incompleteData).to.be(false);
                expect(data.totalcashvalue.total.endVal).to.be.a('string');
                expect(data.totalcashvalue.total.endVal).to.be("");
                expect(data.totalcashvalue.total.startVal).to.be.a('string');
                expect(data.totalcashvalue.total.startVal).to.be("");
              expect(data.totalcashvalue.startDate).to.be.a('string');
              expect(data.totalcashvalue.startDate).to.be("");
              {
                let dataCtr = data.totalcashvalue.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.totalcashvalue.lastSuccessfulUpdate).to.be.a('string');
              expect(data.totalcashvalue.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.totalcashvalue.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.totalcashvalue.endDate).to.be.a('string');
              expect(data.totalcashvalue.endDate).to.be("");
              expect(data.totalcashvalue.hasExternalAccounts).to.be.a('boolean');
              expect(data.totalcashvalue.hasExternalAccounts).to.be(false);
              expect(data.totalcashvalue.rc).to.be.a('number');
              expect(data.totalcashvalue.rc).to.be(0);
              expect(data.totalcashvalue.currency).to.be.a('string');
              expect(data.totalcashvalue.currency).to.be("");
              expect(data.totalcashvalue.userId).to.be.a('string');
              expect(data.totalcashvalue.userId).to.be("");
              expect(data.totalcashvalue.pm).to.be.a('string');
              expect(data.totalcashvalue.pm).to.be("");
              expect(data.totalcashvalue.view).to.be.a('string');
              expect(data.totalcashvalue.view).to.be("");
              expect(data.totalcashvalue.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.totalcashvalue.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.totalcashvalueC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.totalcashvalueC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.totalcashvalueC.total.chg).to.be.a('string');
                expect(data.totalcashvalueC.total.chg).to.be("");
                expect(data.totalcashvalueC.total.rtn).to.be.a('string');
                expect(data.totalcashvalueC.total.rtn).to.be("");
                expect(data.totalcashvalueC.total.incompleteData).to.be.a('boolean');
                expect(data.totalcashvalueC.total.incompleteData).to.be(false);
                expect(data.totalcashvalueC.total.endVal).to.be.a('string');
                expect(data.totalcashvalueC.total.endVal).to.be("");
                expect(data.totalcashvalueC.total.startVal).to.be.a('string');
                expect(data.totalcashvalueC.total.startVal).to.be("");
              expect(data.totalcashvalueC.startDate).to.be.a('string');
              expect(data.totalcashvalueC.startDate).to.be("");
              {
                let dataCtr = data.totalcashvalueC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.totalcashvalueC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.totalcashvalueC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.totalcashvalueC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.totalcashvalueC.endDate).to.be.a('string');
              expect(data.totalcashvalueC.endDate).to.be("");
              expect(data.totalcashvalueC.hasExternalAccounts).to.be.a('boolean');
              expect(data.totalcashvalueC.hasExternalAccounts).to.be(false);
              expect(data.totalcashvalueC.rc).to.be.a('number');
              expect(data.totalcashvalueC.rc).to.be(0);
              expect(data.totalcashvalueC.currency).to.be.a('string');
              expect(data.totalcashvalueC.currency).to.be("");
              expect(data.totalcashvalueC.userId).to.be.a('string');
              expect(data.totalcashvalueC.userId).to.be("");
              expect(data.totalcashvalueC.pm).to.be.a('string');
              expect(data.totalcashvalueC.pm).to.be("");
              expect(data.totalcashvalueC.view).to.be.a('string');
              expect(data.totalcashvalueC.view).to.be("");
              expect(data.totalcashvalueC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.totalcashvalueC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.totalcashvalueF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.totalcashvalueF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.totalcashvalueF.total.chg).to.be.a('string');
                expect(data.totalcashvalueF.total.chg).to.be("");
                expect(data.totalcashvalueF.total.rtn).to.be.a('string');
                expect(data.totalcashvalueF.total.rtn).to.be("");
                expect(data.totalcashvalueF.total.incompleteData).to.be.a('boolean');
                expect(data.totalcashvalueF.total.incompleteData).to.be(false);
                expect(data.totalcashvalueF.total.endVal).to.be.a('string');
                expect(data.totalcashvalueF.total.endVal).to.be("");
                expect(data.totalcashvalueF.total.startVal).to.be.a('string');
                expect(data.totalcashvalueF.total.startVal).to.be("");
              expect(data.totalcashvalueF.startDate).to.be.a('string');
              expect(data.totalcashvalueF.startDate).to.be("");
              {
                let dataCtr = data.totalcashvalueF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.totalcashvalueF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.totalcashvalueF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.totalcashvalueF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.totalcashvalueF.endDate).to.be.a('string');
              expect(data.totalcashvalueF.endDate).to.be("");
              expect(data.totalcashvalueF.hasExternalAccounts).to.be.a('boolean');
              expect(data.totalcashvalueF.hasExternalAccounts).to.be(false);
              expect(data.totalcashvalueF.rc).to.be.a('number');
              expect(data.totalcashvalueF.rc).to.be(0);
              expect(data.totalcashvalueF.currency).to.be.a('string');
              expect(data.totalcashvalueF.currency).to.be("");
              expect(data.totalcashvalueF.userId).to.be.a('string');
              expect(data.totalcashvalueF.userId).to.be("");
              expect(data.totalcashvalueF.pm).to.be.a('string');
              expect(data.totalcashvalueF.pm).to.be("");
              expect(data.totalcashvalueF.view).to.be.a('string');
              expect(data.totalcashvalueF.view).to.be("");
              expect(data.totalcashvalueF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.totalcashvalueF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.totalcashvalueS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.totalcashvalueS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.totalcashvalueS.total.chg).to.be.a('string');
                expect(data.totalcashvalueS.total.chg).to.be("");
                expect(data.totalcashvalueS.total.rtn).to.be.a('string');
                expect(data.totalcashvalueS.total.rtn).to.be("");
                expect(data.totalcashvalueS.total.incompleteData).to.be.a('boolean');
                expect(data.totalcashvalueS.total.incompleteData).to.be(false);
                expect(data.totalcashvalueS.total.endVal).to.be.a('string');
                expect(data.totalcashvalueS.total.endVal).to.be("");
                expect(data.totalcashvalueS.total.startVal).to.be.a('string');
                expect(data.totalcashvalueS.total.startVal).to.be("");
              expect(data.totalcashvalueS.startDate).to.be.a('string');
              expect(data.totalcashvalueS.startDate).to.be("");
              {
                let dataCtr = data.totalcashvalueS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.totalcashvalueS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.totalcashvalueS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.totalcashvalueS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.totalcashvalueS.endDate).to.be.a('string');
              expect(data.totalcashvalueS.endDate).to.be("");
              expect(data.totalcashvalueS.hasExternalAccounts).to.be.a('boolean');
              expect(data.totalcashvalueS.hasExternalAccounts).to.be(false);
              expect(data.totalcashvalueS.rc).to.be.a('number');
              expect(data.totalcashvalueS.rc).to.be(0);
              expect(data.totalcashvalueS.currency).to.be.a('string');
              expect(data.totalcashvalueS.currency).to.be("");
              expect(data.totalcashvalueS.userId).to.be.a('string');
              expect(data.totalcashvalueS.userId).to.be("");
              expect(data.totalcashvalueS.pm).to.be.a('string');
              expect(data.totalcashvalueS.pm).to.be("");
              expect(data.totalcashvalueS.view).to.be.a('string');
              expect(data.totalcashvalueS.view).to.be("");
              expect(data.totalcashvalueS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.totalcashvalueS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.totaldebitcardpendingcharges).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.totaldebitcardpendingcharges.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.totaldebitcardpendingcharges.total.chg).to.be.a('string');
                expect(data.totaldebitcardpendingcharges.total.chg).to.be("");
                expect(data.totaldebitcardpendingcharges.total.rtn).to.be.a('string');
                expect(data.totaldebitcardpendingcharges.total.rtn).to.be("");
                expect(data.totaldebitcardpendingcharges.total.incompleteData).to.be.a('boolean');
                expect(data.totaldebitcardpendingcharges.total.incompleteData).to.be(false);
                expect(data.totaldebitcardpendingcharges.total.endVal).to.be.a('string');
                expect(data.totaldebitcardpendingcharges.total.endVal).to.be("");
                expect(data.totaldebitcardpendingcharges.total.startVal).to.be.a('string');
                expect(data.totaldebitcardpendingcharges.total.startVal).to.be("");
              expect(data.totaldebitcardpendingcharges.startDate).to.be.a('string');
              expect(data.totaldebitcardpendingcharges.startDate).to.be("");
              {
                let dataCtr = data.totaldebitcardpendingcharges.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.totaldebitcardpendingcharges.lastSuccessfulUpdate).to.be.a('string');
              expect(data.totaldebitcardpendingcharges.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.totaldebitcardpendingcharges.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.totaldebitcardpendingcharges.endDate).to.be.a('string');
              expect(data.totaldebitcardpendingcharges.endDate).to.be("");
              expect(data.totaldebitcardpendingcharges.hasExternalAccounts).to.be.a('boolean');
              expect(data.totaldebitcardpendingcharges.hasExternalAccounts).to.be(false);
              expect(data.totaldebitcardpendingcharges.rc).to.be.a('number');
              expect(data.totaldebitcardpendingcharges.rc).to.be(0);
              expect(data.totaldebitcardpendingcharges.currency).to.be.a('string');
              expect(data.totaldebitcardpendingcharges.currency).to.be("");
              expect(data.totaldebitcardpendingcharges.userId).to.be.a('string');
              expect(data.totaldebitcardpendingcharges.userId).to.be("");
              expect(data.totaldebitcardpendingcharges.pm).to.be.a('string');
              expect(data.totaldebitcardpendingcharges.pm).to.be("");
              expect(data.totaldebitcardpendingcharges.view).to.be.a('string');
              expect(data.totaldebitcardpendingcharges.view).to.be("");
              expect(data.totaldebitcardpendingcharges.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.totaldebitcardpendingcharges.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.totaldebitcardpendingchargesC).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.totaldebitcardpendingchargesC.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.totaldebitcardpendingchargesC.total.chg).to.be.a('string');
                expect(data.totaldebitcardpendingchargesC.total.chg).to.be("");
                expect(data.totaldebitcardpendingchargesC.total.rtn).to.be.a('string');
                expect(data.totaldebitcardpendingchargesC.total.rtn).to.be("");
                expect(data.totaldebitcardpendingchargesC.total.incompleteData).to.be.a('boolean');
                expect(data.totaldebitcardpendingchargesC.total.incompleteData).to.be(false);
                expect(data.totaldebitcardpendingchargesC.total.endVal).to.be.a('string');
                expect(data.totaldebitcardpendingchargesC.total.endVal).to.be("");
                expect(data.totaldebitcardpendingchargesC.total.startVal).to.be.a('string');
                expect(data.totaldebitcardpendingchargesC.total.startVal).to.be("");
              expect(data.totaldebitcardpendingchargesC.startDate).to.be.a('string');
              expect(data.totaldebitcardpendingchargesC.startDate).to.be("");
              {
                let dataCtr = data.totaldebitcardpendingchargesC.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.totaldebitcardpendingchargesC.lastSuccessfulUpdate).to.be.a('string');
              expect(data.totaldebitcardpendingchargesC.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.totaldebitcardpendingchargesC.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.totaldebitcardpendingchargesC.endDate).to.be.a('string');
              expect(data.totaldebitcardpendingchargesC.endDate).to.be("");
              expect(data.totaldebitcardpendingchargesC.hasExternalAccounts).to.be.a('boolean');
              expect(data.totaldebitcardpendingchargesC.hasExternalAccounts).to.be(false);
              expect(data.totaldebitcardpendingchargesC.rc).to.be.a('number');
              expect(data.totaldebitcardpendingchargesC.rc).to.be(0);
              expect(data.totaldebitcardpendingchargesC.currency).to.be.a('string');
              expect(data.totaldebitcardpendingchargesC.currency).to.be("");
              expect(data.totaldebitcardpendingchargesC.userId).to.be.a('string');
              expect(data.totaldebitcardpendingchargesC.userId).to.be("");
              expect(data.totaldebitcardpendingchargesC.pm).to.be.a('string');
              expect(data.totaldebitcardpendingchargesC.pm).to.be("");
              expect(data.totaldebitcardpendingchargesC.view).to.be.a('string');
              expect(data.totaldebitcardpendingchargesC.view).to.be("");
              expect(data.totaldebitcardpendingchargesC.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.totaldebitcardpendingchargesC.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.totaldebitcardpendingchargesF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.totaldebitcardpendingchargesF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.totaldebitcardpendingchargesF.total.chg).to.be.a('string');
                expect(data.totaldebitcardpendingchargesF.total.chg).to.be("");
                expect(data.totaldebitcardpendingchargesF.total.rtn).to.be.a('string');
                expect(data.totaldebitcardpendingchargesF.total.rtn).to.be("");
                expect(data.totaldebitcardpendingchargesF.total.incompleteData).to.be.a('boolean');
                expect(data.totaldebitcardpendingchargesF.total.incompleteData).to.be(false);
                expect(data.totaldebitcardpendingchargesF.total.endVal).to.be.a('string');
                expect(data.totaldebitcardpendingchargesF.total.endVal).to.be("");
                expect(data.totaldebitcardpendingchargesF.total.startVal).to.be.a('string');
                expect(data.totaldebitcardpendingchargesF.total.startVal).to.be("");
              expect(data.totaldebitcardpendingchargesF.startDate).to.be.a('string');
              expect(data.totaldebitcardpendingchargesF.startDate).to.be("");
              {
                let dataCtr = data.totaldebitcardpendingchargesF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.totaldebitcardpendingchargesF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.totaldebitcardpendingchargesF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.totaldebitcardpendingchargesF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.totaldebitcardpendingchargesF.endDate).to.be.a('string');
              expect(data.totaldebitcardpendingchargesF.endDate).to.be("");
              expect(data.totaldebitcardpendingchargesF.hasExternalAccounts).to.be.a('boolean');
              expect(data.totaldebitcardpendingchargesF.hasExternalAccounts).to.be(false);
              expect(data.totaldebitcardpendingchargesF.rc).to.be.a('number');
              expect(data.totaldebitcardpendingchargesF.rc).to.be(0);
              expect(data.totaldebitcardpendingchargesF.currency).to.be.a('string');
              expect(data.totaldebitcardpendingchargesF.currency).to.be("");
              expect(data.totaldebitcardpendingchargesF.userId).to.be.a('string');
              expect(data.totaldebitcardpendingchargesF.userId).to.be("");
              expect(data.totaldebitcardpendingchargesF.pm).to.be.a('string');
              expect(data.totaldebitcardpendingchargesF.pm).to.be("");
              expect(data.totaldebitcardpendingchargesF.view).to.be.a('string');
              expect(data.totaldebitcardpendingchargesF.view).to.be("");
              expect(data.totaldebitcardpendingchargesF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.totaldebitcardpendingchargesF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.totaldebitcardpendingchargesS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.totaldebitcardpendingchargesS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.totaldebitcardpendingchargesS.total.chg).to.be.a('string');
                expect(data.totaldebitcardpendingchargesS.total.chg).to.be("");
                expect(data.totaldebitcardpendingchargesS.total.rtn).to.be.a('string');
                expect(data.totaldebitcardpendingchargesS.total.rtn).to.be("");
                expect(data.totaldebitcardpendingchargesS.total.incompleteData).to.be.a('boolean');
                expect(data.totaldebitcardpendingchargesS.total.incompleteData).to.be(false);
                expect(data.totaldebitcardpendingchargesS.total.endVal).to.be.a('string');
                expect(data.totaldebitcardpendingchargesS.total.endVal).to.be("");
                expect(data.totaldebitcardpendingchargesS.total.startVal).to.be.a('string');
                expect(data.totaldebitcardpendingchargesS.total.startVal).to.be("");
              expect(data.totaldebitcardpendingchargesS.startDate).to.be.a('string');
              expect(data.totaldebitcardpendingchargesS.startDate).to.be("");
              {
                let dataCtr = data.totaldebitcardpendingchargesS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.totaldebitcardpendingchargesS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.totaldebitcardpendingchargesS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.totaldebitcardpendingchargesS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.totaldebitcardpendingchargesS.endDate).to.be.a('string');
              expect(data.totaldebitcardpendingchargesS.endDate).to.be("");
              expect(data.totaldebitcardpendingchargesS.hasExternalAccounts).to.be.a('boolean');
              expect(data.totaldebitcardpendingchargesS.hasExternalAccounts).to.be(false);
              expect(data.totaldebitcardpendingchargesS.rc).to.be.a('number');
              expect(data.totaldebitcardpendingchargesS.rc).to.be(0);
              expect(data.totaldebitcardpendingchargesS.currency).to.be.a('string');
              expect(data.totaldebitcardpendingchargesS.currency).to.be("");
              expect(data.totaldebitcardpendingchargesS.userId).to.be.a('string');
              expect(data.totaldebitcardpendingchargesS.userId).to.be("");
              expect(data.totaldebitcardpendingchargesS.pm).to.be.a('string');
              expect(data.totaldebitcardpendingchargesS.pm).to.be("");
              expect(data.totaldebitcardpendingchargesS.view).to.be.a('string');
              expect(data.totaldebitcardpendingchargesS.view).to.be("");
              expect(data.totaldebitcardpendingchargesS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.totaldebitcardpendingchargesS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.tradingtypeF).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.tradingtypeF.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.tradingtypeF.total.chg).to.be.a('string');
                expect(data.tradingtypeF.total.chg).to.be("");
                expect(data.tradingtypeF.total.rtn).to.be.a('string');
                expect(data.tradingtypeF.total.rtn).to.be("");
                expect(data.tradingtypeF.total.incompleteData).to.be.a('boolean');
                expect(data.tradingtypeF.total.incompleteData).to.be(false);
                expect(data.tradingtypeF.total.endVal).to.be.a('string');
                expect(data.tradingtypeF.total.endVal).to.be("");
                expect(data.tradingtypeF.total.startVal).to.be.a('string');
                expect(data.tradingtypeF.total.startVal).to.be("");
              expect(data.tradingtypeF.startDate).to.be.a('string');
              expect(data.tradingtypeF.startDate).to.be("");
              {
                let dataCtr = data.tradingtypeF.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.tradingtypeF.lastSuccessfulUpdate).to.be.a('string');
              expect(data.tradingtypeF.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.tradingtypeF.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.tradingtypeF.endDate).to.be.a('string');
              expect(data.tradingtypeF.endDate).to.be("");
              expect(data.tradingtypeF.hasExternalAccounts).to.be.a('boolean');
              expect(data.tradingtypeF.hasExternalAccounts).to.be(false);
              expect(data.tradingtypeF.rc).to.be.a('number');
              expect(data.tradingtypeF.rc).to.be(0);
              expect(data.tradingtypeF.currency).to.be.a('string');
              expect(data.tradingtypeF.currency).to.be("");
              expect(data.tradingtypeF.userId).to.be.a('string');
              expect(data.tradingtypeF.userId).to.be("");
              expect(data.tradingtypeF.pm).to.be.a('string');
              expect(data.tradingtypeF.pm).to.be("");
              expect(data.tradingtypeF.view).to.be.a('string');
              expect(data.tradingtypeF.view).to.be("");
              expect(data.tradingtypeF.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.tradingtypeF.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }
            expect(data.tradingtypeS).to.be.a(ClientPortalWebApi.Summary);
                  expect(data.tradingtypeS.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                    expect(data.tradingtypeS.total.chg).to.be.a('string');
                expect(data.tradingtypeS.total.chg).to.be("");
                expect(data.tradingtypeS.total.rtn).to.be.a('string');
                expect(data.tradingtypeS.total.rtn).to.be("");
                expect(data.tradingtypeS.total.incompleteData).to.be.a('boolean');
                expect(data.tradingtypeS.total.incompleteData).to.be(false);
                expect(data.tradingtypeS.total.endVal).to.be.a('string');
                expect(data.tradingtypeS.total.endVal).to.be("");
                expect(data.tradingtypeS.total.startVal).to.be.a('string');
                expect(data.tradingtypeS.total.startVal).to.be("");
              expect(data.tradingtypeS.startDate).to.be.a('string');
              expect(data.tradingtypeS.startDate).to.be("");
              {
                let dataCtr = data.tradingtypeS.excludedAccounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                  expect(data.lastUpdateAttempt).to.be.a('string');
                  expect(data.lastUpdateAttempt).to.be("");
                  expect(data.fiName).to.be.a('string');
                  expect(data.fiName).to.be("");
                  expect(data.acctTitle).to.be.a('string');
                  expect(data.acctTitle).to.be("");
                  expect(data.acctNumAtFI).to.be.a('string');
                  expect(data.acctNumAtFI).to.be("");
                  expect(data.acctId).to.be.a('string');
                  expect(data.acctId).to.be("");
                  expect(data.lastUpdate).to.be.a('string');
                  expect(data.lastUpdate).to.be("");
                  expect(data.harvestCode).to.be.a('number');
                  expect(data.harvestCode).to.be(0);
                  expect(data.lastUpdateStatusCode).to.be.a('string');
                  expect(data.lastUpdateStatusCode).to.be("");
                  expect(data.rc).to.be.a('number');
                  expect(data.rc).to.be(0);
  
                        }
              }
              expect(data.tradingtypeS.lastSuccessfulUpdate).to.be.a('string');
              expect(data.tradingtypeS.lastSuccessfulUpdate).to.be("");
              {
                let dataCtr = data.tradingtypeS.accountSummaries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                  expect(data.chg).to.be.a('string');
                  expect(data.chg).to.be("");
                  expect(data.hasAccounts).to.be.a('string');
                  expect(data.hasAccounts).to.be("");
                  expect(data.accountTypeName).to.be.a('string');
                  expect(data.accountTypeName).to.be("");
                  expect(data.rtn).to.be.a('string');
                  expect(data.rtn).to.be("");
                  expect(data.endVal).to.be.a('string');
                  expect(data.endVal).to.be("");
                  expect(data.accountTypeCode).to.be.a('string');
                  expect(data.accountTypeCode).to.be("");
                  expect(data.startVal).to.be.a('string');
                  expect(data.startVal).to.be("");
  
                        }
              }
              expect(data.tradingtypeS.endDate).to.be.a('string');
              expect(data.tradingtypeS.endDate).to.be("");
              expect(data.tradingtypeS.hasExternalAccounts).to.be.a('boolean');
              expect(data.tradingtypeS.hasExternalAccounts).to.be(false);
              expect(data.tradingtypeS.rc).to.be.a('number');
              expect(data.tradingtypeS.rc).to.be(0);
              expect(data.tradingtypeS.currency).to.be.a('string');
              expect(data.tradingtypeS.currency).to.be("");
              expect(data.tradingtypeS.userId).to.be.a('string');
              expect(data.tradingtypeS.userId).to.be("");
              expect(data.tradingtypeS.pm).to.be.a('string');
              expect(data.tradingtypeS.pm).to.be("");
              expect(data.tradingtypeS.view).to.be.a('string');
              expect(data.tradingtypeS.view).to.be("");
              expect(data.tradingtypeS.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                    {
                  let dataCtr = data.tradingtypeS.balanceByDate.series;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data._date;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Array);
                        expect(data).to.be([]);
                      }
                    }
    
                          }
                }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioAccountsGet', function() {
        it('should call portfolioAccountsGet successfully', function(done) {
          // TODO: uncomment portfolioAccountsGet call and complete the assertions
          /*

          instance.portfolioAccountsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Accounts);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioAllocationPost', function() {
        it('should call portfolioAllocationPost successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioAllocationPost call and complete the assertions
          /*
          var body = new ClientPortalWebApi.Body2();
          body.acctIds = [""];

          instance.portfolioAllocationPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Allocation);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioPositionsConidGet', function() {
        it('should call portfolioPositionsConidGet successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioPositionsConidGet call and complete the assertions
          /*
          var conid = 56;

          instance.portfolioPositionsConidGet(conid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20014);
            expect(data.ACCTID).to.be.a(ClientPortalWebApi.Position);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioSubaccountsGet', function() {
        it('should call portfolioSubaccountsGet successfully', function(done) {
          // TODO: uncomment portfolioSubaccountsGet call and complete the assertions
          /*

          instance.portfolioSubaccountsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Account);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.accountId).to.be.a('string');
            expect(data.accountId).to.be("");
            expect(data.accountVan).to.be.a('string');
            expect(data.accountVan).to.be("");
            expect(data.accountTitle).to.be.a('string');
            expect(data.accountTitle).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.accountAlias).to.be.a('string');
            expect(data.accountAlias).to.be("");
            expect(data.accountStatus).to.be.a('number');
            expect(data.accountStatus).to.be();
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.tradingType).to.be.a('string');
            expect(data.tradingType).to.be("");
            expect(data.faclient).to.be.a('boolean');
            expect(data.faclient).to.be(false);
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.desc).to.be.a('string');
            expect(data.desc).to.be("");
            expect(data.covestor).to.be.a('boolean');
            expect(data.covestor).to.be(false);
            expect(data.master).to.be.a(ClientPortalWebApi.AccountMaster);
                  expect(data.master.title).to.be.a('string');
              expect(data.master.title).to.be("");
              expect(data.master.officialTitle).to.be.a('string');
              expect(data.master.officialTitle).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
