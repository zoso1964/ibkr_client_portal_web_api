/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClientPortalWebApi.SessionApi();
  });

  describe('(package)', function() {
    describe('SessionApi', function() {
      describe('iserverAuthStatusPost', function() {
        it('should call iserverAuthStatusPost successfully', function(done) {
          // TODO: uncomment iserverAuthStatusPost call and complete the assertions
          /*

          instance.iserverAuthStatusPost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.AuthStatus);
            expect(data.authenticated).to.be.a('boolean');
            expect(data.authenticated).to.be(false);
            expect(data.connected).to.be.a('boolean');
            expect(data.connected).to.be(false);
            expect(data.competing).to.be.a('boolean');
            expect(data.competing).to.be(false);
            expect(data.fail).to.be.a('string');
            expect(data.fail).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.prompts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverReauthenticatePost', function() {
        it('should call iserverReauthenticatePost successfully', function(done) {
          // TODO: uncomment iserverReauthenticatePost call and complete the assertions
          /*

          instance.iserverReauthenticatePost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.AuthStatus);
            expect(data.authenticated).to.be.a('boolean');
            expect(data.authenticated).to.be(false);
            expect(data.connected).to.be.a('boolean');
            expect(data.connected).to.be(false);
            expect(data.competing).to.be.a('boolean');
            expect(data.competing).to.be(false);
            expect(data.fail).to.be.a('string');
            expect(data.fail).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.prompts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('logoutPost', function() {
        it('should call logoutPost successfully', function(done) {
          // TODO: uncomment logoutPost call and complete the assertions
          /*

          instance.logoutPost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20015);
            expect(data.confirmed).to.be.a('boolean');
            expect(data.confirmed).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ssoValidateGet', function() {
        it('should call ssoValidateGet successfully', function(done) {
          // TODO: uncomment ssoValidateGet call
          /*

          instance.ssoValidateGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ticklePost', function() {
        it('should call ticklePost successfully', function(done) {
          // TODO: uncomment ticklePost call
          /*

          instance.ticklePost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
