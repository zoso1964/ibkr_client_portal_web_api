/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClientPortalWebApi.ScannerApi();
  });

  describe('(package)', function() {
    describe('ScannerApi', function() {
      describe('iserverScannerParamsGet', function() {
        it('should call iserverScannerParamsGet successfully', function(done) {
          // TODO: uncomment iserverScannerParamsGet call and complete the assertions
          /*

          instance.iserverScannerParamsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse2009);
            {
              let dataCtr = data.scanTypeList;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ClientPortalWebApi.InlineResponse2009ScanTypeList);
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");
                {
                  let dataCtr = data.instruments;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            {
              let dataCtr = data.instrumentList;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ClientPortalWebApi.InlineResponse2009InstrumentList);
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                {
                  let dataCtr = data.filters;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            {
              let dataCtr = data.filterList;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ClientPortalWebApi.InlineResponse2009FilterList);
                expect(data.group).to.be.a('string');
                expect(data.group).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");

                      }
            }
            {
              let dataCtr = data.locationTree;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ClientPortalWebApi.InlineResponse2009LocationTree);
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                {
                  let dataCtr = data.locations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ClientPortalWebApi.InlineResponse2009Locations);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverScannerRunPost', function() {
        it('should call iserverScannerRunPost successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverScannerRunPost call and complete the assertions
          /*
          var body = new ClientPortalWebApi.ScannerParams();
          body.instrument = "";
          body.type = "";
          body.filter = [new ClientPortalWebApi.ScannerparamsFilter()];
          body.filter[0].code = "";
          body.filter[0].value = ;
          body.location = "";
          body.size = "";

          instance.iserverScannerRunPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse20010);
              expect(data.serverId).to.be.a('string');
              expect(data.serverId).to.be("");
              expect(data.columnName).to.be.a('string');
              expect(data.columnName).to.be("");
              expect(data.symbol).to.be.a('string');
              expect(data.symbol).to.be("");
              expect(data.conidex).to.be.a('string');
              expect(data.conidex).to.be("");
              expect(data.conId).to.be.a('number');
              expect(data.conId).to.be();
              expect(data.availableChartPeriods).to.be.a('string');
              expect(data.availableChartPeriods).to.be("");
              expect(data.companyName).to.be.a('string');
              expect(data.companyName).to.be("");
              expect(data.contractDescription1).to.be.a('string');
              expect(data.contractDescription1).to.be("");
              expect(data.listingExchange).to.be.a('string');
              expect(data.listingExchange).to.be("");
              expect(data.secType).to.be.a('string');
              expect(data.secType).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
