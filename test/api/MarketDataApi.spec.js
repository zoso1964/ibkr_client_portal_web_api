/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClientPortalWebApi.MarketDataApi();
  });

  describe('(package)', function() {
    describe('MarketDataApi', function() {
      describe('iserverMarketdataHistoryGet', function() {
        it('should call iserverMarketdataHistoryGet successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverMarketdataHistoryGet call and complete the assertions
          /*
          var conid = "conid_example";
          var period = "period_example";
          var opts = {};
          opts.bar = "bar_example";

          instance.iserverMarketdataHistoryGet(conid, period, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.HistoryData);
            expect(data.start).to.be.a('string');
            expect(data.start).to.be("");
            expect(data.mdAvailability).to.be.a('string');
            expect(data.mdAvailability).to.be("");
            expect(data.barLength).to.be.a('number');
            expect(data.barLength).to.be(0);
            expect(data.delay).to.be.a('number');
            expect(data.delay).to.be(0);
            expect(data.high).to.be.a('string');
            expect(data.high).to.be("");
            expect(data.low).to.be.a('string');
            expect(data.low).to.be("");
            expect(data.symbol).to.be.a('string');
            expect(data.symbol).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.tickNum).to.be.a('string');
            expect(data.tickNum).to.be("");
            expect(data.timePeriod).to.be.a('string');
            expect(data.timePeriod).to.be("");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ClientPortalWebApi.HistorydataData);
                expect(data.o).to.be.a('number');
                expect(data.o).to.be();
                expect(data.c).to.be.a('number');
                expect(data.c).to.be();
                expect(data.h).to.be.a('number');
                expect(data.h).to.be();
                expect(data.l).to.be.a('number');
                expect(data.l).to.be();
                expect(data.v).to.be.a('number');
                expect(data.v).to.be();
                expect(data.t).to.be.a('number');
                expect(data.t).to.be();

                      }
            }
            expect(data.points).to.be.a('number');
            expect(data.points).to.be();
            expect(data.travelTime).to.be.a('number');
            expect(data.travelTime).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iserverMarketdataSnapshotGet', function() {
        it('should call iserverMarketdataSnapshotGet successfully', function(done) {
          // TODO: uncomment, update parameter values for iserverMarketdataSnapshotGet call and complete the assertions
          /*
          var conids = "conids_example";
          var opts = {};
          opts.since = 56;
          opts.fields = "fields_example";

          instance.iserverMarketdataSnapshotGet(conids, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse2007);
              expect(data._31).to.be.a('string');
              expect(data._31).to.be("");
              expect(data._55).to.be.a('string');
              expect(data._55).to.be("");
              expect(data._58).to.be.a('string');
              expect(data._58).to.be("");
              expect(data._70).to.be.a('string');
              expect(data._70).to.be("");
              expect(data._71).to.be.a('string');
              expect(data._71).to.be("");
              expect(data._72).to.be.a('string');
              expect(data._72).to.be("");
              expect(data._73).to.be.a('string');
              expect(data._73).to.be("");
              expect(data._74).to.be.a('string');
              expect(data._74).to.be("");
              expect(data._75).to.be.a('string');
              expect(data._75).to.be("");
              expect(data._76).to.be.a('string');
              expect(data._76).to.be("");
              expect(data._77).to.be.a('string');
              expect(data._77).to.be("");
              expect(data._78).to.be.a('string');
              expect(data._78).to.be("");
              expect(data._82).to.be.a('string');
              expect(data._82).to.be("");
              expect(data._83).to.be.a('string');
              expect(data._83).to.be("");
              expect(data._84).to.be.a('string');
              expect(data._84).to.be("");
              expect(data._85).to.be.a('string');
              expect(data._85).to.be("");
              expect(data._86).to.be.a('string');
              expect(data._86).to.be("");
              expect(data._87).to.be.a('string');
              expect(data._87).to.be("");
              expect(data._88).to.be.a('string');
              expect(data._88).to.be("");
              expect(data._6004).to.be.a('string');
              expect(data._6004).to.be("");
              expect(data._6008).to.be.a('string');
              expect(data._6008).to.be("");
              expect(data._6070).to.be.a('string');
              expect(data._6070).to.be("");
              expect(data._6072).to.be.a('string');
              expect(data._6072).to.be("");
              expect(data._6073).to.be.a('string');
              expect(data._6073).to.be("");
              expect(data._6119).to.be.a('string');
              expect(data._6119).to.be("");
              expect(data._6457).to.be.a('string');
              expect(data._6457).to.be("");
              expect(data._6509).to.be.a('string');
              expect(data._6509).to.be("");
              expect(data._7051).to.be.a('string');
              expect(data._7051).to.be("");
              expect(data._7094).to.be.a('string');
              expect(data._7094).to.be("");
              expect(data._7219).to.be.a('string');
              expect(data._7219).to.be("");
              expect(data._7220).to.be.a('string');
              expect(data._7220).to.be("");
              expect(data._7221).to.be.a('string');
              expect(data._7221).to.be("");
              expect(data._7280).to.be.a('string');
              expect(data._7280).to.be("");
              expect(data._7281).to.be.a('string');
              expect(data._7281).to.be("");
              expect(data._7282).to.be.a('string');
              expect(data._7282).to.be("");
              expect(data._7284).to.be.a('string');
              expect(data._7284).to.be("");
              expect(data._7285).to.be.a('string');
              expect(data._7285).to.be("");
              expect(data._7286).to.be.a('string');
              expect(data._7286).to.be("");
              expect(data._7287).to.be.a('string');
              expect(data._7287).to.be("");
              expect(data._7288).to.be.a('string');
              expect(data._7288).to.be("");
              expect(data._7289).to.be.a('string');
              expect(data._7289).to.be("");
              expect(data._7290).to.be.a('string');
              expect(data._7290).to.be("");
              expect(data._7291).to.be.a('string');
              expect(data._7291).to.be("");
              expect(data._7292).to.be.a('string');
              expect(data._7292).to.be("");
              expect(data._7293).to.be.a('string');
              expect(data._7293).to.be("");
              expect(data._7294).to.be.a('string');
              expect(data._7294).to.be("");
              expect(data._7295).to.be.a('string');
              expect(data._7295).to.be("");
              expect(data._7296).to.be.a('string');
              expect(data._7296).to.be("");
              expect(data._7633).to.be.a('string');
              expect(data._7633).to.be("");
              expect(data.serverId).to.be.a('string');
              expect(data.serverId).to.be("");
              expect(data.conid).to.be.a('number');
              expect(data.conid).to.be(0);
              expect(data.updated).to.be.a('number');
              expect(data.updated).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
