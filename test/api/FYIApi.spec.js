/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClientPortalWebApi.FYIApi();
  });

  describe('(package)', function() {
    describe('FYIApi', function() {
      describe('fyiDeliveryoptionsDeviceIdDelete', function() {
        it('should call fyiDeliveryoptionsDeviceIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for fyiDeliveryoptionsDeviceIdDelete call and complete the assertions
          /*
          var deviceId = "deviceId_example";

          instance.fyiDeliveryoptionsDeviceIdDelete(deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiDeliveryoptionsDevicePost', function() {
        it('should call fyiDeliveryoptionsDevicePost successfully', function(done) {
          // TODO: uncomment, update parameter values for fyiDeliveryoptionsDevicePost call and complete the assertions
          /*
          var body = new ClientPortalWebApi.Body7();
          body.devicename = "";
          body.deviceId = "";
          body.uiName = "";
          body.enabled = false;

          instance.fyiDeliveryoptionsDevicePost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20021);
            expect(data.T).to.be.a('number');
            expect(data.T).to.be(0);
            expect(data.V).to.be.a('number');
            expect(data.V).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiDeliveryoptionsEmailPut', function() {
        it('should call fyiDeliveryoptionsEmailPut successfully', function(done) {
          // TODO: uncomment, update parameter values for fyiDeliveryoptionsEmailPut call and complete the assertions
          /*
          var enabled = "enabled_example";

          instance.fyiDeliveryoptionsEmailPut(enabled, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20021);
            expect(data.T).to.be.a('number');
            expect(data.T).to.be(0);
            expect(data.V).to.be.a('number');
            expect(data.V).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiDeliveryoptionsGet', function() {
        it('should call fyiDeliveryoptionsGet successfully', function(done) {
          // TODO: uncomment fyiDeliveryoptionsGet call and complete the assertions
          /*

          instance.fyiDeliveryoptionsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20022);
            expect(data.M).to.be.a('number');
            expect(data.M).to.be(0);
            {
              let dataCtr = data.E;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ClientPortalWebApi.InlineResponse20022E);
                expect(data.NM).to.be.a('string');
                expect(data.NM).to.be("");
                expect(data.I).to.be.a('string');
                expect(data.I).to.be("");
                expect(data.UI).to.be.a('string');
                expect(data.UI).to.be("");
                expect(data.A).to.be.a('string');
                expect(data.A).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiDisclaimerTypecodeGet', function() {
        it('should call fyiDisclaimerTypecodeGet successfully', function(done) {
          // TODO: uncomment, update parameter values for fyiDisclaimerTypecodeGet call and complete the assertions
          /*
          var typecode = "typecode_example";

          instance.fyiDisclaimerTypecodeGet(typecode, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20020);
            expect(data.DT).to.be.a('string');
            expect(data.DT).to.be("");
            expect(data.FC).to.be.a('string');
            expect(data.FC).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiDisclaimerTypecodePut', function() {
        it('should call fyiDisclaimerTypecodePut successfully', function(done) {
          // TODO: uncomment, update parameter values for fyiDisclaimerTypecodePut call and complete the assertions
          /*
          var typecode = "typecode_example";

          instance.fyiDisclaimerTypecodePut(typecode, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20021);
            expect(data.T).to.be.a('number');
            expect(data.T).to.be(0);
            expect(data.V).to.be.a('number');
            expect(data.V).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiNotificationsGet', function() {
        it('should call fyiNotificationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for fyiNotificationsGet call and complete the assertions
          /*
          var max = "max_example";
          var opts = {};
          opts.exclude = "exclude_example";
          opts.include = "include_example";

          instance.fyiNotificationsGet(max, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Notifications);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiNotificationsMoreGet', function() {
        it('should call fyiNotificationsMoreGet successfully', function(done) {
          // TODO: uncomment, update parameter values for fyiNotificationsMoreGet call and complete the assertions
          /*
          var id = "id_example";

          instance.fyiNotificationsMoreGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Notifications);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiNotificationsNotificationIdPut', function() {
        it('should call fyiNotificationsNotificationIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for fyiNotificationsNotificationIdPut call and complete the assertions
          /*
          var notificationId = "notificationId_example";

          instance.fyiNotificationsNotificationIdPut(notificationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiSettingsGet', function() {
        it('should call fyiSettingsGet successfully', function(done) {
          // TODO: uncomment fyiSettingsGet call and complete the assertions
          /*

          instance.fyiSettingsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse20019);
              expect(data.A).to.be.a('number');
              expect(data.A).to.be(0);
              expect(data.FC).to.be.a('string');
              expect(data.FC).to.be("");
              expect(data.H).to.be.a('number');
              expect(data.H).to.be(0);
              expect(data.FD).to.be.a('string');
              expect(data.FD).to.be("");
              expect(data.FN).to.be.a('string');
              expect(data.FN).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiSettingsTypecodePost', function() {
        it('should call fyiSettingsTypecodePost successfully', function(done) {
          // TODO: uncomment, update parameter values for fyiSettingsTypecodePost call and complete the assertions
          /*
          var typecode = "typecode_example";
          var body = new ClientPortalWebApi.Body6();
          body.enabled = false;

          instance.fyiSettingsTypecodePost(typecode, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fyiUnreadnumberGet', function() {
        it('should call fyiUnreadnumberGet successfully', function(done) {
          // TODO: uncomment fyiUnreadnumberGet call and complete the assertions
          /*

          instance.fyiUnreadnumberGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.InlineResponse20018);
            expect(data.BN).to.be.a('number');
            expect(data.BN).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
