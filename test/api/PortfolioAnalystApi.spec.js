/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClientPortalWebApi.PortfolioAnalystApi();
  });

  describe('(package)', function() {
    describe('PortfolioAnalystApi', function() {
      describe('paPerformancePost', function() {
        it('should call paPerformancePost successfully', function(done) {
          // TODO: uncomment, update parameter values for paPerformancePost call and complete the assertions
          /*
          var body = new ClientPortalWebApi.Body3();
          body.acctIds = [""];

          instance.paPerformancePost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Performance);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.cps).to.be.a(ClientPortalWebApi.PerformanceCps);
                  {
                let dataCtr = data.cps.dates;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.cps.freq).to.be.a('string');
              expect(data.cps.freq).to.be("");
              {
                let dataCtr = data.cps.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.PerformanceCpsData);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.idType).to.be.a('string');
                  expect(data.idType).to.be("");
                  expect(data.start).to.be.a('string');
                  expect(data.start).to.be("");
                  expect(data.baseCurrency).to.be.a('string');
                  expect(data.baseCurrency).to.be("");
                  {
                    let dataCtr = data.returns;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be();
                    }
                  }
                  expect(data.end).to.be.a('string');
                  expect(data.end).to.be("");
  
                        }
              }
            expect(data.tpps).to.be.a(ClientPortalWebApi.PerformanceTpps);
                  {
                let dataCtr = data.tpps.dates;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.tpps.freq).to.be.a('string');
              expect(data.tpps.freq).to.be("");
              {
                let dataCtr = data.tpps.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.PerformanceCpsData);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.idType).to.be.a('string');
                  expect(data.idType).to.be("");
                  expect(data.start).to.be.a('string');
                  expect(data.start).to.be("");
                  expect(data.baseCurrency).to.be.a('string');
                  expect(data.baseCurrency).to.be("");
                  {
                    let dataCtr = data.returns;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be();
                    }
                  }
                  expect(data.end).to.be.a('string');
                  expect(data.end).to.be("");
  
                        }
              }
            expect(data.nav).to.be.a(ClientPortalWebApi.PerformanceNav);
                  {
                let dataCtr = data.nav.dates;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.nav.freq).to.be.a('string');
              expect(data.nav.freq).to.be("");
              {
                let dataCtr = data.nav.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.PerformanceCpsData);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.idType).to.be.a('string');
                  expect(data.idType).to.be("");
                  expect(data.start).to.be.a('string');
                  expect(data.start).to.be("");
                  expect(data.baseCurrency).to.be.a('string');
                  expect(data.baseCurrency).to.be("");
                  {
                    let dataCtr = data.returns;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be();
                    }
                  }
                  expect(data.end).to.be.a('string');
                  expect(data.end).to.be("");
  
                        }
              }
            expect(data.pm).to.be.a('string');
            expect(data.pm).to.be("");
            {
              let dataCtr = data.included;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.currencyType).to.be.a('string');
            expect(data.currencyType).to.be("");
            expect(data.rc).to.be.a('number');
            expect(data.rc).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('paSummaryPost', function() {
        it('should call paSummaryPost successfully', function(done) {
          // TODO: uncomment, update parameter values for paSummaryPost call and complete the assertions
          /*
          var body = new ClientPortalWebApi.Body4();
          body.acctIds = [""];

          instance.paSummaryPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ClientPortalWebApi.Summary);
            expect(data.total).to.be.a(ClientPortalWebApi.SummaryTotal);
                  expect(data.total.chg).to.be.a('string');
              expect(data.total.chg).to.be("");
              expect(data.total.rtn).to.be.a('string');
              expect(data.total.rtn).to.be("");
              expect(data.total.incompleteData).to.be.a('boolean');
              expect(data.total.incompleteData).to.be(false);
              expect(data.total.endVal).to.be.a('string');
              expect(data.total.endVal).to.be("");
              expect(data.total.startVal).to.be.a('string');
              expect(data.total.startVal).to.be("");
            expect(data.startDate).to.be.a('string');
            expect(data.startDate).to.be("");
            {
              let dataCtr = data.excludedAccounts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ClientPortalWebApi.SummaryExcludedAccounts);
                expect(data.lastUpdateAttempt).to.be.a('string');
                expect(data.lastUpdateAttempt).to.be("");
                expect(data.fiName).to.be.a('string');
                expect(data.fiName).to.be("");
                expect(data.acctTitle).to.be.a('string');
                expect(data.acctTitle).to.be("");
                expect(data.acctNumAtFI).to.be.a('string');
                expect(data.acctNumAtFI).to.be("");
                expect(data.acctId).to.be.a('string');
                expect(data.acctId).to.be("");
                expect(data.lastUpdate).to.be.a('string');
                expect(data.lastUpdate).to.be("");
                expect(data.harvestCode).to.be.a('number');
                expect(data.harvestCode).to.be(0);
                expect(data.lastUpdateStatusCode).to.be.a('string');
                expect(data.lastUpdateStatusCode).to.be("");
                expect(data.rc).to.be.a('number');
                expect(data.rc).to.be(0);

                      }
            }
            expect(data.lastSuccessfulUpdate).to.be.a('string');
            expect(data.lastSuccessfulUpdate).to.be("");
            {
              let dataCtr = data.accountSummaries;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ClientPortalWebApi.SummaryAccountSummaries);
                expect(data.chg).to.be.a('string');
                expect(data.chg).to.be("");
                expect(data.hasAccounts).to.be.a('string');
                expect(data.hasAccounts).to.be("");
                expect(data.accountTypeName).to.be.a('string');
                expect(data.accountTypeName).to.be("");
                expect(data.rtn).to.be.a('string');
                expect(data.rtn).to.be("");
                expect(data.endVal).to.be.a('string');
                expect(data.endVal).to.be("");
                expect(data.accountTypeCode).to.be.a('string');
                expect(data.accountTypeCode).to.be("");
                expect(data.startVal).to.be.a('string');
                expect(data.startVal).to.be("");

                      }
            }
            expect(data.endDate).to.be.a('string');
            expect(data.endDate).to.be("");
            expect(data.hasExternalAccounts).to.be.a('boolean');
            expect(data.hasExternalAccounts).to.be(false);
            expect(data.rc).to.be.a('number');
            expect(data.rc).to.be(0);
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.userId).to.be.a('string');
            expect(data.userId).to.be("");
            expect(data.pm).to.be.a('string');
            expect(data.pm).to.be("");
            expect(data.view).to.be.a('string');
            expect(data.view).to.be("");
            expect(data.balanceByDate).to.be.a(ClientPortalWebApi.SummaryBalanceByDate);
                  {
                let dataCtr = data.balanceByDate.series;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.SummaryBalanceByDateSeries);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.groupId).to.be.a('string');
                  expect(data.groupId).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  {
                    let dataCtr = data._date;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Array);
                      expect(data).to.be([]);
                    }
                  }
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
