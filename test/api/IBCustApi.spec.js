/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClientPortalWebApi.IBCustApi();
  });

  describe('(package)', function() {
    describe('IBCustApi', function() {
      describe('ibcustEntityInfoGet', function() {
        it('should call ibcustEntityInfoGet successfully', function(done) {
          // TODO: uncomment ibcustEntityInfoGet call and complete the assertions
          /*

          instance.ibcustEntityInfoGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ClientPortalWebApi.InlineResponse20017);
              expect(data.applicantId).to.be.a('number');
              expect(data.applicantId).to.be();
              {
                let dataCtr = data.entities;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ClientPortalWebApi.IbcustentityinfoEntities);
                  expect(data.canTrade).to.be.a('boolean');
                  expect(data.canTrade).to.be(false);
                  expect(data.canSign).to.be.a('boolean');
                  expect(data.canSign).to.be(false);
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  expect(data.name).to.be.a(ClientPortalWebApi.IbcustentityinfoName);
                        expect(data.name.salutation).to.be.a('string');
                    expect(data.name.salutation).to.be("");
                    expect(data.name.firstName).to.be.a('string');
                    expect(data.name.firstName).to.be("");
                    expect(data.name.lastName).to.be.a('string');
                    expect(data.name.lastName).to.be("");
                  expect(data.address).to.be.a(ClientPortalWebApi.IbcustentityinfoAddress);
                        expect(data.address.street).to.be.a('string');
                    expect(data.address.street).to.be("");
                    expect(data.address.street2).to.be.a('string');
                    expect(data.address.street2).to.be("");
                    expect(data.address.city).to.be.a('string');
                    expect(data.address.city).to.be("");
                    expect(data.address.state).to.be.a('string');
                    expect(data.address.state).to.be("");
                    expect(data.address.postalCode).to.be.a('string');
                    expect(data.address.postalCode).to.be("");
                    expect(data.address.country).to.be.a('string');
                    expect(data.address.country).to.be("");
                    expect(data.address.countryCode).to.be.a('string');
                    expect(data.address.countryCode).to.be("");
                    expect(data.address.compact).to.be.a('string');
                    expect(data.address.compact).to.be("");
                  {
                    let dataCtr = data.identDocs;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
