/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Order', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.Order();
      });

      it('should create an instance of Order', function() {
        // TODO: update the code to test Order
        expect(instance).to.be.a(ClientPortalWebApi.Order);
      });

      it('should have the property acct (base name: "acct")', function() {
        // TODO: update the code to test the property acct
        expect(instance).to.have.property('acct');
        // expect(instance.acct).to.be(expectedValueLiteral);
      });

      it('should have the property conid (base name: "conid")', function() {
        // TODO: update the code to test the property conid
        expect(instance).to.have.property('conid');
        // expect(instance.conid).to.be(expectedValueLiteral);
      });

      it('should have the property orderDesc (base name: "orderDesc")', function() {
        // TODO: update the code to test the property orderDesc
        expect(instance).to.have.property('orderDesc');
        // expect(instance.orderDesc).to.be(expectedValueLiteral);
      });

      it('should have the property description1 (base name: "description1")', function() {
        // TODO: update the code to test the property description1
        expect(instance).to.have.property('description1');
        // expect(instance.description1).to.be(expectedValueLiteral);
      });

      it('should have the property ticker (base name: "ticker")', function() {
        // TODO: update the code to test the property ticker
        expect(instance).to.have.property('ticker');
        // expect(instance.ticker).to.be(expectedValueLiteral);
      });

      it('should have the property secType (base name: "secType")', function() {
        // TODO: update the code to test the property secType
        expect(instance).to.have.property('secType');
        // expect(instance.secType).to.be(expectedValueLiteral);
      });

      it('should have the property listingExchange (base name: "listingExchange")', function() {
        // TODO: update the code to test the property listingExchange
        expect(instance).to.have.property('listingExchange');
        // expect(instance.listingExchange).to.be(expectedValueLiteral);
      });

      it('should have the property remainingQuantity (base name: "remainingQuantity")', function() {
        // TODO: update the code to test the property remainingQuantity
        expect(instance).to.have.property('remainingQuantity');
        // expect(instance.remainingQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property filledQuantity (base name: "filledQuantity")', function() {
        // TODO: update the code to test the property filledQuantity
        expect(instance).to.have.property('filledQuantity');
        // expect(instance.filledQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property companyName (base name: "companyName")', function() {
        // TODO: update the code to test the property companyName
        expect(instance).to.have.property('companyName');
        // expect(instance.companyName).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property origOrderType (base name: "origOrderType")', function() {
        // TODO: update the code to test the property origOrderType
        expect(instance).to.have.property('origOrderType');
        // expect(instance.origOrderType).to.be(expectedValueLiteral);
      });

      it('should have the property side (base name: "side")', function() {
        // TODO: update the code to test the property side
        expect(instance).to.have.property('side');
        // expect(instance.side).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property bgColor (base name: "bgColor")', function() {
        // TODO: update the code to test the property bgColor
        expect(instance).to.have.property('bgColor');
        // expect(instance.bgColor).to.be(expectedValueLiteral);
      });

      it('should have the property fgColor (base name: "fgColor")', function() {
        // TODO: update the code to test the property fgColor
        expect(instance).to.have.property('fgColor');
        // expect(instance.fgColor).to.be(expectedValueLiteral);
      });

      it('should have the property orderId (base name: "orderId")', function() {
        // TODO: update the code to test the property orderId
        expect(instance).to.have.property('orderId');
        // expect(instance.orderId).to.be(expectedValueLiteral);
      });

      it('should have the property parentId (base name: "parentId")', function() {
        // TODO: update the code to test the property parentId
        expect(instance).to.have.property('parentId');
        // expect(instance.parentId).to.be(expectedValueLiteral);
      });

    });
  });

}));
