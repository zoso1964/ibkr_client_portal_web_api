/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Trade', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.Trade();
      });

      it('should create an instance of Trade', function() {
        // TODO: update the code to test Trade
        expect(instance).to.be.a(ClientPortalWebApi.Trade);
      });

      it('should have the property executionId (base name: "execution_id")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property side (base name: "side")', function() {
        // TODO: update the code to test the property side
        expect(instance).to.have.property('side');
        // expect(instance.side).to.be(expectedValueLiteral);
      });

      it('should have the property orderDescription (base name: "order_description")', function() {
        // TODO: update the code to test the property orderDescription
        expect(instance).to.have.property('orderDescription');
        // expect(instance.orderDescription).to.be(expectedValueLiteral);
      });

      it('should have the property tradeTime (base name: "trade_time")', function() {
        // TODO: update the code to test the property tradeTime
        expect(instance).to.have.property('tradeTime');
        // expect(instance.tradeTime).to.be(expectedValueLiteral);
      });

      it('should have the property tradeTimeR (base name: "trade_time_r")', function() {
        // TODO: update the code to test the property tradeTimeR
        expect(instance).to.have.property('tradeTimeR');
        // expect(instance.tradeTimeR).to.be(expectedValueLiteral);
      });

      it('should have the property size (base name: "size")', function() {
        // TODO: update the code to test the property size
        expect(instance).to.have.property('size');
        // expect(instance.size).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property submitter (base name: "submitter")', function() {
        // TODO: update the code to test the property submitter
        expect(instance).to.have.property('submitter');
        // expect(instance.submitter).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property comission (base name: "comission")', function() {
        // TODO: update the code to test the property comission
        expect(instance).to.have.property('comission');
        // expect(instance.comission).to.be(expectedValueLiteral);
      });

      it('should have the property netAmount (base name: "net_amount")', function() {
        // TODO: update the code to test the property netAmount
        expect(instance).to.have.property('netAmount');
        // expect(instance.netAmount).to.be(expectedValueLiteral);
      });

      it('should have the property account (base name: "account")', function() {
        // TODO: update the code to test the property account
        expect(instance).to.have.property('account');
        // expect(instance.account).to.be(expectedValueLiteral);
      });

      it('should have the property companyName (base name: "company_name")', function() {
        // TODO: update the code to test the property companyName
        expect(instance).to.have.property('companyName');
        // expect(instance.companyName).to.be(expectedValueLiteral);
      });

      it('should have the property contractDescription1 (base name: "contract_description_1")', function() {
        // TODO: update the code to test the property contractDescription1
        expect(instance).to.have.property('contractDescription1');
        // expect(instance.contractDescription1).to.be(expectedValueLiteral);
      });

      it('should have the property secType (base name: "sec_type")', function() {
        // TODO: update the code to test the property secType
        expect(instance).to.have.property('secType');
        // expect(instance.secType).to.be(expectedValueLiteral);
      });

      it('should have the property conidex (base name: "conidex")', function() {
        // TODO: update the code to test the property conidex
        expect(instance).to.have.property('conidex');
        // expect(instance.conidex).to.be(expectedValueLiteral);
      });

      it('should have the property position (base name: "position")', function() {
        // TODO: update the code to test the property position
        expect(instance).to.have.property('position');
        // expect(instance.position).to.be(expectedValueLiteral);
      });

      it('should have the property clearingId (base name: "clearing_id")', function() {
        // TODO: update the code to test the property clearingId
        expect(instance).to.have.property('clearingId');
        // expect(instance.clearingId).to.be(expectedValueLiteral);
      });

      it('should have the property clearingName (base name: "clearing_name")', function() {
        // TODO: update the code to test the property clearingName
        expect(instance).to.have.property('clearingName');
        // expect(instance.clearingName).to.be(expectedValueLiteral);
      });

    });
  });

}));
