/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Summary', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.Summary();
      });

      it('should create an instance of Summary', function() {
        // TODO: update the code to test Summary
        expect(instance).to.be.a(ClientPortalWebApi.Summary);
      });

      it('should have the property total (base name: "total")', function() {
        // TODO: update the code to test the property total
        expect(instance).to.have.property('total');
        // expect(instance.total).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "startDate")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property excludedAccounts (base name: "excludedAccounts")', function() {
        // TODO: update the code to test the property excludedAccounts
        expect(instance).to.have.property('excludedAccounts');
        // expect(instance.excludedAccounts).to.be(expectedValueLiteral);
      });

      it('should have the property lastSuccessfulUpdate (base name: "lastSuccessfulUpdate")', function() {
        // TODO: update the code to test the property lastSuccessfulUpdate
        expect(instance).to.have.property('lastSuccessfulUpdate');
        // expect(instance.lastSuccessfulUpdate).to.be(expectedValueLiteral);
      });

      it('should have the property accountSummaries (base name: "accountSummaries")', function() {
        // TODO: update the code to test the property accountSummaries
        expect(instance).to.have.property('accountSummaries');
        // expect(instance.accountSummaries).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "endDate")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property hasExternalAccounts (base name: "hasExternalAccounts")', function() {
        // TODO: update the code to test the property hasExternalAccounts
        expect(instance).to.have.property('hasExternalAccounts');
        // expect(instance.hasExternalAccounts).to.be(expectedValueLiteral);
      });

      it('should have the property rc (base name: "rc")', function() {
        // TODO: update the code to test the property rc
        expect(instance).to.have.property('rc');
        // expect(instance.rc).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property pm (base name: "pm")', function() {
        // TODO: update the code to test the property pm
        expect(instance).to.have.property('pm');
        // expect(instance.pm).to.be(expectedValueLiteral);
      });

      it('should have the property view (base name: "view")', function() {
        // TODO: update the code to test the property view
        expect(instance).to.have.property('view');
        // expect(instance.view).to.be(expectedValueLiteral);
      });

      it('should have the property balanceByDate (base name: "balanceByDate")', function() {
        // TODO: update the code to test the property balanceByDate
        expect(instance).to.have.property('balanceByDate');
        // expect(instance.balanceByDate).to.be(expectedValueLiteral);
      });

    });
  });

}));
