/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderRequest', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.OrderRequest();
      });

      it('should create an instance of OrderRequest', function() {
        // TODO: update the code to test OrderRequest
        expect(instance).to.be.a(ClientPortalWebApi.OrderRequest);
      });

      it('should have the property acctId (base name: "acctId")', function() {
        // TODO: update the code to test the property acctId
        expect(instance).to.have.property('acctId');
        // expect(instance.acctId).to.be(expectedValueLiteral);
      });

      it('should have the property conid (base name: "conid")', function() {
        // TODO: update the code to test the property conid
        expect(instance).to.have.property('conid');
        // expect(instance.conid).to.be(expectedValueLiteral);
      });

      it('should have the property secType (base name: "secType")', function() {
        // TODO: update the code to test the property secType
        expect(instance).to.have.property('secType');
        // expect(instance.secType).to.be(expectedValueLiteral);
      });

      it('should have the property cOID (base name: "cOID")', function() {
        // TODO: update the code to test the property cOID
        expect(instance).to.have.property('cOID');
        // expect(instance.cOID).to.be(expectedValueLiteral);
      });

      it('should have the property parentId (base name: "parentId")', function() {
        // TODO: update the code to test the property parentId
        expect(instance).to.have.property('parentId');
        // expect(instance.parentId).to.be(expectedValueLiteral);
      });

      it('should have the property orderType (base name: "orderType")', function() {
        // TODO: update the code to test the property orderType
        expect(instance).to.have.property('orderType');
        // expect(instance.orderType).to.be(expectedValueLiteral);
      });

      it('should have the property listingExchange (base name: "listingExchange")', function() {
        // TODO: update the code to test the property listingExchange
        expect(instance).to.have.property('listingExchange');
        // expect(instance.listingExchange).to.be(expectedValueLiteral);
      });

      it('should have the property outsideRTH (base name: "outsideRTH")', function() {
        // TODO: update the code to test the property outsideRTH
        expect(instance).to.have.property('outsideRTH');
        // expect(instance.outsideRTH).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property side (base name: "side")', function() {
        // TODO: update the code to test the property side
        expect(instance).to.have.property('side');
        // expect(instance.side).to.be(expectedValueLiteral);
      });

      it('should have the property ticker (base name: "ticker")', function() {
        // TODO: update the code to test the property ticker
        expect(instance).to.have.property('ticker');
        // expect(instance.ticker).to.be(expectedValueLiteral);
      });

      it('should have the property tif (base name: "tif")', function() {
        // TODO: update the code to test the property tif
        expect(instance).to.have.property('tif');
        // expect(instance.tif).to.be(expectedValueLiteral);
      });

      it('should have the property referrer (base name: "referrer")', function() {
        // TODO: update the code to test the property referrer
        expect(instance).to.have.property('referrer');
        // expect(instance.referrer).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property useAdaptive (base name: "useAdaptive")', function() {
        // TODO: update the code to test the property useAdaptive
        expect(instance).to.have.property('useAdaptive');
        // expect(instance.useAdaptive).to.be(expectedValueLiteral);
      });

    });
  });

}));
