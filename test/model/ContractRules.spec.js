/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ContractRules', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.ContractRules();
      });

      it('should create an instance of ContractRules', function() {
        // TODO: update the code to test ContractRules
        expect(instance).to.be.a(ClientPortalWebApi.ContractRules);
      });

      it('should have the property orderTypes (base name: "orderTypes")', function() {
        // TODO: update the code to test the property orderTypes
        expect(instance).to.have.property('orderTypes');
        // expect(instance.orderTypes).to.be(expectedValueLiteral);
      });

      it('should have the property orderTypesOutside (base name: "orderTypesOutside")', function() {
        // TODO: update the code to test the property orderTypesOutside
        expect(instance).to.have.property('orderTypesOutside');
        // expect(instance.orderTypesOutside).to.be(expectedValueLiteral);
      });

      it('should have the property defaultSize (base name: "defaultSize")', function() {
        // TODO: update the code to test the property defaultSize
        expect(instance).to.have.property('defaultSize');
        // expect(instance.defaultSize).to.be(expectedValueLiteral);
      });

      it('should have the property sizeIncrement (base name: "sizeIncrement")', function() {
        // TODO: update the code to test the property sizeIncrement
        expect(instance).to.have.property('sizeIncrement');
        // expect(instance.sizeIncrement).to.be(expectedValueLiteral);
      });

      it('should have the property tifTypes (base name: "tifTypes")', function() {
        // TODO: update the code to test the property tifTypes
        expect(instance).to.have.property('tifTypes');
        // expect(instance.tifTypes).to.be(expectedValueLiteral);
      });

      it('should have the property limitPrice (base name: "limitPrice")', function() {
        // TODO: update the code to test the property limitPrice
        expect(instance).to.have.property('limitPrice');
        // expect(instance.limitPrice).to.be(expectedValueLiteral);
      });

      it('should have the property stopprice (base name: "stopprice")', function() {
        // TODO: update the code to test the property stopprice
        expect(instance).to.have.property('stopprice');
        // expect(instance.stopprice).to.be(expectedValueLiteral);
      });

      it('should have the property preview (base name: "preview")', function() {
        // TODO: update the code to test the property preview
        expect(instance).to.have.property('preview');
        // expect(instance.preview).to.be(expectedValueLiteral);
      });

      it('should have the property displaySize (base name: "displaySize")', function() {
        // TODO: update the code to test the property displaySize
        expect(instance).to.have.property('displaySize');
        // expect(instance.displaySize).to.be(expectedValueLiteral);
      });

      it('should have the property increment (base name: "increment")', function() {
        // TODO: update the code to test the property increment
        expect(instance).to.have.property('increment');
        // expect(instance.increment).to.be(expectedValueLiteral);
      });

    });
  });

}));
