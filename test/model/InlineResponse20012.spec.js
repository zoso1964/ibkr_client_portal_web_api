/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20012', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.InlineResponse20012();
      });

      it('should create an instance of InlineResponse20012', function() {
        // TODO: update the code to test InlineResponse20012
        expect(instance).to.be.a(ClientPortalWebApi.InlineResponse20012);
      });

      it('should have the property accountready (base name: "accountready")', function() {
        // TODO: update the code to test the property accountready
        expect(instance).to.have.property('accountready');
        // expect(instance.accountready).to.be(expectedValueLiteral);
      });

      it('should have the property accounttype (base name: "accounttype")', function() {
        // TODO: update the code to test the property accounttype
        expect(instance).to.have.property('accounttype');
        // expect(instance.accounttype).to.be(expectedValueLiteral);
      });

      it('should have the property accruedcash (base name: "accruedcash")', function() {
        // TODO: update the code to test the property accruedcash
        expect(instance).to.have.property('accruedcash');
        // expect(instance.accruedcash).to.be(expectedValueLiteral);
      });

      it('should have the property accruedcashC (base name: "accruedcash-c")', function() {
        // TODO: update the code to test the property accruedcashC
        expect(instance).to.have.property('accruedcashC');
        // expect(instance.accruedcashC).to.be(expectedValueLiteral);
      });

      it('should have the property accruedcashF (base name: "accruedcash-f")', function() {
        // TODO: update the code to test the property accruedcashF
        expect(instance).to.have.property('accruedcashF');
        // expect(instance.accruedcashF).to.be(expectedValueLiteral);
      });

      it('should have the property accruedcashS (base name: "accruedcash-s")', function() {
        // TODO: update the code to test the property accruedcashS
        expect(instance).to.have.property('accruedcashS');
        // expect(instance.accruedcashS).to.be(expectedValueLiteral);
      });

      it('should have the property accrueddividend (base name: "accrueddividend")', function() {
        // TODO: update the code to test the property accrueddividend
        expect(instance).to.have.property('accrueddividend');
        // expect(instance.accrueddividend).to.be(expectedValueLiteral);
      });

      it('should have the property accrueddividendC (base name: "accrueddividend-c")', function() {
        // TODO: update the code to test the property accrueddividendC
        expect(instance).to.have.property('accrueddividendC');
        // expect(instance.accrueddividendC).to.be(expectedValueLiteral);
      });

      it('should have the property accrueddividendF (base name: "accrueddividend-f")', function() {
        // TODO: update the code to test the property accrueddividendF
        expect(instance).to.have.property('accrueddividendF');
        // expect(instance.accrueddividendF).to.be(expectedValueLiteral);
      });

      it('should have the property accrueddividendS (base name: "accrueddividend-s")', function() {
        // TODO: update the code to test the property accrueddividendS
        expect(instance).to.have.property('accrueddividendS');
        // expect(instance.accrueddividendS).to.be(expectedValueLiteral);
      });

      it('should have the property availablefunds (base name: "availablefunds")', function() {
        // TODO: update the code to test the property availablefunds
        expect(instance).to.have.property('availablefunds');
        // expect(instance.availablefunds).to.be(expectedValueLiteral);
      });

      it('should have the property availablefundsC (base name: "availablefunds-c")', function() {
        // TODO: update the code to test the property availablefundsC
        expect(instance).to.have.property('availablefundsC');
        // expect(instance.availablefundsC).to.be(expectedValueLiteral);
      });

      it('should have the property availablefundsF (base name: "availablefunds-f")', function() {
        // TODO: update the code to test the property availablefundsF
        expect(instance).to.have.property('availablefundsF');
        // expect(instance.availablefundsF).to.be(expectedValueLiteral);
      });

      it('should have the property availablefundsS (base name: "availablefunds-s")', function() {
        // TODO: update the code to test the property availablefundsS
        expect(instance).to.have.property('availablefundsS');
        // expect(instance.availablefundsS).to.be(expectedValueLiteral);
      });

      it('should have the property billable (base name: "billable")', function() {
        // TODO: update the code to test the property billable
        expect(instance).to.have.property('billable');
        // expect(instance.billable).to.be(expectedValueLiteral);
      });

      it('should have the property billableC (base name: "billable-c")', function() {
        // TODO: update the code to test the property billableC
        expect(instance).to.have.property('billableC');
        // expect(instance.billableC).to.be(expectedValueLiteral);
      });

      it('should have the property billableF (base name: "billable-f")', function() {
        // TODO: update the code to test the property billableF
        expect(instance).to.have.property('billableF');
        // expect(instance.billableF).to.be(expectedValueLiteral);
      });

      it('should have the property billableS (base name: "billable-s")', function() {
        // TODO: update the code to test the property billableS
        expect(instance).to.have.property('billableS');
        // expect(instance.billableS).to.be(expectedValueLiteral);
      });

      it('should have the property buyingpower (base name: "buyingpower")', function() {
        // TODO: update the code to test the property buyingpower
        expect(instance).to.have.property('buyingpower');
        // expect(instance.buyingpower).to.be(expectedValueLiteral);
      });

      it('should have the property cushion (base name: "cushion")', function() {
        // TODO: update the code to test the property cushion
        expect(instance).to.have.property('cushion');
        // expect(instance.cushion).to.be(expectedValueLiteral);
      });

      it('should have the property daytradesremaining (base name: "daytradesremaining")', function() {
        // TODO: update the code to test the property daytradesremaining
        expect(instance).to.have.property('daytradesremaining');
        // expect(instance.daytradesremaining).to.be(expectedValueLiteral);
      });

      it('should have the property daytradesremainingt1 (base name: "daytradesremainingt+1")', function() {
        // TODO: update the code to test the property daytradesremainingt1
        expect(instance).to.have.property('daytradesremainingt1');
        // expect(instance.daytradesremainingt1).to.be(expectedValueLiteral);
      });

      it('should have the property daytradesremainingt2 (base name: "daytradesremainingt+2")', function() {
        // TODO: update the code to test the property daytradesremainingt2
        expect(instance).to.have.property('daytradesremainingt2');
        // expect(instance.daytradesremainingt2).to.be(expectedValueLiteral);
      });

      it('should have the property daytradesremainingt3 (base name: "daytradesremainingt+3")', function() {
        // TODO: update the code to test the property daytradesremainingt3
        expect(instance).to.have.property('daytradesremainingt3');
        // expect(instance.daytradesremainingt3).to.be(expectedValueLiteral);
      });

      it('should have the property daytradesremainingt4 (base name: "daytradesremainingt+4")', function() {
        // TODO: update the code to test the property daytradesremainingt4
        expect(instance).to.have.property('daytradesremainingt4');
        // expect(instance.daytradesremainingt4).to.be(expectedValueLiteral);
      });

      it('should have the property equitywithloanvalue (base name: "equitywithloanvalue")', function() {
        // TODO: update the code to test the property equitywithloanvalue
        expect(instance).to.have.property('equitywithloanvalue');
        // expect(instance.equitywithloanvalue).to.be(expectedValueLiteral);
      });

      it('should have the property equitywithloanvalueC (base name: "equitywithloanvalue-c")', function() {
        // TODO: update the code to test the property equitywithloanvalueC
        expect(instance).to.have.property('equitywithloanvalueC');
        // expect(instance.equitywithloanvalueC).to.be(expectedValueLiteral);
      });

      it('should have the property equitywithloanvalueF (base name: "equitywithloanvalue-f")', function() {
        // TODO: update the code to test the property equitywithloanvalueF
        expect(instance).to.have.property('equitywithloanvalueF');
        // expect(instance.equitywithloanvalueF).to.be(expectedValueLiteral);
      });

      it('should have the property equitywithloanvalueS (base name: "equitywithloanvalue-s")', function() {
        // TODO: update the code to test the property equitywithloanvalueS
        expect(instance).to.have.property('equitywithloanvalueS');
        // expect(instance.equitywithloanvalueS).to.be(expectedValueLiteral);
      });

      it('should have the property excessliquidity (base name: "excessliquidity")', function() {
        // TODO: update the code to test the property excessliquidity
        expect(instance).to.have.property('excessliquidity');
        // expect(instance.excessliquidity).to.be(expectedValueLiteral);
      });

      it('should have the property excessliquidityC (base name: "excessliquidity-c")', function() {
        // TODO: update the code to test the property excessliquidityC
        expect(instance).to.have.property('excessliquidityC');
        // expect(instance.excessliquidityC).to.be(expectedValueLiteral);
      });

      it('should have the property excessliquidityF (base name: "excessliquidity-f")', function() {
        // TODO: update the code to test the property excessliquidityF
        expect(instance).to.have.property('excessliquidityF');
        // expect(instance.excessliquidityF).to.be(expectedValueLiteral);
      });

      it('should have the property excessliquidityS (base name: "excessliquidity-s")', function() {
        // TODO: update the code to test the property excessliquidityS
        expect(instance).to.have.property('excessliquidityS');
        // expect(instance.excessliquidityS).to.be(expectedValueLiteral);
      });

      it('should have the property fullavailablefunds (base name: "fullavailablefunds")', function() {
        // TODO: update the code to test the property fullavailablefunds
        expect(instance).to.have.property('fullavailablefunds');
        // expect(instance.fullavailablefunds).to.be(expectedValueLiteral);
      });

      it('should have the property fullavailablefundsC (base name: "fullavailablefunds-c")', function() {
        // TODO: update the code to test the property fullavailablefundsC
        expect(instance).to.have.property('fullavailablefundsC');
        // expect(instance.fullavailablefundsC).to.be(expectedValueLiteral);
      });

      it('should have the property fullavailablefundsF (base name: "fullavailablefunds-f")', function() {
        // TODO: update the code to test the property fullavailablefundsF
        expect(instance).to.have.property('fullavailablefundsF');
        // expect(instance.fullavailablefundsF).to.be(expectedValueLiteral);
      });

      it('should have the property fullavailablefundsS (base name: "fullavailablefunds-s")', function() {
        // TODO: update the code to test the property fullavailablefundsS
        expect(instance).to.have.property('fullavailablefundsS');
        // expect(instance.fullavailablefundsS).to.be(expectedValueLiteral);
      });

      it('should have the property fullexcessliquidity (base name: "fullexcessliquidity")', function() {
        // TODO: update the code to test the property fullexcessliquidity
        expect(instance).to.have.property('fullexcessliquidity');
        // expect(instance.fullexcessliquidity).to.be(expectedValueLiteral);
      });

      it('should have the property fullexcessliquidityC (base name: "fullexcessliquidity-c")', function() {
        // TODO: update the code to test the property fullexcessliquidityC
        expect(instance).to.have.property('fullexcessliquidityC');
        // expect(instance.fullexcessliquidityC).to.be(expectedValueLiteral);
      });

      it('should have the property fullexcessliquidityF (base name: "fullexcessliquidity-f")', function() {
        // TODO: update the code to test the property fullexcessliquidityF
        expect(instance).to.have.property('fullexcessliquidityF');
        // expect(instance.fullexcessliquidityF).to.be(expectedValueLiteral);
      });

      it('should have the property fullexcessliquidityS (base name: "fullexcessliquidity-s")', function() {
        // TODO: update the code to test the property fullexcessliquidityS
        expect(instance).to.have.property('fullexcessliquidityS');
        // expect(instance.fullexcessliquidityS).to.be(expectedValueLiteral);
      });

      it('should have the property fullinitmarginreq (base name: "fullinitmarginreq")', function() {
        // TODO: update the code to test the property fullinitmarginreq
        expect(instance).to.have.property('fullinitmarginreq');
        // expect(instance.fullinitmarginreq).to.be(expectedValueLiteral);
      });

      it('should have the property fullinitmarginreqC (base name: "fullinitmarginreq-c")', function() {
        // TODO: update the code to test the property fullinitmarginreqC
        expect(instance).to.have.property('fullinitmarginreqC');
        // expect(instance.fullinitmarginreqC).to.be(expectedValueLiteral);
      });

      it('should have the property fullinitmarginreqF (base name: "fullinitmarginreq-f")', function() {
        // TODO: update the code to test the property fullinitmarginreqF
        expect(instance).to.have.property('fullinitmarginreqF');
        // expect(instance.fullinitmarginreqF).to.be(expectedValueLiteral);
      });

      it('should have the property fullinitmarginreqS (base name: "fullinitmarginreq-s")', function() {
        // TODO: update the code to test the property fullinitmarginreqS
        expect(instance).to.have.property('fullinitmarginreqS');
        // expect(instance.fullinitmarginreqS).to.be(expectedValueLiteral);
      });

      it('should have the property fullmaintmarginreq (base name: "fullmaintmarginreq")', function() {
        // TODO: update the code to test the property fullmaintmarginreq
        expect(instance).to.have.property('fullmaintmarginreq');
        // expect(instance.fullmaintmarginreq).to.be(expectedValueLiteral);
      });

      it('should have the property fullmaintmarginreqC (base name: "fullmaintmarginreq-c")', function() {
        // TODO: update the code to test the property fullmaintmarginreqC
        expect(instance).to.have.property('fullmaintmarginreqC');
        // expect(instance.fullmaintmarginreqC).to.be(expectedValueLiteral);
      });

      it('should have the property fullmaintmarginreqF (base name: "fullmaintmarginreq-f")', function() {
        // TODO: update the code to test the property fullmaintmarginreqF
        expect(instance).to.have.property('fullmaintmarginreqF');
        // expect(instance.fullmaintmarginreqF).to.be(expectedValueLiteral);
      });

      it('should have the property fullmaintmarginreqS (base name: "fullmaintmarginreq-s")', function() {
        // TODO: update the code to test the property fullmaintmarginreqS
        expect(instance).to.have.property('fullmaintmarginreqS');
        // expect(instance.fullmaintmarginreqS).to.be(expectedValueLiteral);
      });

      it('should have the property grosspositionvalue (base name: "grosspositionvalue")', function() {
        // TODO: update the code to test the property grosspositionvalue
        expect(instance).to.have.property('grosspositionvalue');
        // expect(instance.grosspositionvalue).to.be(expectedValueLiteral);
      });

      it('should have the property grosspositionvalueC (base name: "grosspositionvalue-c")', function() {
        // TODO: update the code to test the property grosspositionvalueC
        expect(instance).to.have.property('grosspositionvalueC');
        // expect(instance.grosspositionvalueC).to.be(expectedValueLiteral);
      });

      it('should have the property grosspositionvalueF (base name: "grosspositionvalue-f")', function() {
        // TODO: update the code to test the property grosspositionvalueF
        expect(instance).to.have.property('grosspositionvalueF');
        // expect(instance.grosspositionvalueF).to.be(expectedValueLiteral);
      });

      it('should have the property grosspositionvalueS (base name: "grosspositionvalue-s")', function() {
        // TODO: update the code to test the property grosspositionvalueS
        expect(instance).to.have.property('grosspositionvalueS');
        // expect(instance.grosspositionvalueS).to.be(expectedValueLiteral);
      });

      it('should have the property guarantee (base name: "guarantee")', function() {
        // TODO: update the code to test the property guarantee
        expect(instance).to.have.property('guarantee');
        // expect(instance.guarantee).to.be(expectedValueLiteral);
      });

      it('should have the property guaranteeC (base name: "guarantee-c")', function() {
        // TODO: update the code to test the property guaranteeC
        expect(instance).to.have.property('guaranteeC');
        // expect(instance.guaranteeC).to.be(expectedValueLiteral);
      });

      it('should have the property guaranteeF (base name: "guarantee-f")', function() {
        // TODO: update the code to test the property guaranteeF
        expect(instance).to.have.property('guaranteeF');
        // expect(instance.guaranteeF).to.be(expectedValueLiteral);
      });

      it('should have the property guaranteeS (base name: "guarantee-s")', function() {
        // TODO: update the code to test the property guaranteeS
        expect(instance).to.have.property('guaranteeS');
        // expect(instance.guaranteeS).to.be(expectedValueLiteral);
      });

      it('should have the property highestseverity (base name: "highestseverity")', function() {
        // TODO: update the code to test the property highestseverity
        expect(instance).to.have.property('highestseverity');
        // expect(instance.highestseverity).to.be(expectedValueLiteral);
      });

      it('should have the property highestseverityC (base name: "highestseverity-c")', function() {
        // TODO: update the code to test the property highestseverityC
        expect(instance).to.have.property('highestseverityC');
        // expect(instance.highestseverityC).to.be(expectedValueLiteral);
      });

      it('should have the property highestseverityF (base name: "highestseverity-f")', function() {
        // TODO: update the code to test the property highestseverityF
        expect(instance).to.have.property('highestseverityF');
        // expect(instance.highestseverityF).to.be(expectedValueLiteral);
      });

      it('should have the property highestseverityS (base name: "highestseverity-s")', function() {
        // TODO: update the code to test the property highestseverityS
        expect(instance).to.have.property('highestseverityS');
        // expect(instance.highestseverityS).to.be(expectedValueLiteral);
      });

      it('should have the property indianstockhaircut (base name: "indianstockhaircut")', function() {
        // TODO: update the code to test the property indianstockhaircut
        expect(instance).to.have.property('indianstockhaircut');
        // expect(instance.indianstockhaircut).to.be(expectedValueLiteral);
      });

      it('should have the property indianstockhaircutC (base name: "indianstockhaircut-c")', function() {
        // TODO: update the code to test the property indianstockhaircutC
        expect(instance).to.have.property('indianstockhaircutC');
        // expect(instance.indianstockhaircutC).to.be(expectedValueLiteral);
      });

      it('should have the property indianstockhaircutF (base name: "indianstockhaircut-f")', function() {
        // TODO: update the code to test the property indianstockhaircutF
        expect(instance).to.have.property('indianstockhaircutF');
        // expect(instance.indianstockhaircutF).to.be(expectedValueLiteral);
      });

      it('should have the property indianstockhaircutS (base name: "indianstockhaircut-s")', function() {
        // TODO: update the code to test the property indianstockhaircutS
        expect(instance).to.have.property('indianstockhaircutS');
        // expect(instance.indianstockhaircutS).to.be(expectedValueLiteral);
      });

      it('should have the property initmarginreq (base name: "initmarginreq")', function() {
        // TODO: update the code to test the property initmarginreq
        expect(instance).to.have.property('initmarginreq');
        // expect(instance.initmarginreq).to.be(expectedValueLiteral);
      });

      it('should have the property initmarginreqC (base name: "initmarginreq-c")', function() {
        // TODO: update the code to test the property initmarginreqC
        expect(instance).to.have.property('initmarginreqC');
        // expect(instance.initmarginreqC).to.be(expectedValueLiteral);
      });

      it('should have the property initmarginreqF (base name: "initmarginreq-f")', function() {
        // TODO: update the code to test the property initmarginreqF
        expect(instance).to.have.property('initmarginreqF');
        // expect(instance.initmarginreqF).to.be(expectedValueLiteral);
      });

      it('should have the property initmarginreqS (base name: "initmarginreq-s")', function() {
        // TODO: update the code to test the property initmarginreqS
        expect(instance).to.have.property('initmarginreqS');
        // expect(instance.initmarginreqS).to.be(expectedValueLiteral);
      });

      it('should have the property leverage (base name: "leverage")', function() {
        // TODO: update the code to test the property leverage
        expect(instance).to.have.property('leverage');
        // expect(instance.leverage).to.be(expectedValueLiteral);
      });

      it('should have the property leverageC (base name: "leverage-c")', function() {
        // TODO: update the code to test the property leverageC
        expect(instance).to.have.property('leverageC');
        // expect(instance.leverageC).to.be(expectedValueLiteral);
      });

      it('should have the property leverageF (base name: "leverage-f")', function() {
        // TODO: update the code to test the property leverageF
        expect(instance).to.have.property('leverageF');
        // expect(instance.leverageF).to.be(expectedValueLiteral);
      });

      it('should have the property leverageS (base name: "leverage-s")', function() {
        // TODO: update the code to test the property leverageS
        expect(instance).to.have.property('leverageS');
        // expect(instance.leverageS).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadavailablefunds (base name: "lookaheadavailablefunds")', function() {
        // TODO: update the code to test the property lookaheadavailablefunds
        expect(instance).to.have.property('lookaheadavailablefunds');
        // expect(instance.lookaheadavailablefunds).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadavailablefundsC (base name: "lookaheadavailablefunds-c")', function() {
        // TODO: update the code to test the property lookaheadavailablefundsC
        expect(instance).to.have.property('lookaheadavailablefundsC');
        // expect(instance.lookaheadavailablefundsC).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadavailablefundsF (base name: "lookaheadavailablefunds-f")', function() {
        // TODO: update the code to test the property lookaheadavailablefundsF
        expect(instance).to.have.property('lookaheadavailablefundsF');
        // expect(instance.lookaheadavailablefundsF).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadavailablefundsS (base name: "lookaheadavailablefunds-s")', function() {
        // TODO: update the code to test the property lookaheadavailablefundsS
        expect(instance).to.have.property('lookaheadavailablefundsS');
        // expect(instance.lookaheadavailablefundsS).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadexcessliquidity (base name: "lookaheadexcessliquidity")', function() {
        // TODO: update the code to test the property lookaheadexcessliquidity
        expect(instance).to.have.property('lookaheadexcessliquidity');
        // expect(instance.lookaheadexcessliquidity).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadexcessliquidityC (base name: "lookaheadexcessliquidity-c")', function() {
        // TODO: update the code to test the property lookaheadexcessliquidityC
        expect(instance).to.have.property('lookaheadexcessliquidityC');
        // expect(instance.lookaheadexcessliquidityC).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadexcessliquidityF (base name: "lookaheadexcessliquidity-f")', function() {
        // TODO: update the code to test the property lookaheadexcessliquidityF
        expect(instance).to.have.property('lookaheadexcessliquidityF');
        // expect(instance.lookaheadexcessliquidityF).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadexcessliquidityS (base name: "lookaheadexcessliquidity-s")', function() {
        // TODO: update the code to test the property lookaheadexcessliquidityS
        expect(instance).to.have.property('lookaheadexcessliquidityS');
        // expect(instance.lookaheadexcessliquidityS).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadinitmarginreq (base name: "lookaheadinitmarginreq")', function() {
        // TODO: update the code to test the property lookaheadinitmarginreq
        expect(instance).to.have.property('lookaheadinitmarginreq');
        // expect(instance.lookaheadinitmarginreq).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadinitmarginreqC (base name: "lookaheadinitmarginreq-c")', function() {
        // TODO: update the code to test the property lookaheadinitmarginreqC
        expect(instance).to.have.property('lookaheadinitmarginreqC');
        // expect(instance.lookaheadinitmarginreqC).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadinitmarginreqF (base name: "lookaheadinitmarginreq-f")', function() {
        // TODO: update the code to test the property lookaheadinitmarginreqF
        expect(instance).to.have.property('lookaheadinitmarginreqF');
        // expect(instance.lookaheadinitmarginreqF).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadinitmarginreqS (base name: "lookaheadinitmarginreq-s")', function() {
        // TODO: update the code to test the property lookaheadinitmarginreqS
        expect(instance).to.have.property('lookaheadinitmarginreqS');
        // expect(instance.lookaheadinitmarginreqS).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadmaintmarginreq (base name: "lookaheadmaintmarginreq")', function() {
        // TODO: update the code to test the property lookaheadmaintmarginreq
        expect(instance).to.have.property('lookaheadmaintmarginreq');
        // expect(instance.lookaheadmaintmarginreq).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadmaintmarginreqC (base name: "lookaheadmaintmarginreq-c")', function() {
        // TODO: update the code to test the property lookaheadmaintmarginreqC
        expect(instance).to.have.property('lookaheadmaintmarginreqC');
        // expect(instance.lookaheadmaintmarginreqC).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadmaintmarginreqF (base name: "lookaheadmaintmarginreq-f")', function() {
        // TODO: update the code to test the property lookaheadmaintmarginreqF
        expect(instance).to.have.property('lookaheadmaintmarginreqF');
        // expect(instance.lookaheadmaintmarginreqF).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadmaintmarginreqS (base name: "lookaheadmaintmarginreq-s")', function() {
        // TODO: update the code to test the property lookaheadmaintmarginreqS
        expect(instance).to.have.property('lookaheadmaintmarginreqS');
        // expect(instance.lookaheadmaintmarginreqS).to.be(expectedValueLiteral);
      });

      it('should have the property lookaheadnextchange (base name: "lookaheadnextchange")', function() {
        // TODO: update the code to test the property lookaheadnextchange
        expect(instance).to.have.property('lookaheadnextchange');
        // expect(instance.lookaheadnextchange).to.be(expectedValueLiteral);
      });

      it('should have the property maintmarginreq (base name: "maintmarginreq")', function() {
        // TODO: update the code to test the property maintmarginreq
        expect(instance).to.have.property('maintmarginreq');
        // expect(instance.maintmarginreq).to.be(expectedValueLiteral);
      });

      it('should have the property maintmarginreqC (base name: "maintmarginreq-c")', function() {
        // TODO: update the code to test the property maintmarginreqC
        expect(instance).to.have.property('maintmarginreqC');
        // expect(instance.maintmarginreqC).to.be(expectedValueLiteral);
      });

      it('should have the property maintmarginreqF (base name: "maintmarginreq-f")', function() {
        // TODO: update the code to test the property maintmarginreqF
        expect(instance).to.have.property('maintmarginreqF');
        // expect(instance.maintmarginreqF).to.be(expectedValueLiteral);
      });

      it('should have the property maintmarginreqS (base name: "maintmarginreq-s")', function() {
        // TODO: update the code to test the property maintmarginreqS
        expect(instance).to.have.property('maintmarginreqS');
        // expect(instance.maintmarginreqS).to.be(expectedValueLiteral);
      });

      it('should have the property netliquidation (base name: "netliquidation")', function() {
        // TODO: update the code to test the property netliquidation
        expect(instance).to.have.property('netliquidation');
        // expect(instance.netliquidation).to.be(expectedValueLiteral);
      });

      it('should have the property netliquidationC (base name: "netliquidation-c")', function() {
        // TODO: update the code to test the property netliquidationC
        expect(instance).to.have.property('netliquidationC');
        // expect(instance.netliquidationC).to.be(expectedValueLiteral);
      });

      it('should have the property netliquidationF (base name: "netliquidation-f")', function() {
        // TODO: update the code to test the property netliquidationF
        expect(instance).to.have.property('netliquidationF');
        // expect(instance.netliquidationF).to.be(expectedValueLiteral);
      });

      it('should have the property netliquidationS (base name: "netliquidation-s")', function() {
        // TODO: update the code to test the property netliquidationS
        expect(instance).to.have.property('netliquidationS');
        // expect(instance.netliquidationS).to.be(expectedValueLiteral);
      });

      it('should have the property netliquidationuncertainty (base name: "netliquidationuncertainty")', function() {
        // TODO: update the code to test the property netliquidationuncertainty
        expect(instance).to.have.property('netliquidationuncertainty');
        // expect(instance.netliquidationuncertainty).to.be(expectedValueLiteral);
      });

      it('should have the property nlvandmargininreview (base name: "nlvandmargininreview")', function() {
        // TODO: update the code to test the property nlvandmargininreview
        expect(instance).to.have.property('nlvandmargininreview');
        // expect(instance.nlvandmargininreview).to.be(expectedValueLiteral);
      });

      it('should have the property pasharesvalue (base name: "pasharesvalue")', function() {
        // TODO: update the code to test the property pasharesvalue
        expect(instance).to.have.property('pasharesvalue');
        // expect(instance.pasharesvalue).to.be(expectedValueLiteral);
      });

      it('should have the property pasharesvalueC (base name: "pasharesvalue-c")', function() {
        // TODO: update the code to test the property pasharesvalueC
        expect(instance).to.have.property('pasharesvalueC');
        // expect(instance.pasharesvalueC).to.be(expectedValueLiteral);
      });

      it('should have the property pasharesvalueF (base name: "pasharesvalue-f")', function() {
        // TODO: update the code to test the property pasharesvalueF
        expect(instance).to.have.property('pasharesvalueF');
        // expect(instance.pasharesvalueF).to.be(expectedValueLiteral);
      });

      it('should have the property pasharesvalueS (base name: "pasharesvalue-s")', function() {
        // TODO: update the code to test the property pasharesvalueS
        expect(instance).to.have.property('pasharesvalueS');
        // expect(instance.pasharesvalueS).to.be(expectedValueLiteral);
      });

      it('should have the property postexpirationexcess (base name: "postexpirationexcess")', function() {
        // TODO: update the code to test the property postexpirationexcess
        expect(instance).to.have.property('postexpirationexcess');
        // expect(instance.postexpirationexcess).to.be(expectedValueLiteral);
      });

      it('should have the property postexpirationexcessC (base name: "postexpirationexcess-c")', function() {
        // TODO: update the code to test the property postexpirationexcessC
        expect(instance).to.have.property('postexpirationexcessC');
        // expect(instance.postexpirationexcessC).to.be(expectedValueLiteral);
      });

      it('should have the property postexpirationexcessF (base name: "postexpirationexcess-f")', function() {
        // TODO: update the code to test the property postexpirationexcessF
        expect(instance).to.have.property('postexpirationexcessF');
        // expect(instance.postexpirationexcessF).to.be(expectedValueLiteral);
      });

      it('should have the property postexpirationexcessS (base name: "postexpirationexcess-s")', function() {
        // TODO: update the code to test the property postexpirationexcessS
        expect(instance).to.have.property('postexpirationexcessS');
        // expect(instance.postexpirationexcessS).to.be(expectedValueLiteral);
      });

      it('should have the property postexpirationmargin (base name: "postexpirationmargin")', function() {
        // TODO: update the code to test the property postexpirationmargin
        expect(instance).to.have.property('postexpirationmargin');
        // expect(instance.postexpirationmargin).to.be(expectedValueLiteral);
      });

      it('should have the property postexpirationmarginC (base name: "postexpirationmargin-c")', function() {
        // TODO: update the code to test the property postexpirationmarginC
        expect(instance).to.have.property('postexpirationmarginC');
        // expect(instance.postexpirationmarginC).to.be(expectedValueLiteral);
      });

      it('should have the property postexpirationmarginF (base name: "postexpirationmargin-f")', function() {
        // TODO: update the code to test the property postexpirationmarginF
        expect(instance).to.have.property('postexpirationmarginF');
        // expect(instance.postexpirationmarginF).to.be(expectedValueLiteral);
      });

      it('should have the property postexpirationmarginS (base name: "postexpirationmargin-s")', function() {
        // TODO: update the code to test the property postexpirationmarginS
        expect(instance).to.have.property('postexpirationmarginS');
        // expect(instance.postexpirationmarginS).to.be(expectedValueLiteral);
      });

      it('should have the property previousdayequitywithloanvalue (base name: "previousdayequitywithloanvalue")', function() {
        // TODO: update the code to test the property previousdayequitywithloanvalue
        expect(instance).to.have.property('previousdayequitywithloanvalue');
        // expect(instance.previousdayequitywithloanvalue).to.be(expectedValueLiteral);
      });

      it('should have the property previousdayequitywithloanvalueC (base name: "previousdayequitywithloanvalue-c")', function() {
        // TODO: update the code to test the property previousdayequitywithloanvalueC
        expect(instance).to.have.property('previousdayequitywithloanvalueC');
        // expect(instance.previousdayequitywithloanvalueC).to.be(expectedValueLiteral);
      });

      it('should have the property previousdayequitywithloanvalueF (base name: "previousdayequitywithloanvalue-f")', function() {
        // TODO: update the code to test the property previousdayequitywithloanvalueF
        expect(instance).to.have.property('previousdayequitywithloanvalueF');
        // expect(instance.previousdayequitywithloanvalueF).to.be(expectedValueLiteral);
      });

      it('should have the property previousdayequitywithloanvalueS (base name: "previousdayequitywithloanvalue-s")', function() {
        // TODO: update the code to test the property previousdayequitywithloanvalueS
        expect(instance).to.have.property('previousdayequitywithloanvalueS');
        // expect(instance.previousdayequitywithloanvalueS).to.be(expectedValueLiteral);
      });

      it('should have the property segmenttitleC (base name: "segmenttitle-c")', function() {
        // TODO: update the code to test the property segmenttitleC
        expect(instance).to.have.property('segmenttitleC');
        // expect(instance.segmenttitleC).to.be(expectedValueLiteral);
      });

      it('should have the property segmenttitleF (base name: "segmenttitle-f")', function() {
        // TODO: update the code to test the property segmenttitleF
        expect(instance).to.have.property('segmenttitleF');
        // expect(instance.segmenttitleF).to.be(expectedValueLiteral);
      });

      it('should have the property segmenttitleS (base name: "segmenttitle-s")', function() {
        // TODO: update the code to test the property segmenttitleS
        expect(instance).to.have.property('segmenttitleS');
        // expect(instance.segmenttitleS).to.be(expectedValueLiteral);
      });

      it('should have the property totalcashvalue (base name: "totalcashvalue")', function() {
        // TODO: update the code to test the property totalcashvalue
        expect(instance).to.have.property('totalcashvalue');
        // expect(instance.totalcashvalue).to.be(expectedValueLiteral);
      });

      it('should have the property totalcashvalueC (base name: "totalcashvalue-c")', function() {
        // TODO: update the code to test the property totalcashvalueC
        expect(instance).to.have.property('totalcashvalueC');
        // expect(instance.totalcashvalueC).to.be(expectedValueLiteral);
      });

      it('should have the property totalcashvalueF (base name: "totalcashvalue-f")', function() {
        // TODO: update the code to test the property totalcashvalueF
        expect(instance).to.have.property('totalcashvalueF');
        // expect(instance.totalcashvalueF).to.be(expectedValueLiteral);
      });

      it('should have the property totalcashvalueS (base name: "totalcashvalue-s")', function() {
        // TODO: update the code to test the property totalcashvalueS
        expect(instance).to.have.property('totalcashvalueS');
        // expect(instance.totalcashvalueS).to.be(expectedValueLiteral);
      });

      it('should have the property totaldebitcardpendingcharges (base name: "totaldebitcardpendingcharges")', function() {
        // TODO: update the code to test the property totaldebitcardpendingcharges
        expect(instance).to.have.property('totaldebitcardpendingcharges');
        // expect(instance.totaldebitcardpendingcharges).to.be(expectedValueLiteral);
      });

      it('should have the property totaldebitcardpendingchargesC (base name: "totaldebitcardpendingcharges-c")', function() {
        // TODO: update the code to test the property totaldebitcardpendingchargesC
        expect(instance).to.have.property('totaldebitcardpendingchargesC');
        // expect(instance.totaldebitcardpendingchargesC).to.be(expectedValueLiteral);
      });

      it('should have the property totaldebitcardpendingchargesF (base name: "totaldebitcardpendingcharges-f")', function() {
        // TODO: update the code to test the property totaldebitcardpendingchargesF
        expect(instance).to.have.property('totaldebitcardpendingchargesF');
        // expect(instance.totaldebitcardpendingchargesF).to.be(expectedValueLiteral);
      });

      it('should have the property totaldebitcardpendingchargesS (base name: "totaldebitcardpendingcharges-s")', function() {
        // TODO: update the code to test the property totaldebitcardpendingchargesS
        expect(instance).to.have.property('totaldebitcardpendingchargesS');
        // expect(instance.totaldebitcardpendingchargesS).to.be(expectedValueLiteral);
      });

      it('should have the property tradingtypeF (base name: "tradingtype-f")', function() {
        // TODO: update the code to test the property tradingtypeF
        expect(instance).to.have.property('tradingtypeF');
        // expect(instance.tradingtypeF).to.be(expectedValueLiteral);
      });

      it('should have the property tradingtypeS (base name: "tradingtype-s")', function() {
        // TODO: update the code to test the property tradingtypeS
        expect(instance).to.have.property('tradingtypeS');
        // expect(instance.tradingtypeS).to.be(expectedValueLiteral);
      });

    });
  });

}));
