/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CalendarRequestFilters', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.CalendarRequestFilters();
      });

      it('should create an instance of CalendarRequestFilters', function() {
        // TODO: update the code to test CalendarRequestFilters
        expect(instance).to.be.a(ClientPortalWebApi.CalendarRequestFilters);
      });

      it('should have the property recentlyHeld (base name: "recently_held")', function() {
        // TODO: update the code to test the property recentlyHeld
        expect(instance).to.have.property('recentlyHeld');
        // expect(instance.recentlyHeld).to.be(expectedValueLiteral);
      });

      it('should have the property corporateEarnings (base name: "corporate_earnings")', function() {
        // TODO: update the code to test the property corporateEarnings
        expect(instance).to.have.property('corporateEarnings');
        // expect(instance.corporateEarnings).to.be(expectedValueLiteral);
      });

      it('should have the property divExDates (base name: "DivExDates")', function() {
        // TODO: update the code to test the property divExDates
        expect(instance).to.have.property('divExDates');
        // expect(instance.divExDates).to.be(expectedValueLiteral);
      });

      it('should have the property ipo (base name: "ipo")', function() {
        // TODO: update the code to test the property ipo
        expect(instance).to.have.property('ipo');
        // expect(instance.ipo).to.be(expectedValueLiteral);
      });

      it('should have the property splits (base name: "splits")', function() {
        // TODO: update the code to test the property splits
        expect(instance).to.have.property('splits');
        // expect(instance.splits).to.be(expectedValueLiteral);
      });

      it('should have the property corporateEvents (base name: "corporate_events")', function() {
        // TODO: update the code to test the property corporateEvents
        expect(instance).to.have.property('corporateEvents');
        // expect(instance.corporateEvents).to.be(expectedValueLiteral);
      });

      it('should have the property economicEvents (base name: "economic_events")', function() {
        // TODO: update the code to test the property economicEvents
        expect(instance).to.have.property('economicEvents');
        // expect(instance.economicEvents).to.be(expectedValueLiteral);
      });

      it('should have the property optionShowMonthly (base name: "option_show_monthly")', function() {
        // TODO: update the code to test the property optionShowMonthly
        expect(instance).to.have.property('optionShowMonthly');
        // expect(instance.optionShowMonthly).to.be(expectedValueLiteral);
      });

      it('should have the property optionShowWeekly (base name: "option_show_weekly")', function() {
        // TODO: update the code to test the property optionShowWeekly
        expect(instance).to.have.property('optionShowWeekly');
        // expect(instance.optionShowWeekly).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property limit (base name: "limit")', function() {
        // TODO: update the code to test the property limit
        expect(instance).to.have.property('limit');
        // expect(instance.limit).to.be(expectedValueLiteral);
      });

      it('should have the property limitRegion (base name: "limit_region")', function() {
        // TODO: update the code to test the property limitRegion
        expect(instance).to.have.property('limitRegion');
        // expect(instance.limitRegion).to.be(expectedValueLiteral);
      });

    });
  });

}));
