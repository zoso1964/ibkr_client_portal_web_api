/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PositionInner', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.PositionInner();
      });

      it('should create an instance of PositionInner', function() {
        // TODO: update the code to test PositionInner
        expect(instance).to.be.a(ClientPortalWebApi.PositionInner);
      });

      it('should have the property acctId (base name: "acctId")', function() {
        // TODO: update the code to test the property acctId
        expect(instance).to.have.property('acctId');
        // expect(instance.acctId).to.be(expectedValueLiteral);
      });

      it('should have the property conid (base name: "conid")', function() {
        // TODO: update the code to test the property conid
        expect(instance).to.have.property('conid');
        // expect(instance.conid).to.be(expectedValueLiteral);
      });

      it('should have the property contractDesc (base name: "contractDesc")', function() {
        // TODO: update the code to test the property contractDesc
        expect(instance).to.have.property('contractDesc');
        // expect(instance.contractDesc).to.be(expectedValueLiteral);
      });

      it('should have the property assetClass (base name: "assetClass")', function() {
        // TODO: update the code to test the property assetClass
        expect(instance).to.have.property('assetClass');
        // expect(instance.assetClass).to.be(expectedValueLiteral);
      });

      it('should have the property position (base name: "position")', function() {
        // TODO: update the code to test the property position
        expect(instance).to.have.property('position');
        // expect(instance.position).to.be(expectedValueLiteral);
      });

      it('should have the property mktPrice (base name: "mktPrice")', function() {
        // TODO: update the code to test the property mktPrice
        expect(instance).to.have.property('mktPrice');
        // expect(instance.mktPrice).to.be(expectedValueLiteral);
      });

      it('should have the property mktValue (base name: "mktValue")', function() {
        // TODO: update the code to test the property mktValue
        expect(instance).to.have.property('mktValue');
        // expect(instance.mktValue).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property avgCost (base name: "avgCost")', function() {
        // TODO: update the code to test the property avgCost
        expect(instance).to.have.property('avgCost');
        // expect(instance.avgCost).to.be(expectedValueLiteral);
      });

      it('should have the property avgPrice (base name: "avgPrice")', function() {
        // TODO: update the code to test the property avgPrice
        expect(instance).to.have.property('avgPrice');
        // expect(instance.avgPrice).to.be(expectedValueLiteral);
      });

      it('should have the property realizedPnl (base name: "realizedPnl")', function() {
        // TODO: update the code to test the property realizedPnl
        expect(instance).to.have.property('realizedPnl');
        // expect(instance.realizedPnl).to.be(expectedValueLiteral);
      });

      it('should have the property unrealizedPnl (base name: "unrealizedPnl")', function() {
        // TODO: update the code to test the property unrealizedPnl
        expect(instance).to.have.property('unrealizedPnl');
        // expect(instance.unrealizedPnl).to.be(expectedValueLiteral);
      });

      it('should have the property exchs (base name: "exchs")', function() {
        // TODO: update the code to test the property exchs
        expect(instance).to.have.property('exchs');
        // expect(instance.exchs).to.be(expectedValueLiteral);
      });

      it('should have the property expiry (base name: "expiry")', function() {
        // TODO: update the code to test the property expiry
        expect(instance).to.have.property('expiry');
        // expect(instance.expiry).to.be(expectedValueLiteral);
      });

      it('should have the property putOrCall (base name: "putOrCall")', function() {
        // TODO: update the code to test the property putOrCall
        expect(instance).to.have.property('putOrCall');
        // expect(instance.putOrCall).to.be(expectedValueLiteral);
      });

      it('should have the property multiplier (base name: "multiplier")', function() {
        // TODO: update the code to test the property multiplier
        expect(instance).to.have.property('multiplier');
        // expect(instance.multiplier).to.be(expectedValueLiteral);
      });

      it('should have the property strike (base name: "strike")', function() {
        // TODO: update the code to test the property strike
        expect(instance).to.have.property('strike');
        // expect(instance.strike).to.be(expectedValueLiteral);
      });

      it('should have the property exerciseStyle (base name: "exerciseStyle")', function() {
        // TODO: update the code to test the property exerciseStyle
        expect(instance).to.have.property('exerciseStyle');
        // expect(instance.exerciseStyle).to.be(expectedValueLiteral);
      });

      it('should have the property undConid (base name: "undConid")', function() {
        // TODO: update the code to test the property undConid
        expect(instance).to.have.property('undConid');
        // expect(instance.undConid).to.be(expectedValueLiteral);
      });

      it('should have the property conExchMap (base name: "conExchMap")', function() {
        // TODO: update the code to test the property conExchMap
        expect(instance).to.have.property('conExchMap');
        // expect(instance.conExchMap).to.be(expectedValueLiteral);
      });

      it('should have the property baseMktValue (base name: "baseMktValue")', function() {
        // TODO: update the code to test the property baseMktValue
        expect(instance).to.have.property('baseMktValue');
        // expect(instance.baseMktValue).to.be(expectedValueLiteral);
      });

      it('should have the property baseMktPrice (base name: "baseMktPrice")', function() {
        // TODO: update the code to test the property baseMktPrice
        expect(instance).to.have.property('baseMktPrice');
        // expect(instance.baseMktPrice).to.be(expectedValueLiteral);
      });

      it('should have the property baseAvgCost (base name: "baseAvgCost")', function() {
        // TODO: update the code to test the property baseAvgCost
        expect(instance).to.have.property('baseAvgCost');
        // expect(instance.baseAvgCost).to.be(expectedValueLiteral);
      });

      it('should have the property baseAvgPrice (base name: "baseAvgPrice")', function() {
        // TODO: update the code to test the property baseAvgPrice
        expect(instance).to.have.property('baseAvgPrice');
        // expect(instance.baseAvgPrice).to.be(expectedValueLiteral);
      });

      it('should have the property baseRealizedPnl (base name: "baseRealizedPnl")', function() {
        // TODO: update the code to test the property baseRealizedPnl
        expect(instance).to.have.property('baseRealizedPnl');
        // expect(instance.baseRealizedPnl).to.be(expectedValueLiteral);
      });

      it('should have the property baseUnrealizedPnl (base name: "baseUnrealizedPnl")', function() {
        // TODO: update the code to test the property baseUnrealizedPnl
        expect(instance).to.have.property('baseUnrealizedPnl');
        // expect(instance.baseUnrealizedPnl).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property lastTradingDay (base name: "lastTradingDay")', function() {
        // TODO: update the code to test the property lastTradingDay
        expect(instance).to.have.property('lastTradingDay');
        // expect(instance.lastTradingDay).to.be(expectedValueLiteral);
      });

      it('should have the property group (base name: "group")', function() {
        // TODO: update the code to test the property group
        expect(instance).to.have.property('group');
        // expect(instance.group).to.be(expectedValueLiteral);
      });

      it('should have the property sector (base name: "sector")', function() {
        // TODO: update the code to test the property sector
        expect(instance).to.have.property('sector');
        // expect(instance.sector).to.be(expectedValueLiteral);
      });

      it('should have the property sectorGroup (base name: "sectorGroup")', function() {
        // TODO: update the code to test the property sectorGroup
        expect(instance).to.have.property('sectorGroup');
        // expect(instance.sectorGroup).to.be(expectedValueLiteral);
      });

      it('should have the property ticker (base name: "ticker")', function() {
        // TODO: update the code to test the property ticker
        expect(instance).to.have.property('ticker');
        // expect(instance.ticker).to.be(expectedValueLiteral);
      });

      it('should have the property undComp (base name: "undComp")', function() {
        // TODO: update the code to test the property undComp
        expect(instance).to.have.property('undComp');
        // expect(instance.undComp).to.be(expectedValueLiteral);
      });

      it('should have the property undSym (base name: "undSym")', function() {
        // TODO: update the code to test the property undSym
        expect(instance).to.have.property('undSym');
        // expect(instance.undSym).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "fullName")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

      it('should have the property pageSize (base name: "pageSize")', function() {
        // TODO: update the code to test the property pageSize
        expect(instance).to.have.property('pageSize');
        // expect(instance.pageSize).to.be(expectedValueLiteral);
      });

      it('should have the property model (base name: "model")', function() {
        // TODO: update the code to test the property model
        expect(instance).to.have.property('model');
        // expect(instance.model).to.be(expectedValueLiteral);
      });

    });
  });

}));
