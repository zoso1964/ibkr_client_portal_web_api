/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoryData', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.HistoryData();
      });

      it('should create an instance of HistoryData', function() {
        // TODO: update the code to test HistoryData
        expect(instance).to.be.a(ClientPortalWebApi.HistoryData);
      });

      it('should have the property start (base name: "start")', function() {
        // TODO: update the code to test the property start
        expect(instance).to.have.property('start');
        // expect(instance.start).to.be(expectedValueLiteral);
      });

      it('should have the property mdAvailability (base name: "mdAvailability")', function() {
        // TODO: update the code to test the property mdAvailability
        expect(instance).to.have.property('mdAvailability');
        // expect(instance.mdAvailability).to.be(expectedValueLiteral);
      });

      it('should have the property barLength (base name: "barLength")', function() {
        // TODO: update the code to test the property barLength
        expect(instance).to.have.property('barLength');
        // expect(instance.barLength).to.be(expectedValueLiteral);
      });

      it('should have the property delay (base name: "delay")', function() {
        // TODO: update the code to test the property delay
        expect(instance).to.have.property('delay');
        // expect(instance.delay).to.be(expectedValueLiteral);
      });

      it('should have the property high (base name: "high")', function() {
        // TODO: update the code to test the property high
        expect(instance).to.have.property('high');
        // expect(instance.high).to.be(expectedValueLiteral);
      });

      it('should have the property low (base name: "low")', function() {
        // TODO: update the code to test the property low
        expect(instance).to.have.property('low');
        // expect(instance.low).to.be(expectedValueLiteral);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property tickNum (base name: "tickNum")', function() {
        // TODO: update the code to test the property tickNum
        expect(instance).to.have.property('tickNum');
        // expect(instance.tickNum).to.be(expectedValueLiteral);
      });

      it('should have the property timePeriod (base name: "timePeriod")', function() {
        // TODO: update the code to test the property timePeriod
        expect(instance).to.have.property('timePeriod');
        // expect(instance.timePeriod).to.be(expectedValueLiteral);
      });

      it('should have the property data (base name: "data")', function() {
        // TODO: update the code to test the property data
        expect(instance).to.have.property('data');
        // expect(instance.data).to.be(expectedValueLiteral);
      });

      it('should have the property points (base name: "points")', function() {
        // TODO: update the code to test the property points
        expect(instance).to.have.property('points');
        // expect(instance.points).to.be(expectedValueLiteral);
      });

      it('should have the property travelTime (base name: "travelTime")', function() {
        // TODO: update the code to test the property travelTime
        expect(instance).to.have.property('travelTime');
        // expect(instance.travelTime).to.be(expectedValueLiteral);
      });

    });
  });

}));
