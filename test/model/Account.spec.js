/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Account', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.Account();
      });

      it('should create an instance of Account', function() {
        // TODO: update the code to test Account
        expect(instance).to.be.a(ClientPortalWebApi.Account);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property accountVan (base name: "accountVan")', function() {
        // TODO: update the code to test the property accountVan
        expect(instance).to.have.property('accountVan');
        // expect(instance.accountVan).to.be(expectedValueLiteral);
      });

      it('should have the property accountTitle (base name: "accountTitle")', function() {
        // TODO: update the code to test the property accountTitle
        expect(instance).to.have.property('accountTitle');
        // expect(instance.accountTitle).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property accountAlias (base name: "accountAlias")', function() {
        // TODO: update the code to test the property accountAlias
        expect(instance).to.have.property('accountAlias');
        // expect(instance.accountAlias).to.be(expectedValueLiteral);
      });

      it('should have the property accountStatus (base name: "accountStatus")', function() {
        // TODO: update the code to test the property accountStatus
        expect(instance).to.have.property('accountStatus');
        // expect(instance.accountStatus).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property tradingType (base name: "tradingType")', function() {
        // TODO: update the code to test the property tradingType
        expect(instance).to.have.property('tradingType');
        // expect(instance.tradingType).to.be(expectedValueLiteral);
      });

      it('should have the property faclient (base name: "faclient")', function() {
        // TODO: update the code to test the property faclient
        expect(instance).to.have.property('faclient');
        // expect(instance.faclient).to.be(expectedValueLiteral);
      });

      it('should have the property parent (base name: "parent")', function() {
        // TODO: update the code to test the property parent
        expect(instance).to.have.property('parent');
        // expect(instance.parent).to.be(expectedValueLiteral);
      });

      it('should have the property desc (base name: "desc")', function() {
        // TODO: update the code to test the property desc
        expect(instance).to.have.property('desc');
        // expect(instance.desc).to.be(expectedValueLiteral);
      });

      it('should have the property covestor (base name: "covestor")', function() {
        // TODO: update the code to test the property covestor
        expect(instance).to.have.property('covestor');
        // expect(instance.covestor).to.be(expectedValueLiteral);
      });

      it('should have the property master (base name: "master")', function() {
        // TODO: update the code to test the property master
        expect(instance).to.have.property('master');
        // expect(instance.master).to.be(expectedValueLiteral);
      });

    });
  });

}));
