/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClientPortalWebApi);
  }
}(this, function(expect, ClientPortalWebApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('EventsInner', function() {
      beforeEach(function() {
        instance = new ClientPortalWebApi.EventsInner();
      });

      it('should create an instance of EventsInner', function() {
        // TODO: update the code to test EventsInner
        expect(instance).to.be.a(ClientPortalWebApi.EventsInner);
      });

      it('should have the property indexDateType (base name: "index_date_type")', function() {
        // TODO: update the code to test the property indexDateType
        expect(instance).to.have.property('indexDateType');
        // expect(instance.indexDateType).to.be(expectedValueLiteral);
      });

      it('should have the property eventType (base name: "event_type")', function() {
        // TODO: update the code to test the property eventType
        expect(instance).to.have.property('eventType');
        // expect(instance.eventType).to.be(expectedValueLiteral);
      });

      it('should have the property data (base name: "data")', function() {
        // TODO: update the code to test the property data
        expect(instance).to.have.property('data');
        // expect(instance.data).to.be(expectedValueLiteral);
      });

      it('should have the property conids (base name: "conids")', function() {
        // TODO: update the code to test the property conids
        expect(instance).to.have.property('conids');
        // expect(instance.conids).to.be(expectedValueLiteral);
      });

      it('should have the property indexDate (base name: "index_date")', function() {
        // TODO: update the code to test the property indexDate
        expect(instance).to.have.property('indexDate');
        // expect(instance.indexDate).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property eventKey (base name: "event_key")', function() {
        // TODO: update the code to test the property eventKey
        expect(instance).to.have.property('eventKey');
        // expect(instance.eventKey).to.be(expectedValueLiteral);
      });

      it('should have the property tooltips (base name: "tooltips")', function() {
        // TODO: update the code to test the property tooltips
        expect(instance).to.have.property('tooltips');
        // expect(instance.tooltips).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

    });
  });

}));
