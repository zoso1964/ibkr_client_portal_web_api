/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ClientPortalWebApi) {
      root.ClientPortalWebApi = {};
    }
    root.ClientPortalWebApi.OrderRequest = factory(root.ClientPortalWebApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The OrderRequest model module.
   * @module model/OrderRequest
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>OrderRequest</code>.
   * @alias module:model/OrderRequest
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>OrderRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OrderRequest} obj Optional instance to populate.
   * @return {module:model/OrderRequest} The populated <code>OrderRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('acctId'))
        obj.acctId = ApiClient.convertToType(data['acctId'], 'String');
      if (data.hasOwnProperty('conid'))
        obj.conid = ApiClient.convertToType(data['conid'], 'Number');
      if (data.hasOwnProperty('secType'))
        obj.secType = ApiClient.convertToType(data['secType'], 'String');
      if (data.hasOwnProperty('cOID'))
        obj.cOID = ApiClient.convertToType(data['cOID'], 'String');
      if (data.hasOwnProperty('parentId'))
        obj.parentId = ApiClient.convertToType(data['parentId'], 'String');
      if (data.hasOwnProperty('orderType'))
        obj.orderType = ApiClient.convertToType(data['orderType'], 'String');
      if (data.hasOwnProperty('listingExchange'))
        obj.listingExchange = ApiClient.convertToType(data['listingExchange'], 'String');
      if (data.hasOwnProperty('outsideRTH'))
        obj.outsideRTH = ApiClient.convertToType(data['outsideRTH'], 'Boolean');
      if (data.hasOwnProperty('price'))
        obj.price = ApiClient.convertToType(data['price'], 'Number');
      if (data.hasOwnProperty('side'))
        obj.side = ApiClient.convertToType(data['side'], 'String');
      if (data.hasOwnProperty('ticker'))
        obj.ticker = ApiClient.convertToType(data['ticker'], 'String');
      if (data.hasOwnProperty('tif'))
        obj.tif = ApiClient.convertToType(data['tif'], 'String');
      if (data.hasOwnProperty('referrer'))
        obj.referrer = ApiClient.convertToType(data['referrer'], 'String');
      if (data.hasOwnProperty('quantity'))
        obj.quantity = ApiClient.convertToType(data['quantity'], 'Number');
      if (data.hasOwnProperty('useAdaptive'))
        obj.useAdaptive = ApiClient.convertToType(data['useAdaptive'], 'Boolean');
    }
    return obj;
  }

  /**
   * acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected. 
   * @member {String} acctId
   */
  exports.prototype.acctId = undefined;

  /**
   * conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search. 
   * @member {Number} conid
   */
  exports.prototype.conid = undefined;

  /**
   * conid:type for example 265598:STK
   * @member {String} secType
   */
  exports.prototype.secType = undefined;

  /**
   * Customer Order ID. An arbitraty string that can be used to identify the order, e.g \"my-fb-order\". The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order. 
   * @member {String} cOID
   */
  exports.prototype.cOID = undefined;

  /**
   * When placing bracket orders, the child parentId must be equal to the cOId (customer order id) of the parent. 
   * @member {String} parentId
   */
  exports.prototype.parentId = undefined;

  /**
   * orderType can be one of MKT (Market), LMT (Limit), STP (Stop) or STP_LIMIT (stop limit) 
   * @member {String} orderType
   */
  exports.prototype.orderType = undefined;

  /**
   * listingExchange is optional. By default we use \"SMART\" routing. Possible values are available via this end point: /v1/portal/iserver/contract/{{conid}}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX 
   * @member {String} listingExchange
   */
  exports.prototype.listingExchange = undefined;

  /**
   * set to true if the order can be executed outside regular trading hours. 
   * @member {Boolean} outsideRTH
   */
  exports.prototype.outsideRTH = undefined;

  /**
   * optional if order is MKT, for LMT, this is the limit price. For STP this is the stop price. 
   * @member {Number} price
   */
  exports.prototype.price = undefined;

  /**
   * SELL or BUY
   * @member {String} side
   */
  exports.prototype.side = undefined;

  /**
   * 
   * @member {String} ticker
   */
  exports.prototype.ticker = undefined;

  /**
   * GTC (Good Till Cancel) or DAY. DAY orders are automatically cancelled at the end of the Day or Trading hours. 
   * @member {String} tif
   */
  exports.prototype.tif = undefined;

  /**
   * for example QuickTrade
   * @member {String} referrer
   */
  exports.prototype.referrer = undefined;

  /**
   * usually integer, for some special cases can be float numbers
   * @member {Number} quantity
   */
  exports.prototype.quantity = undefined;

  /**
   * If true, the system will use the Adaptive Algo to submit the order https://www.interactivebrokers.com/en/index.php?f=19091 
   * @member {Boolean} useAdaptive
   */
  exports.prototype.useAdaptive = undefined;

  return exports;

}));
