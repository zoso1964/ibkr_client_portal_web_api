/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HistoryData', 'model/InlineResponse2007', 'model/InlineResponse4001'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/HistoryData'), require('../model/InlineResponse2007'), require('../model/InlineResponse4001'));
  } else {
    // Browser globals (root is window)
    if (!root.ClientPortalWebApi) {
      root.ClientPortalWebApi = {};
    }
    root.ClientPortalWebApi.MarketDataApi = factory(root.ClientPortalWebApi.ApiClient, root.ClientPortalWebApi.HistoryData, root.ClientPortalWebApi.InlineResponse2007, root.ClientPortalWebApi.InlineResponse4001);
  }
}(this, function(ApiClient, HistoryData, InlineResponse2007, InlineResponse4001) {
  'use strict';

  /**
   * MarketData service.
   * @module api/MarketDataApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MarketDataApi. 
   * @alias module:api/MarketDataApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the iserverMarketdataHistoryGet operation.
     * @callback module:api/MarketDataApi~iserverMarketdataHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Market Data History
     * Get history of market Data for the given conid, length of data is controlled by period and bar. e.g. 1y period with bar =1w returns 52 data points
     * @param {String} conid contract id
     * @param {String} period time period-- 1d,1w,1m,1y
     * @param {Object} opts Optional parameters
     * @param {String} opts.bar possible value-- 5min,1h,1w
     * @param {module:api/MarketDataApi~iserverMarketdataHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryData}
     */
    this.iserverMarketdataHistoryGet = function(conid, period, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'conid' is set
      if (conid === undefined || conid === null) {
        throw new Error("Missing the required parameter 'conid' when calling iserverMarketdataHistoryGet");
      }

      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling iserverMarketdataHistoryGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'conid': conid,
        'period': period,
        'bar': opts['bar'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HistoryData;

      return this.apiClient.callApi(
        '/iserver/marketdata/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iserverMarketdataSnapshotGet operation.
     * @callback module:api/MarketDataApi~iserverMarketdataSnapshotGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2007>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Market Data
     * Get Market Data for the given conid(s). The end-point will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts should be called prior to /iserver/marketdata/snapshot. To receive all available fields the /snapshot endpoint will need to be called several times. 
     * @param {String} conids list of conids separated by comma
     * @param {Object} opts Optional parameters
     * @param {Number} opts.since time period since which updates are required. uses epoch time with milliseconds.
     * @param {String} opts.fields list of fields separated by comma
     * @param {module:api/MarketDataApi~iserverMarketdataSnapshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2007>}
     */
    this.iserverMarketdataSnapshotGet = function(conids, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'conids' is set
      if (conids === undefined || conids === null) {
        throw new Error("Missing the required parameter 'conids' when calling iserverMarketdataSnapshotGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'conids': conids,
        'since': opts['since'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2007];

      return this.apiClient.callApi(
        '/iserver/marketdata/snapshot', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
