/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body5', 'model/Contract', 'model/InlineResponse20016', 'model/InlineResponse2008', 'model/InlineResponse500', 'model/Secdef', 'model/Symbol'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body5'), require('../model/Contract'), require('../model/InlineResponse20016'), require('../model/InlineResponse2008'), require('../model/InlineResponse500'), require('../model/Secdef'), require('../model/Symbol'));
  } else {
    // Browser globals (root is window)
    if (!root.ClientPortalWebApi) {
      root.ClientPortalWebApi = {};
    }
    root.ClientPortalWebApi.ContractApi = factory(root.ClientPortalWebApi.ApiClient, root.ClientPortalWebApi.Body5, root.ClientPortalWebApi.Contract, root.ClientPortalWebApi.InlineResponse20016, root.ClientPortalWebApi.InlineResponse2008, root.ClientPortalWebApi.InlineResponse500, root.ClientPortalWebApi.Secdef, root.ClientPortalWebApi.Symbol);
  }
}(this, function(ApiClient, Body5, Contract, InlineResponse20016, InlineResponse2008, InlineResponse500, Secdef, Symbol) {
  'use strict';

  /**
   * Contract service.
   * @module api/ContractApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ContractApi. 
   * @alias module:api/ContractApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the iserverContractConidInfoGet operation.
     * @callback module:api/ContractApi~iserverContractConidInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contract Info
     * get contract details, you can use this to prefill your order before you submit an order
     * @param {String} conid contract id
     * @param {module:api/ContractApi~iserverContractConidInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contract}
     */
    this.iserverContractConidInfoGet = function(conid, callback) {
      var postBody = null;

      // verify the required parameter 'conid' is set
      if (conid === undefined || conid === null) {
        throw new Error("Missing the required parameter 'conid' when calling iserverContractConidInfoGet");
      }


      var pathParams = {
        'conid': conid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Contract;

      return this.apiClient.callApi(
        '/iserver/contract/{conid}/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iserverSecdefSearchPost operation.
     * @callback module:api/ContractApi~iserverSecdefSearchPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2008>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search by symbol or name
     * @param {module:model/Symbol} symbol symbol or name to be searched
     * @param {module:api/ContractApi~iserverSecdefSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2008>}
     */
    this.iserverSecdefSearchPost = function(symbol, callback) {
      var postBody = symbol;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling iserverSecdefSearchPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2008];

      return this.apiClient.callApi(
        '/iserver/secdef/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trsrvFuturesGet operation.
     * @callback module:api/ContractApi~trsrvFuturesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security Futures by Symbol
     * Returns a list of non-expired future contracts for given symbol(s)
     * @param {String} symbols list of case-sensitive symbols separated by comma
     * @param {module:api/ContractApi~trsrvFuturesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20016}
     */
    this.trsrvFuturesGet = function(symbols, callback) {
      var postBody = null;

      // verify the required parameter 'symbols' is set
      if (symbols === undefined || symbols === null) {
        throw new Error("Missing the required parameter 'symbols' when calling trsrvFuturesGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'symbols': symbols,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/trsrv/futures', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trsrvSecdefPost operation.
     * @callback module:api/ContractApi~trsrvSecdefPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secdef} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Secdef by Conid
     * Returns a list of security definitions for the given conids
     * @param {module:model/Body5} body request body
     * @param {module:api/ContractApi~trsrvSecdefPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secdef}
     */
    this.trsrvSecdefPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling trsrvSecdefPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Secdef;

      return this.apiClient.callApi(
        '/trsrv/secdef', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
