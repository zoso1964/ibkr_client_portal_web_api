/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body6', 'model/Body7', 'model/InlineResponse20018', 'model/InlineResponse20019', 'model/InlineResponse20020', 'model/InlineResponse20021', 'model/InlineResponse20022', 'model/Notifications'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body6'), require('../model/Body7'), require('../model/InlineResponse20018'), require('../model/InlineResponse20019'), require('../model/InlineResponse20020'), require('../model/InlineResponse20021'), require('../model/InlineResponse20022'), require('../model/Notifications'));
  } else {
    // Browser globals (root is window)
    if (!root.ClientPortalWebApi) {
      root.ClientPortalWebApi = {};
    }
    root.ClientPortalWebApi.FYIApi = factory(root.ClientPortalWebApi.ApiClient, root.ClientPortalWebApi.Body6, root.ClientPortalWebApi.Body7, root.ClientPortalWebApi.InlineResponse20018, root.ClientPortalWebApi.InlineResponse20019, root.ClientPortalWebApi.InlineResponse20020, root.ClientPortalWebApi.InlineResponse20021, root.ClientPortalWebApi.InlineResponse20022, root.ClientPortalWebApi.Notifications);
  }
}(this, function(ApiClient, Body6, Body7, InlineResponse20018, InlineResponse20019, InlineResponse20020, InlineResponse20021, InlineResponse20022, Notifications) {
  'use strict';

  /**
   * FYI service.
   * @module api/FYIApi
   * @version 1.0.0
   */

  /**
   * Constructs a new FYIApi. 
   * @alias module:api/FYIApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the fyiDeliveryoptionsDeviceIdDelete operation.
     * @callback module:api/FYIApi~fyiDeliveryoptionsDeviceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a device
     * @param {String} deviceId device ID
     * @param {module:api/FYIApi~fyiDeliveryoptionsDeviceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.fyiDeliveryoptionsDeviceIdDelete = function(deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling fyiDeliveryoptionsDeviceIdDelete");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/fyi/deliveryoptions/{deviceId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiDeliveryoptionsDevicePost operation.
     * @callback module:api/FYIApi~fyiDeliveryoptionsDevicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * enable/disable device option
     * @param {module:model/Body7} body device info
     * @param {module:api/FYIApi~fyiDeliveryoptionsDevicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    this.fyiDeliveryoptionsDevicePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fyiDeliveryoptionsDevicePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/fyi/deliveryoptions/device', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiDeliveryoptionsEmailPut operation.
     * @callback module:api/FYIApi~fyiDeliveryoptionsEmailPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * enable/disable email option
     * @param {String} enabled true/false
     * @param {module:api/FYIApi~fyiDeliveryoptionsEmailPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    this.fyiDeliveryoptionsEmailPut = function(enabled, callback) {
      var postBody = null;

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling fyiDeliveryoptionsEmailPut");
      }


      var pathParams = {
      };
      var queryParams = {
        'enabled': enabled,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/fyi/deliveryoptions/email', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiDeliveryoptionsGet operation.
     * @callback module:api/FYIApi~fyiDeliveryoptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get delivery options
     * options for sending fyis to email and other devices 
     * @param {module:api/FYIApi~fyiDeliveryoptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20022}
     */
    this.fyiDeliveryoptionsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/fyi/deliveryoptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiDisclaimerTypecodeGet operation.
     * @callback module:api/FYIApi~fyiDisclaimerTypecodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get disclaimer for a certain kind of fyi
     * @param {String} typecode fyi code, for example --M8, EA
     * @param {module:api/FYIApi~fyiDisclaimerTypecodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20020}
     */
    this.fyiDisclaimerTypecodeGet = function(typecode, callback) {
      var postBody = null;

      // verify the required parameter 'typecode' is set
      if (typecode === undefined || typecode === null) {
        throw new Error("Missing the required parameter 'typecode' when calling fyiDisclaimerTypecodeGet");
      }


      var pathParams = {
        'typecode': typecode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/fyi/disclaimer/{typecode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiDisclaimerTypecodePut operation.
     * @callback module:api/FYIApi~fyiDisclaimerTypecodePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * mark disclaimer read
     * @param {String} typecode fyi code, for example --M8, EA
     * @param {module:api/FYIApi~fyiDisclaimerTypecodePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    this.fyiDisclaimerTypecodePut = function(typecode, callback) {
      var postBody = null;

      // verify the required parameter 'typecode' is set
      if (typecode === undefined || typecode === null) {
        throw new Error("Missing the required parameter 'typecode' when calling fyiDisclaimerTypecodePut");
      }


      var pathParams = {
        'typecode': typecode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/fyi/disclaimer/{typecode}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiNotificationsGet operation.
     * @callback module:api/FYIApi~fyiNotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notifications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of notifications
     * @param {String} max max number of fyis in response
     * @param {Object} opts Optional parameters
     * @param {String} opts.exclude if set, don't set include
     * @param {String} opts.include if set, don't set exclude
     * @param {module:api/FYIApi~fyiNotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notifications}
     */
    this.fyiNotificationsGet = function(max, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'max' is set
      if (max === undefined || max === null) {
        throw new Error("Missing the required parameter 'max' when calling fyiNotificationsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'exclude': opts['exclude'],
        'include': opts['include'],
        'max': max,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Notifications;

      return this.apiClient.callApi(
        '/fyi/notifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiNotificationsMoreGet operation.
     * @callback module:api/FYIApi~fyiNotificationsMoreGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notifications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get more notifications based on a certain one
     * @param {String} id id of last notification in the list
     * @param {module:api/FYIApi~fyiNotificationsMoreGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notifications}
     */
    this.fyiNotificationsMoreGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fyiNotificationsMoreGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Notifications;

      return this.apiClient.callApi(
        '/fyi/notifications/more', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiNotificationsNotificationIdPut operation.
     * @callback module:api/FYIApi~fyiNotificationsNotificationIdPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of notifications
     * @param {String} notificationId mark a notification read
     * @param {module:api/FYIApi~fyiNotificationsNotificationIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.fyiNotificationsNotificationIdPut = function(notificationId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling fyiNotificationsNotificationIdPut");
      }


      var pathParams = {
        'notificationId': notificationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/fyi/notifications/{notificationId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiSettingsGet operation.
     * @callback module:api/FYIApi~fyiSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20019>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of subscriptions
     * return the current choices of subscriptions, we can toggle the option 
     * @param {module:api/FYIApi~fyiSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20019>}
     */
    this.fyiSettingsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse20019];

      return this.apiClient.callApi(
        '/fyi/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiSettingsTypecodePost operation.
     * @callback module:api/FYIApi~fyiSettingsTypecodePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * enable/disable certain subscription
     * @param {String} typecode fyi code
     * @param {module:model/Body6} body 
     * @param {module:api/FYIApi~fyiSettingsTypecodePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.fyiSettingsTypecodePost = function(typecode, body, callback) {
      var postBody = body;

      // verify the required parameter 'typecode' is set
      if (typecode === undefined || typecode === null) {
        throw new Error("Missing the required parameter 'typecode' when calling fyiSettingsTypecodePost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fyiSettingsTypecodePost");
      }


      var pathParams = {
        'typecode': typecode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/fyi/settings/{typecode}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fyiUnreadnumberGet operation.
     * @callback module:api/FYIApi~fyiUnreadnumberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get unread number of fyis
     * @param {module:api/FYIApi~fyiUnreadnumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20018}
     */
    this.fyiUnreadnumberGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/fyi/unreadnumber', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
