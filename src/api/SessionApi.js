/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthStatus', 'model/InlineResponse20015'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthStatus'), require('../model/InlineResponse20015'));
  } else {
    // Browser globals (root is window)
    if (!root.ClientPortalWebApi) {
      root.ClientPortalWebApi = {};
    }
    root.ClientPortalWebApi.SessionApi = factory(root.ClientPortalWebApi.ApiClient, root.ClientPortalWebApi.AuthStatus, root.ClientPortalWebApi.InlineResponse20015);
  }
}(this, function(ApiClient, AuthStatus, InlineResponse20015) {
  'use strict';

  /**
   * Session service.
   * @module api/SessionApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SessionApi. 
   * @alias module:api/SessionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the iserverAuthStatusPost operation.
     * @callback module:api/SessionApi~iserverAuthStatusPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authentication Status
     * Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not authenticated, e.g. authenticated shows false
     * @param {module:api/SessionApi~iserverAuthStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthStatus}
     */
    this.iserverAuthStatusPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AuthStatus;

      return this.apiClient.callApi(
        '/iserver/auth/status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iserverReauthenticatePost operation.
     * @callback module:api/SessionApi~iserverReauthenticatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tries to re-authenticate to Brokerage
     * Provides a way to reauthenticate to the Brokerage system as long as there is a valid SSO session, see /sso/validate.
     * @param {module:api/SessionApi~iserverReauthenticatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthStatus}
     */
    this.iserverReauthenticatePost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AuthStatus;

      return this.apiClient.callApi(
        '/iserver/reauthenticate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutPost operation.
     * @callback module:api/SessionApi~logoutPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ends the current session
     * Logs the user out of the gateway session. Any further activity requires re-authentication.
     * @param {module:api/SessionApi~logoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20015}
     */
    this.logoutPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/logout', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ssoValidateGet operation.
     * @callback module:api/SessionApi~ssoValidateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate SSO
     * Validates the current session for the SSO user
     * @param {module:api/SessionApi~ssoValidateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.ssoValidateGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sso/validate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ticklePost operation.
     * @callback module:api/SessionApi~ticklePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping the server to keep the session open
     * If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending.
     * @param {module:api/SessionApi~ticklePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.ticklePost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tickle', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
