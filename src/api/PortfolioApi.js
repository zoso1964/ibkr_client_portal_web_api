/*
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Account', 'model/Accounts', 'model/Allocation', 'model/Body2', 'model/InlineResponse20012', 'model/InlineResponse20013', 'model/InlineResponse20014', 'model/Position'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Account'), require('../model/Accounts'), require('../model/Allocation'), require('../model/Body2'), require('../model/InlineResponse20012'), require('../model/InlineResponse20013'), require('../model/InlineResponse20014'), require('../model/Position'));
  } else {
    // Browser globals (root is window)
    if (!root.ClientPortalWebApi) {
      root.ClientPortalWebApi = {};
    }
    root.ClientPortalWebApi.PortfolioApi = factory(root.ClientPortalWebApi.ApiClient, root.ClientPortalWebApi.Account, root.ClientPortalWebApi.Accounts, root.ClientPortalWebApi.Allocation, root.ClientPortalWebApi.Body2, root.ClientPortalWebApi.InlineResponse20012, root.ClientPortalWebApi.InlineResponse20013, root.ClientPortalWebApi.InlineResponse20014, root.ClientPortalWebApi.Position);
  }
}(this, function(ApiClient, Account, Accounts, Allocation, Body2, InlineResponse20012, InlineResponse20013, InlineResponse20014, Position) {
  'use strict';

  /**
   * Portfolio service.
   * @module api/PortfolioApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PortfolioApi. 
   * @alias module:api/PortfolioApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the portfolioAccountIdAllocationGet operation.
     * @callback module:api/PortfolioApi~portfolioAccountIdAllocationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Allocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Allocation
     * Information about the account's portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     * @param {String} accountId account id
     * @param {module:api/PortfolioApi~portfolioAccountIdAllocationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Allocation}
     */
    this.portfolioAccountIdAllocationGet = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling portfolioAccountIdAllocationGet");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Allocation;

      return this.apiClient.callApi(
        '/portfolio/{accountId}/allocation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioAccountIdLedgerGet operation.
     * @callback module:api/PortfolioApi~portfolioAccountIdLedgerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Ledger
     * Information regarding settled cash, cash balances, etc. in the account's base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f=3185.
     * @param {String} accountId account id
     * @param {module:api/PortfolioApi~portfolioAccountIdLedgerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.portfolioAccountIdLedgerGet = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling portfolioAccountIdLedgerGet");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/portfolio/{accountId}/ledger', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioAccountIdMetaGet operation.
     * @callback module:api/PortfolioApi~portfolioAccountIdMetaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Information
     * Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     * @param {String} accountId account id
     * @param {module:api/PortfolioApi~portfolioAccountIdMetaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    this.portfolioAccountIdMetaGet = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling portfolioAccountIdMetaGet");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Accounts;

      return this.apiClient.callApi(
        '/portfolio/{accountId}/meta', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioAccountIdPositionConidGet operation.
     * @callback module:api/PortfolioApi~portfolioAccountIdPositionConidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Position by Conid
     * Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     * @param {String} accountId account id
     * @param {Number} conid contract id
     * @param {module:api/PortfolioApi~portfolioAccountIdPositionConidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Position}
     */
    this.portfolioAccountIdPositionConidGet = function(accountId, conid, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling portfolioAccountIdPositionConidGet");
      }

      // verify the required parameter 'conid' is set
      if (conid === undefined || conid === null) {
        throw new Error("Missing the required parameter 'conid' when calling portfolioAccountIdPositionConidGet");
      }


      var pathParams = {
        'accountId': accountId,
        'conid': conid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/portfolio/{accountId}/position/{conid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioAccountIdPositionsInvalidatePost operation.
     * @callback module:api/PortfolioApi~portfolioAccountIdPositionsInvalidatePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidates the backend cache of the Portfolio
     * @param {String} accountId account id
     * @param {module:api/PortfolioApi~portfolioAccountIdPositionsInvalidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.portfolioAccountIdPositionsInvalidatePost = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling portfolioAccountIdPositionsInvalidatePost");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/portfolio/{accountId}/positions/invalidate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioAccountIdPositionsPageIdGet operation.
     * @callback module:api/PortfolioApi~portfolioAccountIdPositionsPageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Portfolio Positions
     * Returns a list of positions for the given account. The endpoint supports paging, page's default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     * @param {String} accountId account id
     * @param {String} pageId page id
     * @param {Object} opts Optional parameters
     * @param {String} opts.model optional
     * @param {String} opts.sort declare the table to be sorted by which column
     * @param {String} opts.direction in which order, a means ascending - d means descending
     * @param {String} opts.period period for pnl column, can be 1D, 7D, 1M...
     * @param {module:api/PortfolioApi~portfolioAccountIdPositionsPageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Position}
     */
    this.portfolioAccountIdPositionsPageIdGet = function(accountId, pageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling portfolioAccountIdPositionsPageIdGet");
      }

      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling portfolioAccountIdPositionsPageIdGet");
      }


      var pathParams = {
        'accountId': accountId,
        'pageId': pageId
      };
      var queryParams = {
        'model': opts['model'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'period': opts['period'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/portfolio/{accountId}/positions/{pageId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioAccountIdSummaryGet operation.
     * @callback module:api/PortfolioApi~portfolioAccountIdSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Summary
     * Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     * @param {String} accountId account id
     * @param {module:api/PortfolioApi~portfolioAccountIdSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    this.portfolioAccountIdSummaryGet = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling portfolioAccountIdSummaryGet");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/portfolio/{accountId}/summary', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioAccountsGet operation.
     * @callback module:api/PortfolioApi~portfolioAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Portfolio Accounts
     * In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
     * @param {module:api/PortfolioApi~portfolioAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    this.portfolioAccountsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Accounts;

      return this.apiClient.callApi(
        '/portfolio/accounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioAllocationPost operation.
     * @callback module:api/PortfolioApi~portfolioAllocationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Allocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Alloction (All Accounts)
     * Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     * @param {module:model/Body2} body accounts info
     * @param {module:api/PortfolioApi~portfolioAllocationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Allocation}
     */
    this.portfolioAllocationPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling portfolioAllocationPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Allocation;

      return this.apiClient.callApi(
        '/portfolio/allocation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioPositionsConidGet operation.
     * @callback module:api/PortfolioApi~portfolioPositionsConidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Positions by Conid
     * Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     * @param {Number} conid contract id
     * @param {module:api/PortfolioApi~portfolioPositionsConidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20014}
     */
    this.portfolioPositionsConidGet = function(conid, callback) {
      var postBody = null;

      // verify the required parameter 'conid' is set
      if (conid === undefined || conid === null) {
        throw new Error("Missing the required parameter 'conid' when calling portfolioPositionsConidGet");
      }


      var pathParams = {
        'conid': conid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/portfolio/positions/{conid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioSubaccountsGet operation.
     * @callback module:api/PortfolioApi~portfolioSubaccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of Sub-Accounts
     * Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
     * @param {module:api/PortfolioApi~portfolioSubaccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.portfolioSubaccountsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/portfolio/subaccounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
